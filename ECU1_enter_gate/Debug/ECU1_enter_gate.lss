
ECU1_enter_gate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ba  00800060  00003e64  00003ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  0080021a  0080021a  000040b2  2**0
                  ALLOC
  3 .debug_aranges 000004d8  00000000  00000000  000040b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008c5  00000000  00000000  0000458a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039a1  00000000  00000000  00004e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b31  00000000  00000000  000087f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043f3  00000000  00000000  0000a321  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  0000e714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d22  00000000  00000000  0000edc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000090e  00000000  00000000  0000fae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0004380f  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  00053c03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_10>
      2c:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_11>
      30:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 31       	cpi	r26, 0x1A	; 26
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e1       	ldi	r26, 0x1A	; 26
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 35       	cpi	r26, 0x5F	; 95
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <main>
      8a:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ee       	ldi	r26, 0xEE	; 238
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ee       	ldi	r24, 0xEE	; 238
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	ea 50       	subi	r30, 0x0A	; 10
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <MCAL_UART_Init>:

/* ============================================================================ */
/* ==================== APIs Supported by "MCAL ADC DRIVER" =================== */
/* ============================================================================ */
void MCAL_UART_Init(UART_Config_t* UARTCFG)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <MCAL_UART_Init+0x6>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
	// 1. set baud rate
	 UBRRL = UARTCFG->UART_BaudRate;
     cae:	a9 e2       	ldi	r26, 0x29	; 41
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	8c 93       	st	X, r24
	 
	// 2. disable double speed
	CLEARBIT(UCSRA ,U2X );
     cba:	ab e2       	ldi	r26, 0x2B	; 43
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	eb e2       	ldi	r30, 0x2B	; 43
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8d 7f       	andi	r24, 0xFD	; 253
     cc6:	8c 93       	st	X, r24
	
	// 3. set bit size
	UCSRC |= UARTCFG->UART_DATA_SIZE;
     cc8:	a0 e4       	ldi	r26, 0x40	; 64
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e0 e4       	ldi	r30, 0x40	; 64
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	90 81       	ld	r25, Z
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	82 81       	ldd	r24, Z+2	; 0x02
     cd8:	89 2b       	or	r24, r25
     cda:	8c 93       	st	X, r24
	CLEARBIT(UCSRB , UCSZ2);
     cdc:	aa e2       	ldi	r26, 0x2A	; 42
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	ea e2       	ldi	r30, 0x2A	; 42
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8b 7f       	andi	r24, 0xFB	; 251
     ce8:	8c 93       	st	X, r24
	if (UARTCFG->UART_DATA_SIZE == UART_DATA_SIZE_9bit)
     cea:	e9 81       	ldd	r30, Y+1	; 0x01
     cec:	fa 81       	ldd	r31, Y+2	; 0x02
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	86 30       	cpi	r24, 0x06	; 6
     cf2:	39 f4       	brne	.+14     	; 0xd02 <MCAL_UART_Init+0x62>
	{
		SETBIT(UCSRB , UCSZ2);
     cf4:	aa e2       	ldi	r26, 0x2A	; 42
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ea e2       	ldi	r30, 0x2A	; 42
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	84 60       	ori	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
	}
	
	// 4. parity mode
	UCSRC |= UARTCFG->UART_Parity_Mode;
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e0 e4       	ldi	r30, 0x40	; 64
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	90 81       	ld	r25, Z
     d0c:	e9 81       	ldd	r30, Y+1	; 0x01
     d0e:	fa 81       	ldd	r31, Y+2	; 0x02
     d10:	83 81       	ldd	r24, Z+3	; 0x03
     d12:	89 2b       	or	r24, r25
     d14:	8c 93       	st	X, r24
	
	// 5. stop bit
	UCSRC |= UARTCFG->UART_STOP_Bit;
     d16:	a0 e4       	ldi	r26, 0x40	; 64
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e0 e4       	ldi	r30, 0x40	; 64
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	90 81       	ld	r25, Z
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	fa 81       	ldd	r31, Y+2	; 0x02
     d24:	84 81       	ldd	r24, Z+4	; 0x04
     d26:	89 2b       	or	r24, r25
     d28:	8c 93       	st	X, r24
	
	// 6. ENABLE/DISABLE INTERRUPT
	UCSRB |= UARTCFG->UART_IRQ;
     d2a:	aa e2       	ldi	r26, 0x2A	; 42
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ea e2       	ldi	r30, 0x2A	; 42
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	90 81       	ld	r25, Z
     d34:	e9 81       	ldd	r30, Y+1	; 0x01
     d36:	fa 81       	ldd	r31, Y+2	; 0x02
     d38:	85 81       	ldd	r24, Z+5	; 0x05
     d3a:	89 2b       	or	r24, r25
     d3c:	8c 93       	st	X, r24
	if (UARTCFG->UART_IRQ != UART_IRQ_disable)
     d3e:	e9 81       	ldd	r30, Y+1	; 0x01
     d40:	fa 81       	ldd	r31, Y+2	; 0x02
     d42:	85 81       	ldd	r24, Z+5	; 0x05
     d44:	88 23       	and	r24, r24
     d46:	09 f0       	breq	.+2      	; 0xd4a <MCAL_UART_Init+0xaa>
	{
		sei();
     d48:	78 94       	sei
	}
	
	// 7. Enable Sending Receiving 
	SETBIT(UCSRB, RXEN);
     d4a:	aa e2       	ldi	r26, 0x2A	; 42
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 61       	ori	r24, 0x10	; 16
     d56:	8c 93       	st	X, r24
	SETBIT(UCSRB, TXEN);
     d58:	aa e2       	ldi	r26, 0x2A	; 42
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ea e2       	ldi	r30, 0x2A	; 42
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	8c 93       	st	X, r24
	
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <MCAL_UART_send_data>:
void MCAL_UART_DEInit(void);

void MCAL_UART_send_data(uint8_t* TxBuffer, Polling_t polling)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	00 d0       	rcall	.+0      	; 0xd76 <MCAL_UART_send_data+0x6>
     d76:	0f 92       	push	r0
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	6b 83       	std	Y+3, r22	; 0x03
	if(polling == PollingENABLE)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	88 23       	and	r24, r24
     d86:	99 f4       	brne	.+38     	; 0xdae <MCAL_UART_send_data+0x3e>
		while(!READBIT(UCSRA , UDRE));
     d88:	eb e2       	ldi	r30, 0x2B	; 43
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	80 72       	andi	r24, 0x20	; 32
     d94:	90 70       	andi	r25, 0x00	; 0
     d96:	95 95       	asr	r25
     d98:	87 95       	ror	r24
     d9a:	95 95       	asr	r25
     d9c:	87 95       	ror	r24
     d9e:	95 95       	asr	r25
     da0:	87 95       	ror	r24
     da2:	95 95       	asr	r25
     da4:	87 95       	ror	r24
     da6:	95 95       	asr	r25
     da8:	87 95       	ror	r24
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	69 f3       	breq	.-38     	; 0xd88 <MCAL_UART_send_data+0x18>
	
	if (READBIT(UCSRB, UCSZ2))  // 9bit mode
     dae:	ea e2       	ldi	r30, 0x2A	; 42
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	84 70       	andi	r24, 0x04	; 4
     dba:	90 70       	andi	r25, 0x00	; 0
     dbc:	95 95       	asr	r25
     dbe:	87 95       	ror	r24
     dc0:	95 95       	asr	r25
     dc2:	87 95       	ror	r24
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <MCAL_UART_send_data+0x94>
	{
		/*	If 9-bit characters are used (UCSZ = 7),				*/
		/*	the ninth bit must be written to the TXB8 bit in UCSRB	*/
		/*	before the low byte of the character is written to UDR.	*/
		UCSRB &= ~(1<<TXB8); 
     dc8:	aa e2       	ldi	r26, 0x2A	; 42
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ea e2       	ldi	r30, 0x2A	; 42
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8e 7f       	andi	r24, 0xFE	; 254
     dd4:	8c 93       	st	X, r24
		if((*TxBuffer & (1<<8)))
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	80 81       	ld	r24, Z
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	80 70       	andi	r24, 0x00	; 0
     de2:	91 70       	andi	r25, 0x01	; 1
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	39 f0       	breq	.+14     	; 0xdf6 <MCAL_UART_send_data+0x86>
			UCSRB |= (1<<TXB8); 
     de8:	aa e2       	ldi	r26, 0x2A	; 42
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ea e2       	ldi	r30, 0x2A	; 42
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	8c 93       	st	X, r24
			
		UDR = ((uint8_t)(*TxBuffer));	
     df6:	ec e2       	ldi	r30, 0x2C	; 44
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	a9 81       	ldd	r26, Y+1	; 0x01
     dfc:	ba 81       	ldd	r27, Y+2	; 0x02
     dfe:	8c 91       	ld	r24, X
     e00:	80 83       	st	Z, r24
     e02:	06 c0       	rjmp	.+12     	; 0xe10 <MCAL_UART_send_data+0xa0>
	}else
	{
		UDR = ((uint8_t)(*TxBuffer));		
     e04:	ec e2       	ldi	r30, 0x2C	; 44
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	a9 81       	ldd	r26, Y+1	; 0x01
     e0a:	ba 81       	ldd	r27, Y+2	; 0x02
     e0c:	8c 91       	ld	r24, X
     e0e:	80 83       	st	Z, r24
	}
}
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <MCAL_UART_Receive_data>:
uint16_t MCAL_UART_Receive_data( Polling_t polling)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <MCAL_UART_Receive_data+0x6>
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t rxBuffer;
	if(polling == PollingENABLE)
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	88 23       	and	r24, r24
     e2e:	59 f4       	brne	.+22     	; 0xe46 <MCAL_UART_Receive_data+0x2a>
		while(!READBIT(UCSRA , RXC));
     e30:	eb e2       	ldi	r30, 0x2B	; 43
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	88 1f       	adc	r24, r24
     e38:	88 27       	eor	r24, r24
     e3a:	88 1f       	adc	r24, r24
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	90 70       	andi	r25, 0x00	; 0
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	a9 f3       	breq	.-22     	; 0xe30 <MCAL_UART_Receive_data+0x14>
	
	if (READBIT(UCSRB, UCSZ2))  // 9bit mode
     e46:	ea e2       	ldi	r30, 0x2A	; 42
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	84 70       	andi	r24, 0x04	; 4
     e52:	90 70       	andi	r25, 0x00	; 0
     e54:	95 95       	asr	r25
     e56:	87 95       	ror	r24
     e58:	95 95       	asr	r25
     e5a:	87 95       	ror	r24
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	99 f0       	breq	.+38     	; 0xe86 <MCAL_UART_Receive_data+0x6a>
	{
		/* If 9 bit characters are used (UCSZ=7)				 */
		/* the ninth bit must be read from the RXB8 bit in UCSRB */
		/* before reading the low bits from the UDR.			 */
		rxBuffer = READBIT(UCSRB , RXB8);
     e60:	ea e2       	ldi	r30, 0x2A	; 42
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 2f       	mov	r24, r24
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	82 70       	andi	r24, 0x02	; 2
     e6c:	90 70       	andi	r25, 0x00	; 0
     e6e:	95 95       	asr	r25
     e70:	87 95       	ror	r24
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
		rxBuffer = UDR ;
     e76:	ec e2       	ldi	r30, 0x2C	; 44
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	07 c0       	rjmp	.+14     	; 0xe94 <MCAL_UART_Receive_data+0x78>
	}else
	{
		rxBuffer = UDR ;
     e86:	ec e2       	ldi	r30, 0x2C	; 44
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return rxBuffer;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <MCAL_UART_Send_String>:


void MCAL_UART_Send_String(uint8_t *string)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <MCAL_UART_Send_String+0x6>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	0a c0       	rjmp	.+20     	; 0xec8 <MCAL_UART_Send_String+0x24>
	while(*string)
	{
		MCAL_UART_send_data(string , PollingENABLE);
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	0e 94 b8 06 	call	0xd70	; 0xd70 <MCAL_UART_send_data>
		string++;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	89 83       	std	Y+1, r24	; 0x01
}


void MCAL_UART_Send_String(uint8_t *string)
{
	while(*string)
     ec8:	e9 81       	ldd	r30, Y+1	; 0x01
     eca:	fa 81       	ldd	r31, Y+2	; 0x02
     ecc:	80 81       	ld	r24, Z
     ece:	88 23       	and	r24, r24
     ed0:	89 f7       	brne	.-30     	; 0xeb4 <MCAL_UART_Send_String+0x10>
	{
		MCAL_UART_send_data(string , PollingENABLE);
		string++;
	}
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <MCAL_UART_Receive_String>:


uint8_t *MCAL_UART_Receive_String(void)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <MCAL_UART_Receive_String+0x6>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
	static uint8_t string[50];
	uint8_t *p = &string;
     ee6:	8a e1       	ldi	r24, 0x1A	; 26
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	*string = MCAL_UART_Receive_data(PollingENABLE);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MCAL_UART_Receive_data>
     ef4:	80 93 1a 02 	sts	0x021A, r24
     ef8:	0b c0       	rjmp	.+22     	; 0xf10 <MCAL_UART_Receive_String+0x34>
	while(*p != 0x0D)
	{
		p++;
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	89 83       	std	Y+1, r24	; 0x01
		*p = MCAL_UART_Receive_data(PollingENABLE);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 0e 07 	call	0xe1c	; 0xe1c <MCAL_UART_Receive_data>
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	80 83       	st	Z, r24
uint8_t *MCAL_UART_Receive_String(void)
{
	static uint8_t string[50];
	uint8_t *p = &string;
	*string = MCAL_UART_Receive_data(PollingENABLE);
	while(*p != 0x0D)
     f10:	e9 81       	ldd	r30, Y+1	; 0x01
     f12:	fa 81       	ldd	r31, Y+2	; 0x02
     f14:	80 81       	ld	r24, Z
     f16:	8d 30       	cpi	r24, 0x0D	; 13
     f18:	81 f7       	brne	.-32     	; 0xefa <MCAL_UART_Receive_String+0x1e>
	{
		p++;
		*p = MCAL_UART_Receive_data(PollingENABLE);
	}
	*p = '\0';
     f1a:	e9 81       	ldd	r30, Y+1	; 0x01
     f1c:	fa 81       	ldd	r31, Y+2	; 0x02
     f1e:	10 82       	st	Z, r1
	return string;
     f20:	8a e1       	ldi	r24, 0x1A	; 26
     f22:	92 e0       	ldi	r25, 0x02	; 2
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <MCAL_Timer0_Init>:
 * @retval          - none
 * @Note            - Supported for TIMER0 ONLY
 * ===================================
 * */
void MCAL_Timer0_Init(TIMER0_Config_t* timer0_cfg)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	27 97       	sbiw	r28, 0x07	; 7
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	9a 83       	std	Y+2, r25	; 0x02
     f44:	89 83       	std	Y+1, r24	; 0x01
    G_Timer0_ConFig = *timer0_cfg;
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	20 e5       	ldi	r18, 0x50	; 80
     f4c:	32 e0       	ldi	r19, 0x02	; 2
     f4e:	3c 83       	std	Y+4, r19	; 0x04
     f50:	2b 83       	std	Y+3, r18	; 0x03
     f52:	9e 83       	std	Y+6, r25	; 0x06
     f54:	8d 83       	std	Y+5, r24	; 0x05
     f56:	35 e0       	ldi	r19, 0x05	; 5
     f58:	3f 83       	std	Y+7, r19	; 0x07
     f5a:	ed 81       	ldd	r30, Y+5	; 0x05
     f5c:	fe 81       	ldd	r31, Y+6	; 0x06
     f5e:	00 80       	ld	r0, Z
     f60:	2d 81       	ldd	r18, Y+5	; 0x05
     f62:	3e 81       	ldd	r19, Y+6	; 0x06
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	3e 83       	std	Y+6, r19	; 0x06
     f6a:	2d 83       	std	Y+5, r18	; 0x05
     f6c:	eb 81       	ldd	r30, Y+3	; 0x03
     f6e:	fc 81       	ldd	r31, Y+4	; 0x04
     f70:	00 82       	st	Z, r0
     f72:	2b 81       	ldd	r18, Y+3	; 0x03
     f74:	3c 81       	ldd	r19, Y+4	; 0x04
     f76:	2f 5f       	subi	r18, 0xFF	; 255
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	3c 83       	std	Y+4, r19	; 0x04
     f7c:	2b 83       	std	Y+3, r18	; 0x03
     f7e:	3f 81       	ldd	r19, Y+7	; 0x07
     f80:	31 50       	subi	r19, 0x01	; 1
     f82:	3f 83       	std	Y+7, r19	; 0x07
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	88 23       	and	r24, r24
     f88:	41 f7       	brne	.-48     	; 0xf5a <MCAL_Timer0_Init+0x2c>

    // 1. select Timer_Mode 
    TCCR0 |= timer0_cfg->Timer_Mode;
     f8a:	a3 e5       	ldi	r26, 0x53	; 83
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e3 e5       	ldi	r30, 0x53	; 83
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	90 81       	ld	r25, Z
     f94:	e9 81       	ldd	r30, Y+1	; 0x01
     f96:	fa 81       	ldd	r31, Y+2	; 0x02
     f98:	80 81       	ld	r24, Z
     f9a:	89 2b       	or	r24, r25
     f9c:	8c 93       	st	X, r24

    if(timer0_cfg->Timer_Mode == Timer0_Mode_PWM_INVERTING ||
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	80 81       	ld	r24, Z
     fa4:	88 37       	cpi	r24, 0x78	; 120
     fa6:	29 f0       	breq	.+10     	; 0xfb2 <MCAL_Timer0_Init+0x84>
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	80 81       	ld	r24, Z
     fae:	88 36       	cpi	r24, 0x68	; 104
     fb0:	29 f4       	brne	.+10     	; 0xfbc <MCAL_Timer0_Init+0x8e>
        timer0_cfg->Timer_Mode == Timer0_Mode_PWM_NONINVERTING
        )
    {
        // configure OC0 (PB3) as output
        DIO_SetPinDirection(DIO_PORTB,DIO_PIN3 , DIO_PIN_OUTPUT);
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	63 e0       	ldi	r22, 0x03	; 3
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_SetPinDirection>
    }

    // 2. select Timer_Clock_Source
    TCCR0 |= timer0_cfg->Timer_Clock_Source;
     fbc:	a3 e5       	ldi	r26, 0x53	; 83
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e3 e5       	ldi	r30, 0x53	; 83
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	90 81       	ld	r25, Z
     fc6:	e9 81       	ldd	r30, Y+1	; 0x01
     fc8:	fa 81       	ldd	r31, Y+2	; 0x02
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	89 2b       	or	r24, r25
     fce:	8c 93       	st	X, r24
        if(timer0_cfg->Timer_Clock_Source == Timer_Clock_Source_External_Falling_Edge ||
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	81 81       	ldd	r24, Z+1	; 0x01
     fd6:	86 30       	cpi	r24, 0x06	; 6
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <MCAL_Timer0_Init+0xb6>
     fda:	e9 81       	ldd	r30, Y+1	; 0x01
     fdc:	fa 81       	ldd	r31, Y+2	; 0x02
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	87 30       	cpi	r24, 0x07	; 7
     fe2:	29 f4       	brne	.+10     	; 0xfee <MCAL_Timer0_Init+0xc0>
        timer0_cfg->Timer_Clock_Source == Timer_Clock_Source_External_Rising_Edge
        )
    {
        // configure T0 (PB0) as INPUT
        DIO_SetPinDirection(DIO_PORTB,DIO_PIN0 , DIO_PIN_INPUT);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_SetPinDirection>
    }

    // 3. select IRQ_Enable
    TIMSK |= timer0_cfg->IRQ_Enable;
     fee:	a9 e5       	ldi	r26, 0x59	; 89
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e9 e5       	ldi	r30, 0x59	; 89
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	90 81       	ld	r25, Z
     ff8:	e9 81       	ldd	r30, Y+1	; 0x01
     ffa:	fa 81       	ldd	r31, Y+2	; 0x02
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	89 2b       	or	r24, r25
    1000:	8c 93       	st	X, r24
    if(timer0_cfg->IRQ_Enable != IRQ_Enable_NON)
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	88 23       	and	r24, r24
    100a:	09 f0       	breq	.+2      	; 0x100e <MCAL_Timer0_Init+0xe0>
    {
        sei();
    100c:	78 94       	sei
    }

    // 4. Call back ISR function
    GP_IRQ_CallBack = timer0_cfg->P_IRQ_CallBack;
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	fa 81       	ldd	r31, Y+2	; 0x02
    1012:	83 81       	ldd	r24, Z+3	; 0x03
    1014:	94 81       	ldd	r25, Z+4	; 0x04
    1016:	90 93 4d 02 	sts	0x024D, r25
    101a:	80 93 4c 02 	sts	0x024C, r24
}
    101e:	27 96       	adiw	r28, 0x07	; 7
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <MCAL_Timer0_DeInit>:
 * @retval          - none
 * @Note            - none
 * ===================================
 * */
void MCAL_Timer0_DeInit(void)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    TCCR0 &= ~((1<<CS00) | (1<<CS01) | (1<<CS02));
    1038:	a3 e5       	ldi	r26, 0x53	; 83
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e3 e5       	ldi	r30, 0x53	; 83
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 7f       	andi	r24, 0xF8	; 248
    1044:	8c 93       	st	X, r24
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <MCAL_Timer0_GetCounterValue>:
 * @retval          - none
 * @Note            - none
 * ===================================
 * */
void MCAL_Timer0_GetCounterValue(uint8_t* TicksNumber)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <MCAL_Timer0_GetCounterValue+0x6>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
    *TicksNumber = TCNT0;
    105a:	e2 e5       	ldi	r30, 0x52	; 82
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	e9 81       	ldd	r30, Y+1	; 0x01
    1062:	fa 81       	ldd	r31, Y+2	; 0x02
    1064:	80 83       	st	Z, r24
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <MCAL_Timer0_SetCompareValue>:
 * @retval          - none
 * @Note            - none
 * ===================================
 * */
void MCAL_Timer0_SetCompareValue(uint8_t TicksNumber)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	0f 92       	push	r0
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = TicksNumber;
    107c:	ec e5       	ldi	r30, 0x5C	; 92
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	80 83       	st	Z, r24
}
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <MCAL_Timer0_PWM_DutyCycle>:

void MCAL_Timer0_PWM_DutyCycle(uint8_t DutyCycle)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	89 83       	std	Y+1, r24	; 0x01
    if(G_Timer0_ConFig.Timer_Mode == Timer0_Mode_PWM_NONINVERTING)
    1098:	80 91 50 02 	lds	r24, 0x0250
    109c:	88 36       	cpi	r24, 0x68	; 104
    109e:	d9 f4       	brne	.+54     	; 0x10d6 <MCAL_Timer0_PWM_DutyCycle+0x4a>
    {
        OCR0 = (0xFF*DutyCycle)/100;
    10a0:	ec e5       	ldi	r30, 0x5C	; 92
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	48 2f       	mov	r20, r24
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	ca 01       	movw	r24, r20
    10ac:	9c 01       	movw	r18, r24
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	c9 01       	movw	r24, r18
    10b4:	96 95       	lsr	r25
    10b6:	98 2f       	mov	r25, r24
    10b8:	88 27       	eor	r24, r24
    10ba:	97 95       	ror	r25
    10bc:	87 95       	ror	r24
    10be:	82 1b       	sub	r24, r18
    10c0:	93 0b       	sbc	r25, r19
    10c2:	84 0f       	add	r24, r20
    10c4:	95 1f       	adc	r25, r21
    10c6:	24 e6       	ldi	r18, 0x64	; 100
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	b9 01       	movw	r22, r18
    10cc:	0e 94 0f 1c 	call	0x381e	; 0x381e <__divmodhi4>
    10d0:	cb 01       	movw	r24, r22
    10d2:	80 83       	st	Z, r24
    10d4:	1f c0       	rjmp	.+62     	; 0x1114 <MCAL_Timer0_PWM_DutyCycle+0x88>
    }else if(G_Timer0_ConFig.Timer_Mode == Timer0_Mode_PWM_INVERTING)
    10d6:	80 91 50 02 	lds	r24, 0x0250
    10da:	88 37       	cpi	r24, 0x78	; 120
    10dc:	d9 f4       	brne	.+54     	; 0x1114 <MCAL_Timer0_PWM_DutyCycle+0x88>
    {
        OCR0 = (255- (0xFF*DutyCycle)/100);
    10de:	ec e5       	ldi	r30, 0x5C	; 92
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	48 2f       	mov	r20, r24
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	ca 01       	movw	r24, r20
    10ea:	9c 01       	movw	r18, r24
    10ec:	22 0f       	add	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	c9 01       	movw	r24, r18
    10f2:	96 95       	lsr	r25
    10f4:	98 2f       	mov	r25, r24
    10f6:	88 27       	eor	r24, r24
    10f8:	97 95       	ror	r25
    10fa:	87 95       	ror	r24
    10fc:	82 1b       	sub	r24, r18
    10fe:	93 0b       	sbc	r25, r19
    1100:	84 0f       	add	r24, r20
    1102:	95 1f       	adc	r25, r21
    1104:	24 e6       	ldi	r18, 0x64	; 100
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	0e 94 0f 1c 	call	0x381e	; 0x381e <__divmodhi4>
    110e:	cb 01       	movw	r24, r22
    1110:	80 95       	com	r24
    1112:	80 83       	st	Z, r24
    }
}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <__vector_11>:
/* ============================================================================ */
/* ================================== IRQ Handlers ============================ */
/* ============================================================================ */

ISR(TIMER0_OVF_vect)
{
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    GP_IRQ_CallBack();
    1146:	e0 91 4c 02 	lds	r30, 0x024C
    114a:	f0 91 4d 02 	lds	r31, 0x024D
    114e:	09 95       	icall
}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    GP_IRQ_CallBack();
    11a0:	e0 91 4c 02 	lds	r30, 0x024C
    11a4:	f0 91 4d 02 	lds	r31, 0x024D
    11a8:	09 95       	icall
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	bf 91       	pop	r27
    11b4:	af 91       	pop	r26
    11b6:	9f 91       	pop	r25
    11b8:	8f 91       	pop	r24
    11ba:	7f 91       	pop	r23
    11bc:	6f 91       	pop	r22
    11be:	5f 91       	pop	r21
    11c0:	4f 91       	pop	r20
    11c2:	3f 91       	pop	r19
    11c4:	2f 91       	pop	r18
    11c6:	0f 90       	pop	r0
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	0f 90       	pop	r0
    11cc:	1f 90       	pop	r1
    11ce:	18 95       	reti

000011d0 <MCAL_SPI_Init>:

/* ============================================================================ */
/* ==================== APIs Supported by "MCAL ADC DRIVER" =================== */
/* ============================================================================ */
void MCAL_SPI_Init         (SPI_Config_t* spi_CFG)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <MCAL_SPI_Init+0x6>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
	SPCR = 0X00;
    11de:	ed e2       	ldi	r30, 0x2D	; 45
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	10 82       	st	Z, r1
	SPSR = 0X00;
    11e4:	ee e2       	ldi	r30, 0x2E	; 46
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	10 82       	st	Z, r1

	// 1. set SPI mode
	SPCR |= spi_CFG->SPI_MODE;
    11ea:	ad e2       	ldi	r26, 0x2D	; 45
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ed e2       	ldi	r30, 0x2D	; 45
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	90 81       	ld	r25, Z
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	80 81       	ld	r24, Z
    11fa:	89 2b       	or	r24, r25
    11fc:	8c 93       	st	X, r24


	if (spi_CFG->SPI_MODE == SPI_MODE_Master)
    11fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1200:	fa 81       	ldd	r31, Y+2	; 0x02
    1202:	80 81       	ld	r24, Z
    1204:	80 31       	cpi	r24, 0x10	; 16
    1206:	21 f5       	brne	.+72     	; 0x1250 <MCAL_SPI_Init+0x80>
	{
		// 2. set GPIO PIN
		// Set MOSI, SCK, SS as an output pins
		// Set MISO pin as an input pin
		// SS => PB4   |    MOSI => PB5   |    MISO => PB6   |    SCK => PB7
		SETBIT(DDRB , 4);
    1208:	a7 e3       	ldi	r26, 0x37	; 55
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e7 e3       	ldi	r30, 0x37	; 55
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 61       	ori	r24, 0x10	; 16
    1214:	8c 93       	st	X, r24
		SETBIT(DDRB , 5);
    1216:	a7 e3       	ldi	r26, 0x37	; 55
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e7 e3       	ldi	r30, 0x37	; 55
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 62       	ori	r24, 0x20	; 32
    1222:	8c 93       	st	X, r24
		SETBIT(DDRB , 7);
    1224:	a7 e3       	ldi	r26, 0x37	; 55
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e7 e3       	ldi	r30, 0x37	; 55
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 68       	ori	r24, 0x80	; 128
    1230:	8c 93       	st	X, r24
		CLEARBIT(DDRB , 6);
    1232:	a7 e3       	ldi	r26, 0x37	; 55
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e7 e3       	ldi	r30, 0x37	; 55
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 7b       	andi	r24, 0xBF	; 191
    123e:	8c 93       	st	X, r24

		// 3. set SS pin to high
		SETBIT(PORTB , 4);
    1240:	a8 e3       	ldi	r26, 0x38	; 56
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e8 e3       	ldi	r30, 0x38	; 56
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 61       	ori	r24, 0x10	; 16
    124c:	8c 93       	st	X, r24
    124e:	21 c0       	rjmp	.+66     	; 0x1292 <MCAL_SPI_Init+0xc2>

	}else if (spi_CFG->SPI_MODE == SPI_MODE_Slave)
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	e1 f4       	brne	.+56     	; 0x1292 <MCAL_SPI_Init+0xc2>
	{
		// 2. set GPIO PIN
		// Set MOSI, SCK, SS as an input pins
		// Set MISO pin as an output pin
		// SS => PB4   |    MOSI => PB5   |    MISO => PB6   |    SCK => PB7
		CLEARBIT(DDRB , 4);
    125a:	a7 e3       	ldi	r26, 0x37	; 55
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e7 e3       	ldi	r30, 0x37	; 55
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 7e       	andi	r24, 0xEF	; 239
    1266:	8c 93       	st	X, r24
		CLEARBIT(DDRB , 5);
    1268:	a7 e3       	ldi	r26, 0x37	; 55
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8f 7d       	andi	r24, 0xDF	; 223
    1274:	8c 93       	st	X, r24
		CLEARBIT(DDRB , 7);
    1276:	a7 e3       	ldi	r26, 0x37	; 55
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8f 77       	andi	r24, 0x7F	; 127
    1282:	8c 93       	st	X, r24
		SETBIT(DDRB , 6);
    1284:	a7 e3       	ldi	r26, 0x37	; 55
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e7 e3       	ldi	r30, 0x37	; 55
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	80 64       	ori	r24, 0x40	; 64
    1290:	8c 93       	st	X, r24
	}

	// 4. SELECT SPI_prescaler
	SPCR |= spi_CFG->SPI_prescaler;
    1292:	ad e2       	ldi	r26, 0x2D	; 45
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ed e2       	ldi	r30, 0x2D	; 45
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	90 81       	ld	r25, Z
    129c:	e9 81       	ldd	r30, Y+1	; 0x01
    129e:	fa 81       	ldd	r31, Y+2	; 0x02
    12a0:	81 81       	ldd	r24, Z+1	; 0x01
    12a2:	89 2b       	or	r24, r25
    12a4:	8c 93       	st	X, r24

	// 5. SPI_Double_Speed
	SPSR |= spi_CFG->SPI_Double_Speed;
    12a6:	ae e2       	ldi	r26, 0x2E	; 46
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	ee e2       	ldi	r30, 0x2E	; 46
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	90 81       	ld	r25, Z
    12b0:	e9 81       	ldd	r30, Y+1	; 0x01
    12b2:	fa 81       	ldd	r31, Y+2	; 0x02
    12b4:	82 81       	ldd	r24, Z+2	; 0x02
    12b6:	89 2b       	or	r24, r25
    12b8:	8c 93       	st	X, r24

	// 6. SPI_Data_Order
	SPCR |= spi_CFG->SPI_Data_Order;
    12ba:	ad e2       	ldi	r26, 0x2D	; 45
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ed e2       	ldi	r30, 0x2D	; 45
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	90 81       	ld	r25, Z
    12c4:	e9 81       	ldd	r30, Y+1	; 0x01
    12c6:	fa 81       	ldd	r31, Y+2	; 0x02
    12c8:	83 81       	ldd	r24, Z+3	; 0x03
    12ca:	89 2b       	or	r24, r25
    12cc:	8c 93       	st	X, r24

	// 7. SPI_CLK_Polarity
	SPCR |= spi_CFG->SPI_CLK_Polarity;
    12ce:	ad e2       	ldi	r26, 0x2D	; 45
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ed e2       	ldi	r30, 0x2D	; 45
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	90 81       	ld	r25, Z
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	84 81       	ldd	r24, Z+4	; 0x04
    12de:	89 2b       	or	r24, r25
    12e0:	8c 93       	st	X, r24

	// 8. SPI_CLK_Phase
	SPCR |= spi_CFG->SPI_CLK_Phase;
    12e2:	ad e2       	ldi	r26, 0x2D	; 45
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ed e2       	ldi	r30, 0x2D	; 45
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	90 81       	ld	r25, Z
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	85 81       	ldd	r24, Z+5	; 0x05
    12f2:	89 2b       	or	r24, r25
    12f4:	8c 93       	st	X, r24

	// 9. SPI IRQ
	SPCR |= spi_CFG->SPI_IRQ;
    12f6:	ad e2       	ldi	r26, 0x2D	; 45
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ed e2       	ldi	r30, 0x2D	; 45
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	90 81       	ld	r25, Z
    1300:	e9 81       	ldd	r30, Y+1	; 0x01
    1302:	fa 81       	ldd	r31, Y+2	; 0x02
    1304:	86 81       	ldd	r24, Z+6	; 0x06
    1306:	89 2b       	or	r24, r25
    1308:	8c 93       	st	X, r24
	if (spi_CFG->SPI_IRQ == SPI_IRQ_Enable)
    130a:	e9 81       	ldd	r30, Y+1	; 0x01
    130c:	fa 81       	ldd	r31, Y+2	; 0x02
    130e:	86 81       	ldd	r24, Z+6	; 0x06
    1310:	80 38       	cpi	r24, 0x80	; 128
    1312:	09 f4       	brne	.+2      	; 0x1316 <MCAL_SPI_Init+0x146>
	{
		sei();
    1314:	78 94       	sei
	}

	// 10. enable SPI  => Bit 6 � SPE: SPI Enable
	SETBIT(SPCR , SPE);
    1316:	ad e2       	ldi	r26, 0x2D	; 45
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ed e2       	ldi	r30, 0x2D	; 45
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	80 64       	ori	r24, 0x40	; 64
    1322:	8c 93       	st	X, r24

}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <MCAL_SPI_DEInit>:




void MCAL_SPI_DEInit       (void)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	SPCR = 0X00;
    1336:	ed e2       	ldi	r30, 0x2D	; 45
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	10 82       	st	Z, r1
	SPSR = 0X00;
    133c:	ee e2       	ldi	r30, 0x2E	; 46
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	10 82       	st	Z, r1
}
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <MCAL_SPI_Send_Data>:

void MCAL_SPI_Send_Data    (uint8_t* p_TxBuffer  )
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <MCAL_SPI_Send_Data+0x6>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01

	// 1. pull ss pin to low 
	CLEARBIT(PORTB , 4);
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8f 7e       	andi	r24, 0xEF	; 239
    1362:	8c 93       	st	X, r24

	// 2. write data to SPI data register
	SPDR  = (uint8_t)(*p_TxBuffer);
    1364:	af e2       	ldi	r26, 0x2F	; 47
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e9 81       	ldd	r30, Y+1	; 0x01
    136a:	fa 81       	ldd	r31, Y+2	; 0x02
    136c:	80 81       	ld	r24, Z
    136e:	8c 93       	st	X, r24

	// 3. wait until transmission complete
	while(!READBIT(SPSR , SPIF));
    1370:	ee e2       	ldi	r30, 0x2E	; 46
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	88 1f       	adc	r24, r24
    1378:	88 27       	eor	r24, r24
    137a:	88 1f       	adc	r24, r24
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	90 70       	andi	r25, 0x00	; 0
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	a9 f3       	breq	.-22     	; 0x1370 <MCAL_SPI_Send_Data+0x28>

	// 4. pull ss pin to high
	SETBIT(PORTB , 4);
    1386:	a8 e3       	ldi	r26, 0x38	; 56
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e8 e3       	ldi	r30, 0x38	; 56
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	80 61       	ori	r24, 0x10	; 16
    1392:	8c 93       	st	X, r24


}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <MCAL_SPI_Send_String>:

void MCAL_SPI_Send_String (uint8_t* p_TxBuffer)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <MCAL_SPI_Send_String+0x6>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	0a c0       	rjmp	.+20     	; 0x13c2 <MCAL_SPI_Send_String+0x24>
	while(*p_TxBuffer != '\0')
	{
		MCAL_SPI_Send_Data(p_TxBuffer++);
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	29 81       	ldd	r18, Y+1	; 0x01
    13b4:	3a 81       	ldd	r19, Y+2	; 0x02
    13b6:	2f 5f       	subi	r18, 0xFF	; 255
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	3a 83       	std	Y+2, r19	; 0x02
    13bc:	29 83       	std	Y+1, r18	; 0x01
    13be:	0e 94 a4 09 	call	0x1348	; 0x1348 <MCAL_SPI_Send_Data>

}

void MCAL_SPI_Send_String (uint8_t* p_TxBuffer)
{
	while(*p_TxBuffer != '\0')
    13c2:	e9 81       	ldd	r30, Y+1	; 0x01
    13c4:	fa 81       	ldd	r31, Y+2	; 0x02
    13c6:	80 81       	ld	r24, Z
    13c8:	88 23       	and	r24, r24
    13ca:	89 f7       	brne	.-30     	; 0x13ae <MCAL_SPI_Send_String+0x10>
	{
		MCAL_SPI_Send_Data(p_TxBuffer++);
	}
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <MCAL_SPI_Receive_Data>:

void MCAL_SPI_Receive_Data (uint8_t* p_RxBuffer  )
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <MCAL_SPI_Receive_Data+0x6>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01

	/* Start reception, Write data to SPI data register */
	SPDR = (uint8_t)(*p_RxBuffer);
    13e4:	ef e2       	ldi	r30, 0x2F	; 47
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	a9 81       	ldd	r26, Y+1	; 0x01
    13ea:	ba 81       	ldd	r27, Y+2	; 0x02
    13ec:	8c 91       	ld	r24, X
    13ee:	80 83       	st	Z, r24

	/* Wait for reception complete */
	while(!READBIT(SPSR , SPIF));
    13f0:	ee e2       	ldi	r30, 0x2E	; 46
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 1f       	adc	r24, r24
    13f8:	88 27       	eor	r24, r24
    13fa:	88 1f       	adc	r24, r24
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	90 70       	andi	r25, 0x00	; 0
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a9 f3       	breq	.-22     	; 0x13f0 <MCAL_SPI_Receive_Data+0x1a>

	*p_RxBuffer = SPDR;
    1406:	ef e2       	ldi	r30, 0x2F	; 47
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	80 83       	st	Z, r24

}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <MCAL_SPI_send_receive>:



void MCAL_SPI_send_receive (uint8_t* p_RxBuffer  )
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <MCAL_SPI_send_receive+0x6>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01

}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <__vector_12>:

/*******************************************************************************
                                  IRQ Handlers
 *******************************************************************************/
ISR(SPI_STC_vect)
{
    1434:	1f 92       	push	r1
    1436:	0f 92       	push	r0
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	0f 92       	push	r0
    143c:	11 24       	eor	r1, r1
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	G_SPI_Config->P_IRQ_CallBack();
    145e:	e0 91 4e 02 	lds	r30, 0x024E
    1462:	f0 91 4f 02 	lds	r31, 0x024F
    1466:	07 80       	ldd	r0, Z+7	; 0x07
    1468:	f0 85       	ldd	r31, Z+8	; 0x08
    146a:	e0 2d       	mov	r30, r0
    146c:	09 95       	icall
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <MCAL_I2C_Init>:

#include "I2C.h"

// Global variables can be declared here if needed

void MCAL_I2C_Init(I2C_config_t* I2C_CFG) {
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <MCAL_I2C_Init+0xa>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <MCAL_I2C_Init+0xc>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	89 83       	std	Y+1, r24	; 0x01
	// Set prescaler
	TWSR = (TWSR & 0xFC) | (I2C_CFG->I2C_Prescaler);
    14a8:	a1 e2       	ldi	r26, 0x21	; 33
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e1 e2       	ldi	r30, 0x21	; 33
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	98 2f       	mov	r25, r24
    14b4:	9c 7f       	andi	r25, 0xFC	; 252
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	89 2b       	or	r24, r25
    14be:	8c 93       	st	X, r24

	// Set bit rate
	switch (I2C_CFG->I2C_Prescaler) {
    14c0:	e9 81       	ldd	r30, Y+1	; 0x01
    14c2:	fa 81       	ldd	r31, Y+2	; 0x02
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3c 83       	std	Y+4, r19	; 0x04
    14cc:	2b 83       	std	Y+3, r18	; 0x03
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	a9 f1       	breq	.+106    	; 0x1542 <MCAL_I2C_Init+0xae>
    14d8:	eb 81       	ldd	r30, Y+3	; 0x03
    14da:	fc 81       	ldd	r31, Y+4	; 0x04
    14dc:	e2 30       	cpi	r30, 0x02	; 2
    14de:	f1 05       	cpc	r31, r1
    14e0:	34 f4       	brge	.+12     	; 0x14ee <MCAL_I2C_Init+0x5a>
    14e2:	2b 81       	ldd	r18, Y+3	; 0x03
    14e4:	3c 81       	ldd	r19, Y+4	; 0x04
    14e6:	21 15       	cp	r18, r1
    14e8:	31 05       	cpc	r19, r1
    14ea:	71 f0       	breq	.+28     	; 0x1508 <MCAL_I2C_Init+0x74>
    14ec:	8c c0       	rjmp	.+280    	; 0x1606 <MCAL_I2C_Init+0x172>
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	91 05       	cpc	r25, r1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <MCAL_I2C_Init+0x66>
    14f8:	45 c0       	rjmp	.+138    	; 0x1584 <MCAL_I2C_Init+0xf0>
    14fa:	eb 81       	ldd	r30, Y+3	; 0x03
    14fc:	fc 81       	ldd	r31, Y+4	; 0x04
    14fe:	e3 30       	cpi	r30, 0x03	; 3
    1500:	f1 05       	cpc	r31, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <MCAL_I2C_Init+0x72>
    1504:	60 c0       	rjmp	.+192    	; 0x15c6 <MCAL_I2C_Init+0x132>
    1506:	7f c0       	rjmp	.+254    	; 0x1606 <MCAL_I2C_Init+0x172>
	case I2C_Prescaler_1:
		TWBR = GET_I2C_Frequency(I2C_CFG->I2C_SCL_Clock, 1);
    1508:	00 e2       	ldi	r16, 0x20	; 32
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	e9 81       	ldd	r30, Y+1	; 0x01
    150e:	fa 81       	ldd	r31, Y+2	; 0x02
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	92 e1       	ldi	r25, 0x12	; 18
    151e:	aa e7       	ldi	r26, 0x7A	; 122
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 22 1c 	call	0x3844	; 0x3844 <__udivmodsi4>
    152a:	da 01       	movw	r26, r20
    152c:	c9 01       	movw	r24, r18
    152e:	40 97       	sbiw	r24, 0x10	; 16
    1530:	a1 09       	sbc	r26, r1
    1532:	b1 09       	sbc	r27, r1
    1534:	b6 95       	lsr	r27
    1536:	a7 95       	ror	r26
    1538:	97 95       	ror	r25
    153a:	87 95       	ror	r24
    153c:	f8 01       	movw	r30, r16
    153e:	80 83       	st	Z, r24
    1540:	62 c0       	rjmp	.+196    	; 0x1606 <MCAL_I2C_Init+0x172>
		break;
	case I2C_Prescaler_4:
		TWBR = GET_I2C_Frequency(I2C_CFG->I2C_SCL_Clock, 4);
    1542:	00 e2       	ldi	r16, 0x20	; 32
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	92 e1       	ldi	r25, 0x12	; 18
    1558:	aa e7       	ldi	r26, 0x7A	; 122
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 22 1c 	call	0x3844	; 0x3844 <__udivmodsi4>
    1564:	da 01       	movw	r26, r20
    1566:	c9 01       	movw	r24, r18
    1568:	40 97       	sbiw	r24, 0x10	; 16
    156a:	a1 09       	sbc	r26, r1
    156c:	b1 09       	sbc	r27, r1
    156e:	68 94       	set
    1570:	12 f8       	bld	r1, 2
    1572:	b6 95       	lsr	r27
    1574:	a7 95       	ror	r26
    1576:	97 95       	ror	r25
    1578:	87 95       	ror	r24
    157a:	16 94       	lsr	r1
    157c:	d1 f7       	brne	.-12     	; 0x1572 <MCAL_I2C_Init+0xde>
    157e:	f8 01       	movw	r30, r16
    1580:	80 83       	st	Z, r24
    1582:	41 c0       	rjmp	.+130    	; 0x1606 <MCAL_I2C_Init+0x172>
		break;
	case I2C_Prescaler_16:
		TWBR = GET_I2C_Frequency(I2C_CFG->I2C_SCL_Clock, 16);
    1584:	00 e2       	ldi	r16, 0x20	; 32
    1586:	10 e0       	ldi	r17, 0x00	; 0
    1588:	e9 81       	ldd	r30, Y+1	; 0x01
    158a:	fa 81       	ldd	r31, Y+2	; 0x02
    158c:	80 81       	ld	r24, Z
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	92 e1       	ldi	r25, 0x12	; 18
    159a:	aa e7       	ldi	r26, 0x7A	; 122
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 22 1c 	call	0x3844	; 0x3844 <__udivmodsi4>
    15a6:	da 01       	movw	r26, r20
    15a8:	c9 01       	movw	r24, r18
    15aa:	40 97       	sbiw	r24, 0x10	; 16
    15ac:	a1 09       	sbc	r26, r1
    15ae:	b1 09       	sbc	r27, r1
    15b0:	68 94       	set
    15b2:	14 f8       	bld	r1, 4
    15b4:	b6 95       	lsr	r27
    15b6:	a7 95       	ror	r26
    15b8:	97 95       	ror	r25
    15ba:	87 95       	ror	r24
    15bc:	16 94       	lsr	r1
    15be:	d1 f7       	brne	.-12     	; 0x15b4 <MCAL_I2C_Init+0x120>
    15c0:	f8 01       	movw	r30, r16
    15c2:	80 83       	st	Z, r24
    15c4:	20 c0       	rjmp	.+64     	; 0x1606 <MCAL_I2C_Init+0x172>
		break;
	case I2C_Prescaler_64:
		TWBR = GET_I2C_Frequency(I2C_CFG->I2C_SCL_Clock, 64);
    15c6:	00 e2       	ldi	r16, 0x20	; 32
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	92 e1       	ldi	r25, 0x12	; 18
    15dc:	aa e7       	ldi	r26, 0x7A	; 122
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 22 1c 	call	0x3844	; 0x3844 <__udivmodsi4>
    15e8:	da 01       	movw	r26, r20
    15ea:	c9 01       	movw	r24, r18
    15ec:	40 97       	sbiw	r24, 0x10	; 16
    15ee:	a1 09       	sbc	r26, r1
    15f0:	b1 09       	sbc	r27, r1
    15f2:	68 94       	set
    15f4:	16 f8       	bld	r1, 6
    15f6:	b6 95       	lsr	r27
    15f8:	a7 95       	ror	r26
    15fa:	97 95       	ror	r25
    15fc:	87 95       	ror	r24
    15fe:	16 94       	lsr	r1
    1600:	d1 f7       	brne	.-12     	; 0x15f6 <MCAL_I2C_Init+0x162>
    1602:	f8 01       	movw	r30, r16
    1604:	80 83       	st	Z, r24
		break;
	}

	// Enable TWI Interrupt if configured
	if (I2C_CFG->I2C_IRQ == I2C_IRQ_enable) {
    1606:	e9 81       	ldd	r30, Y+1	; 0x01
    1608:	fa 81       	ldd	r31, Y+2	; 0x02
    160a:	86 81       	ldd	r24, Z+6	; 0x06
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	39 f4       	brne	.+14     	; 0x161e <MCAL_I2C_Init+0x18a>
		TWCR |= (1 << TWIE);
    1610:	a6 e5       	ldi	r26, 0x56	; 86
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e6 e5       	ldi	r30, 0x56	; 86
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	8c 93       	st	X, r24
	}

	// Enable I2C
	TWCR |= (1 << TWEN);
    161e:	a6 e5       	ldi	r26, 0x56	; 86
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e6 e5       	ldi	r30, 0x56	; 86
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	84 60       	ori	r24, 0x04	; 4
    162a:	8c 93       	st	X, r24

	// Set ACK if enabled
	if (I2C_CFG->I2C_ACK_Control == I2C_ACK_Control_enable) {
    162c:	e9 81       	ldd	r30, Y+1	; 0x01
    162e:	fa 81       	ldd	r31, Y+2	; 0x02
    1630:	83 81       	ldd	r24, Z+3	; 0x03
    1632:	80 34       	cpi	r24, 0x40	; 64
    1634:	41 f4       	brne	.+16     	; 0x1646 <MCAL_I2C_Init+0x1b2>
		TWCR |= (1 << TWEA);
    1636:	a6 e5       	ldi	r26, 0x56	; 86
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e6 e5       	ldi	r30, 0x56	; 86
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 64       	ori	r24, 0x40	; 64
    1642:	8c 93       	st	X, r24
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <MCAL_I2C_Init+0x1c0>
	} else {
		TWCR &= ~(1 << TWEA);
    1646:	a6 e5       	ldi	r26, 0x56	; 86
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e6 e5       	ldi	r30, 0x56	; 86
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 7b       	andi	r24, 0xBF	; 191
    1652:	8c 93       	st	X, r24
	}

	// Set slave address
	TWAR = I2C_CFG->I2C_Slave_Address;
    1654:	e2 e2       	ldi	r30, 0x22	; 34
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	a9 81       	ldd	r26, Y+1	; 0x01
    165a:	ba 81       	ldd	r27, Y+2	; 0x02
    165c:	15 96       	adiw	r26, 0x05	; 5
    165e:	8c 91       	ld	r24, X
    1660:	15 97       	sbiw	r26, 0x05	; 5
    1662:	80 83       	st	Z, r24
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	08 95       	ret

00001676 <MCAL_I2C_Start_Condition>:

void MCAL_I2C_Start_Condition(void) {
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
    167e:	e6 e5       	ldi	r30, 0x56	; 86
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	84 ea       	ldi	r24, 0xA4	; 164
    1684:	80 83       	st	Z, r24
	while (!(TWCR & (1 << TWINT)));
    1686:	e6 e5       	ldi	r30, 0x56	; 86
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 23       	and	r24, r24
    168e:	dc f7       	brge	.-10     	; 0x1686 <MCAL_I2C_Start_Condition+0x10>
}
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <MCAL_I2C_Stop_Condition>:

void MCAL_I2C_Stop_Condition(void) {
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    169e:	e6 e5       	ldi	r30, 0x56	; 86
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	84 e9       	ldi	r24, 0x94	; 148
    16a4:	80 83       	st	Z, r24
	while (TWCR & (1 << TWSTO));
    16a6:	e6 e5       	ldi	r30, 0x56	; 86
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	80 71       	andi	r24, 0x10	; 16
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	b9 f7       	brne	.-18     	; 0x16a6 <MCAL_I2C_Stop_Condition+0x10>
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <MCAL_I2C_TX>:

void MCAL_I2C_TX(uint8_t* TX_buffer) {
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <MCAL_I2C_TX+0x6>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
	TWDR = *TX_buffer;
    16cc:	a3 e2       	ldi	r26, 0x23	; 35
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e9 81       	ldd	r30, Y+1	; 0x01
    16d2:	fa 81       	ldd	r31, Y+2	; 0x02
    16d4:	80 81       	ld	r24, Z
    16d6:	8c 93       	st	X, r24
	TWCR = (1 << TWEN) | (1 << TWINT);
    16d8:	e6 e5       	ldi	r30, 0x56	; 86
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	84 e8       	ldi	r24, 0x84	; 132
    16de:	80 83       	st	Z, r24
	while (!(TWCR & (1 << TWINT)));
    16e0:	e6 e5       	ldi	r30, 0x56	; 86
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	88 23       	and	r24, r24
    16e8:	dc f7       	brge	.-10     	; 0x16e0 <MCAL_I2C_TX+0x22>
}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <MCAL_I2C_RX_ACK>:

void MCAL_I2C_RX_ACK(uint8_t* RX_buffer) {
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <MCAL_I2C_RX_ACK+0x6>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    1702:	e6 e5       	ldi	r30, 0x56	; 86
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	84 ec       	ldi	r24, 0xC4	; 196
    1708:	80 83       	st	Z, r24
	while (!(TWCR & (1 << TWINT)));
    170a:	e6 e5       	ldi	r30, 0x56	; 86
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	88 23       	and	r24, r24
    1712:	dc f7       	brge	.-10     	; 0x170a <MCAL_I2C_RX_ACK+0x16>
	*RX_buffer = TWDR;
    1714:	e3 e2       	ldi	r30, 0x23	; 35
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	e9 81       	ldd	r30, Y+1	; 0x01
    171c:	fa 81       	ldd	r31, Y+2	; 0x02
    171e:	80 83       	st	Z, r24
}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <MCAL_I2C_RX_NACK>:

void MCAL_I2C_RX_NACK(uint8_t* RX_buffer) {
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <MCAL_I2C_RX_NACK+0x6>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	9a 83       	std	Y+2, r25	; 0x02
    1736:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT);
    1738:	e6 e5       	ldi	r30, 0x56	; 86
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	84 e8       	ldi	r24, 0x84	; 132
    173e:	80 83       	st	Z, r24
	while (!(TWCR & (1 << TWINT)));
    1740:	e6 e5       	ldi	r30, 0x56	; 86
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	88 23       	and	r24, r24
    1748:	dc f7       	brge	.-10     	; 0x1740 <MCAL_I2C_RX_NACK+0x16>
	*RX_buffer = TWDR;
    174a:	e3 e2       	ldi	r30, 0x23	; 35
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	e9 81       	ldd	r30, Y+1	; 0x01
    1752:	fa 81       	ldd	r31, Y+2	; 0x02
    1754:	80 83       	st	Z, r24
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <I2C_Slave_Init>:


#include "i2c_slave.h"

void I2C_Slave_Init(uint8_t slave_address)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	89 83       	std	Y+1, r24	; 0x01
    TWAR = slave_address;
    176c:	e2 e2       	ldi	r30, 0x22	; 34
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	80 83       	st	Z, r24
    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
    1774:	e6 e5       	ldi	r30, 0x56	; 86
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	84 ec       	ldi	r24, 0xC4	; 196
    177a:	80 83       	st	Z, r24
}
    177c:	0f 90       	pop	r0
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <I2C_Slave_Listen>:

void I2C_Slave_Listen(void)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    while (!(TWCR & (1 << TWINT)));
    178c:	e6 e5       	ldi	r30, 0x56	; 86
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 23       	and	r24, r24
    1794:	dc f7       	brge	.-10     	; 0x178c <I2C_Slave_Listen+0x8>
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <I2C_Slave_Receive>:

uint8_t I2C_Slave_Receive(void)
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    I2C_Slave_Listen();
    17a4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <I2C_Slave_Listen>
    return TWDR;
    17a8:	e3 e2       	ldi	r30, 0x23	; 35
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <I2C_Slave_Transmit>:

void I2C_Slave_Transmit(uint8_t data)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	0f 92       	push	r0
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
    17c0:	e3 e2       	ldi	r30, 0x23	; 35
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	80 83       	st	Z, r24
    TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
    17c8:	e6 e5       	ldi	r30, 0x56	; 86
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	84 ec       	ldi	r24, 0xC4	; 196
    17ce:	80 83       	st	Z, r24
    while (!(TWCR & (1 << TWINT)));
    17d0:	e6 e5       	ldi	r30, 0x56	; 86
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	88 23       	and	r24, r24
    17d8:	dc f7       	brge	.-10     	; 0x17d0 <I2C_Slave_Transmit+0x1c>
}
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <DIO_SetPinDirection>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void DIO_SetPinDirection (uint8_t port , uint8_t  pin , uint8_t  direction)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	27 97       	sbiw	r28, 0x07	; 7
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	6a 83       	std	Y+2, r22	; 0x02
    17fa:	4b 83       	std	Y+3, r20	; 0x03
	if (direction == DIO_PIN_OUTPUT)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	09 f0       	breq	.+2      	; 0x1804 <DIO_SetPinDirection+0x22>
    1802:	6f c0       	rjmp	.+222    	; 0x18e2 <DIO_SetPinDirection+0x100>
	{
		switch(port)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3f 83       	std	Y+7, r19	; 0x07
    180c:	2e 83       	std	Y+6, r18	; 0x06
    180e:	8e 81       	ldd	r24, Y+6	; 0x06
    1810:	9f 81       	ldd	r25, Y+7	; 0x07
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	49 f1       	breq	.+82     	; 0x186a <DIO_SetPinDirection+0x88>
    1818:	2e 81       	ldd	r18, Y+6	; 0x06
    181a:	3f 81       	ldd	r19, Y+7	; 0x07
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	2c f4       	brge	.+10     	; 0x182c <DIO_SetPinDirection+0x4a>
    1822:	8e 81       	ldd	r24, Y+6	; 0x06
    1824:	9f 81       	ldd	r25, Y+7	; 0x07
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	61 f0       	breq	.+24     	; 0x1842 <DIO_SetPinDirection+0x60>
    182a:	d2 c0       	rjmp	.+420    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
    182c:	2e 81       	ldd	r18, Y+6	; 0x06
    182e:	3f 81       	ldd	r19, Y+7	; 0x07
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	71 f1       	breq	.+92     	; 0x1892 <DIO_SetPinDirection+0xb0>
    1836:	8e 81       	ldd	r24, Y+6	; 0x06
    1838:	9f 81       	ldd	r25, Y+7	; 0x07
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	e9 f1       	breq	.+122    	; 0x18ba <DIO_SetPinDirection+0xd8>
    1840:	c7 c0       	rjmp	.+398    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
		{
			case DIO_PORTA :  SETBIT(DDRA , pin); break;
    1842:	aa e3       	ldi	r26, 0x3A	; 58
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ea e3       	ldi	r30, 0x3A	; 58
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_SetPinDirection+0x7e>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_SetPinDirection+0x7a>
    1864:	84 2b       	or	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	b3 c0       	rjmp	.+358    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
			case DIO_PORTB :  SETBIT(DDRB , pin); break;
    186a:	a7 e3       	ldi	r26, 0x37	; 55
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e7 e3       	ldi	r30, 0x37	; 55
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_SetPinDirection+0xa6>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_SetPinDirection+0xa2>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	9f c0       	rjmp	.+318    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
			case DIO_PORTC :  SETBIT(DDRC , pin); break;
    1892:	a4 e3       	ldi	r26, 0x34	; 52
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e4 e3       	ldi	r30, 0x34	; 52
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_SetPinDirection+0xce>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_SetPinDirection+0xca>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	8b c0       	rjmp	.+278    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
			case DIO_PORTD :  SETBIT(DDRD , pin); break;
    18ba:	a1 e3       	ldi	r26, 0x31	; 49
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e1 e3       	ldi	r30, 0x31	; 49
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_SetPinDirection+0xf6>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_SetPinDirection+0xf2>
    18dc:	84 2b       	or	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	77 c0       	rjmp	.+238    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
		}
	}else if (direction == DIO_PIN_INPUT)
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 23       	and	r24, r24
    18e6:	09 f0       	breq	.+2      	; 0x18ea <DIO_SetPinDirection+0x108>
    18e8:	73 c0       	rjmp	.+230    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
	{
		switch(port)
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	3d 83       	std	Y+5, r19	; 0x05
    18f2:	2c 83       	std	Y+4, r18	; 0x04
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	91 05       	cpc	r25, r1
    18fc:	59 f1       	breq	.+86     	; 0x1954 <DIO_SetPinDirection+0x172>
    18fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1900:	3d 81       	ldd	r19, Y+5	; 0x05
    1902:	22 30       	cpi	r18, 0x02	; 2
    1904:	31 05       	cpc	r19, r1
    1906:	2c f4       	brge	.+10     	; 0x1912 <DIO_SetPinDirection+0x130>
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	9d 81       	ldd	r25, Y+5	; 0x05
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	69 f0       	breq	.+26     	; 0x192a <DIO_SetPinDirection+0x148>
    1910:	5f c0       	rjmp	.+190    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
    1912:	2c 81       	ldd	r18, Y+4	; 0x04
    1914:	3d 81       	ldd	r19, Y+5	; 0x05
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	89 f1       	breq	.+98     	; 0x197e <DIO_SetPinDirection+0x19c>
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	91 05       	cpc	r25, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <DIO_SetPinDirection+0x146>
    1926:	40 c0       	rjmp	.+128    	; 0x19a8 <DIO_SetPinDirection+0x1c6>
    1928:	53 c0       	rjmp	.+166    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
		{
			case DIO_PORTA :  CLEARBIT(DDRA , pin); break;
    192a:	aa e3       	ldi	r26, 0x3A	; 58
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ea e3       	ldi	r30, 0x3A	; 58
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_SetPinDirection+0x166>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_SetPinDirection+0x162>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	3e c0       	rjmp	.+124    	; 0x19d0 <DIO_SetPinDirection+0x1ee>
			case DIO_PORTB :  CLEARBIT(DDRB , pin); break;
    1954:	a7 e3       	ldi	r26, 0x37	; 55
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e7 e3       	ldi	r30, 0x37	; 55
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_SetPinDirection+0x190>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_SetPinDirection+0x18c>
    1976:	80 95       	com	r24
    1978:	84 23       	and	r24, r20
    197a:	8c 93       	st	X, r24
    197c:	29 c0       	rjmp	.+82     	; 0x19d0 <DIO_SetPinDirection+0x1ee>
			case DIO_PORTC :  CLEARBIT(DDRC , pin); break;
    197e:	a4 e3       	ldi	r26, 0x34	; 52
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e4 e3       	ldi	r30, 0x34	; 52
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_SetPinDirection+0x1ba>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <DIO_SetPinDirection+0x1b6>
    19a0:	80 95       	com	r24
    19a2:	84 23       	and	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <DIO_SetPinDirection+0x1ee>
			case DIO_PORTD :  CLEARBIT(DDRD , pin); break;
    19a8:	a1 e3       	ldi	r26, 0x31	; 49
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e1 e3       	ldi	r30, 0x31	; 49
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_SetPinDirection+0x1e4>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_SetPinDirection+0x1e0>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
		}
	}
}
    19d0:	27 96       	adiw	r28, 0x07	; 7
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <DIO_SetPinValue>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void DIO_SetPinValue(uint8_t port , uint8_t  pin , uint8_t  value)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	27 97       	sbiw	r28, 0x07	; 7
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	6a 83       	std	Y+2, r22	; 0x02
    19fa:	4b 83       	std	Y+3, r20	; 0x03
	if (value == DIO_PIN_HIGH)
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	09 f0       	breq	.+2      	; 0x1a04 <DIO_SetPinValue+0x22>
    1a02:	6f c0       	rjmp	.+222    	; 0x1ae2 <DIO_SetPinValue+0x100>
	{
		switch(port)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3f 83       	std	Y+7, r19	; 0x07
    1a0c:	2e 83       	std	Y+6, r18	; 0x06
    1a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a10:	9f 81       	ldd	r25, Y+7	; 0x07
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	91 05       	cpc	r25, r1
    1a16:	49 f1       	breq	.+82     	; 0x1a6a <DIO_SetPinValue+0x88>
    1a18:	2e 81       	ldd	r18, Y+6	; 0x06
    1a1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <DIO_SetPinValue+0x4a>
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	9f 81       	ldd	r25, Y+7	; 0x07
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	61 f0       	breq	.+24     	; 0x1a42 <DIO_SetPinValue+0x60>
    1a2a:	d2 c0       	rjmp	.+420    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
    1a2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	71 f1       	breq	.+92     	; 0x1a92 <DIO_SetPinValue+0xb0>
    1a36:	8e 81       	ldd	r24, Y+6	; 0x06
    1a38:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	e9 f1       	breq	.+122    	; 0x1aba <DIO_SetPinValue+0xd8>
    1a40:	c7 c0       	rjmp	.+398    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
		{
			case DIO_PORTA :  SETBIT(PORTA , pin); break;
    1a42:	ab e3       	ldi	r26, 0x3B	; 59
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	eb e3       	ldi	r30, 0x3B	; 59
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_SetPinValue+0x7e>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_SetPinValue+0x7a>
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	b3 c0       	rjmp	.+358    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
			case DIO_PORTB :  SETBIT(PORTB , pin); break;
    1a6a:	a8 e3       	ldi	r26, 0x38	; 56
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e8 e3       	ldi	r30, 0x38	; 56
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_SetPinValue+0xa6>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_SetPinValue+0xa2>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	9f c0       	rjmp	.+318    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
			case DIO_PORTC :  SETBIT(PORTC , pin); break;
    1a92:	a5 e3       	ldi	r26, 0x35	; 53
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e5 e3       	ldi	r30, 0x35	; 53
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_SetPinValue+0xce>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_SetPinValue+0xca>
    1ab4:	84 2b       	or	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	8b c0       	rjmp	.+278    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
			case DIO_PORTD :  SETBIT(PORTD , pin); break;
    1aba:	a2 e3       	ldi	r26, 0x32	; 50
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e2 e3       	ldi	r30, 0x32	; 50
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	48 2f       	mov	r20, r24
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	02 2e       	mov	r0, r18
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_SetPinValue+0xf6>
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	0a 94       	dec	r0
    1ada:	e2 f7       	brpl	.-8      	; 0x1ad4 <DIO_SetPinValue+0xf2>
    1adc:	84 2b       	or	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	77 c0       	rjmp	.+238    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
		}
	}else if (value == DIO_PIN_LOW)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <DIO_SetPinValue+0x108>
    1ae8:	73 c0       	rjmp	.+230    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
	{
		switch(port)
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3d 83       	std	Y+5, r19	; 0x05
    1af2:	2c 83       	std	Y+4, r18	; 0x04
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	91 05       	cpc	r25, r1
    1afc:	59 f1       	breq	.+86     	; 0x1b54 <DIO_SetPinValue+0x172>
    1afe:	2c 81       	ldd	r18, Y+4	; 0x04
    1b00:	3d 81       	ldd	r19, Y+5	; 0x05
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <DIO_SetPinValue+0x130>
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f0       	breq	.+26     	; 0x1b2a <DIO_SetPinValue+0x148>
    1b10:	5f c0       	rjmp	.+190    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
    1b12:	2c 81       	ldd	r18, Y+4	; 0x04
    1b14:	3d 81       	ldd	r19, Y+5	; 0x05
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	89 f1       	breq	.+98     	; 0x1b7e <DIO_SetPinValue+0x19c>
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <DIO_SetPinValue+0x146>
    1b26:	40 c0       	rjmp	.+128    	; 0x1ba8 <DIO_SetPinValue+0x1c6>
    1b28:	53 c0       	rjmp	.+166    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
		{
			case DIO_PORTA :  CLEARBIT(PORTA , pin); break;
    1b2a:	ab e3       	ldi	r26, 0x3B	; 59
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	eb e3       	ldi	r30, 0x3B	; 59
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_SetPinValue+0x166>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_SetPinValue+0x162>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	3e c0       	rjmp	.+124    	; 0x1bd0 <DIO_SetPinValue+0x1ee>
			case DIO_PORTB :  CLEARBIT(PORTB , pin); break;
    1b54:	a8 e3       	ldi	r26, 0x38	; 56
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_SetPinValue+0x190>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_SetPinValue+0x18c>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	29 c0       	rjmp	.+82     	; 0x1bd0 <DIO_SetPinValue+0x1ee>
			case DIO_PORTC :  CLEARBIT(PORTC , pin); break;
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_SetPinValue+0x1ba>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_SetPinValue+0x1b6>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <DIO_SetPinValue+0x1ee>
			case DIO_PORTD :  CLEARBIT(PORTD , pin); break;
    1ba8:	a2 e3       	ldi	r26, 0x32	; 50
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e2 e3       	ldi	r30, 0x32	; 50
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_SetPinValue+0x1e4>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_SetPinValue+0x1e0>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
		}
	}	
}
    1bd0:	27 96       	adiw	r28, 0x07	; 7
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <DIO_GetPinValue>:
 * @retval			- value of PINx 
 * @Note			- none
 * ===================================
 * */
uint8_t DIO_GetPinValue(uint8_t port , uint8_t  pin )
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <DIO_GetPinValue+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <DIO_GetPinValue+0x8>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t inVal =0;
    1bf4:	19 82       	std	Y+1, r1	; 0x01
	
	switch(port)
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	3d 83       	std	Y+5, r19	; 0x05
    1bfe:	2c 83       	std	Y+4, r18	; 0x04
    1c00:	4c 81       	ldd	r20, Y+4	; 0x04
    1c02:	5d 81       	ldd	r21, Y+5	; 0x05
    1c04:	41 30       	cpi	r20, 0x01	; 1
    1c06:	51 05       	cpc	r21, r1
    1c08:	b1 f1       	breq	.+108    	; 0x1c76 <DIO_GetPinValue+0x94>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	82 30       	cpi	r24, 0x02	; 2
    1c10:	91 05       	cpc	r25, r1
    1c12:	34 f4       	brge	.+12     	; 0x1c20 <DIO_GetPinValue+0x3e>
    1c14:	2c 81       	ldd	r18, Y+4	; 0x04
    1c16:	3d 81       	ldd	r19, Y+5	; 0x05
    1c18:	21 15       	cp	r18, r1
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	71 f0       	breq	.+28     	; 0x1c3a <DIO_GetPinValue+0x58>
    1c1e:	84 c0       	rjmp	.+264    	; 0x1d28 <DIO_GetPinValue+0x146>
    1c20:	4c 81       	ldd	r20, Y+4	; 0x04
    1c22:	5d 81       	ldd	r21, Y+5	; 0x05
    1c24:	42 30       	cpi	r20, 0x02	; 2
    1c26:	51 05       	cpc	r21, r1
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <DIO_GetPinValue+0x4a>
    1c2a:	43 c0       	rjmp	.+134    	; 0x1cb2 <DIO_GetPinValue+0xd0>
    1c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c30:	83 30       	cpi	r24, 0x03	; 3
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <DIO_GetPinValue+0x56>
    1c36:	5b c0       	rjmp	.+182    	; 0x1cee <DIO_GetPinValue+0x10c>
    1c38:	77 c0       	rjmp	.+238    	; 0x1d28 <DIO_GetPinValue+0x146>
	{
		case DIO_PORTA :  inVal = READBIT(PINA , pin); break;
    1c3a:	e9 e3       	ldi	r30, 0x39	; 57
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_GetPinValue+0x72>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	2a 95       	dec	r18
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_GetPinValue+0x6e>
    1c58:	9a 01       	movw	r18, r20
    1c5a:	28 23       	and	r18, r24
    1c5c:	39 23       	and	r19, r25
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a9 01       	movw	r20, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_GetPinValue+0x8a>
    1c68:	55 95       	asr	r21
    1c6a:	47 95       	ror	r20
    1c6c:	8a 95       	dec	r24
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <DIO_GetPinValue+0x86>
    1c70:	ca 01       	movw	r24, r20
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	59 c0       	rjmp	.+178    	; 0x1d28 <DIO_GetPinValue+0x146>
		case DIO_PORTB :  inVal = READBIT(PINB , pin); break;
    1c76:	e6 e3       	ldi	r30, 0x36	; 54
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	48 2f       	mov	r20, r24
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <DIO_GetPinValue+0xae>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	2a 95       	dec	r18
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <DIO_GetPinValue+0xaa>
    1c94:	9a 01       	movw	r18, r20
    1c96:	28 23       	and	r18, r24
    1c98:	39 23       	and	r19, r25
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	88 2f       	mov	r24, r24
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a9 01       	movw	r20, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_GetPinValue+0xc6>
    1ca4:	55 95       	asr	r21
    1ca6:	47 95       	ror	r20
    1ca8:	8a 95       	dec	r24
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_GetPinValue+0xc2>
    1cac:	ca 01       	movw	r24, r20
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	3b c0       	rjmp	.+118    	; 0x1d28 <DIO_GetPinValue+0x146>
		case DIO_PORTC :  inVal = READBIT(PINC , pin); break;
    1cb2:	e3 e3       	ldi	r30, 0x33	; 51
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_GetPinValue+0xea>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	2a 95       	dec	r18
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <DIO_GetPinValue+0xe6>
    1cd0:	9a 01       	movw	r18, r20
    1cd2:	28 23       	and	r18, r24
    1cd4:	39 23       	and	r19, r25
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	88 2f       	mov	r24, r24
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a9 01       	movw	r20, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <DIO_GetPinValue+0x102>
    1ce0:	55 95       	asr	r21
    1ce2:	47 95       	ror	r20
    1ce4:	8a 95       	dec	r24
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <DIO_GetPinValue+0xfe>
    1ce8:	ca 01       	movw	r24, r20
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	1d c0       	rjmp	.+58     	; 0x1d28 <DIO_GetPinValue+0x146>
		case DIO_PORTD :  inVal = READBIT(PIND , pin); break;
    1cee:	e0 e3       	ldi	r30, 0x30	; 48
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <DIO_GetPinValue+0x126>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	2a 95       	dec	r18
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <DIO_GetPinValue+0x122>
    1d0c:	9a 01       	movw	r18, r20
    1d0e:	28 23       	and	r18, r24
    1d10:	39 23       	and	r19, r25
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a9 01       	movw	r20, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <DIO_GetPinValue+0x13e>
    1d1c:	55 95       	asr	r21
    1d1e:	47 95       	ror	r20
    1d20:	8a 95       	dec	r24
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <DIO_GetPinValue+0x13a>
    1d24:	ca 01       	movw	r24, r20
    1d26:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return inVal;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <DIO_TogglePin>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void DIO_TogglePin(uint8_t port , uint8_t  pin )
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <DIO_TogglePin+0x6>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <DIO_TogglePin+0x8>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	3c 83       	std	Y+4, r19	; 0x04
    1d52:	2b 83       	std	Y+3, r18	; 0x03
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	49 f1       	breq	.+82     	; 0x1db0 <DIO_TogglePin+0x76>
    1d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d60:	3c 81       	ldd	r19, Y+4	; 0x04
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	31 05       	cpc	r19, r1
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <DIO_TogglePin+0x38>
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	61 f0       	breq	.+24     	; 0x1d88 <DIO_TogglePin+0x4e>
    1d70:	5a c0       	rjmp	.+180    	; 0x1e26 <DIO_TogglePin+0xec>
    1d72:	2b 81       	ldd	r18, Y+3	; 0x03
    1d74:	3c 81       	ldd	r19, Y+4	; 0x04
    1d76:	22 30       	cpi	r18, 0x02	; 2
    1d78:	31 05       	cpc	r19, r1
    1d7a:	71 f1       	breq	.+92     	; 0x1dd8 <DIO_TogglePin+0x9e>
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	83 30       	cpi	r24, 0x03	; 3
    1d82:	91 05       	cpc	r25, r1
    1d84:	e9 f1       	breq	.+122    	; 0x1e00 <DIO_TogglePin+0xc6>
    1d86:	4f c0       	rjmp	.+158    	; 0x1e26 <DIO_TogglePin+0xec>
	{
		case DIO_PORTA :  TOGGLEBIT(PORTA , pin); break;
    1d88:	ab e3       	ldi	r26, 0x3B	; 59
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	eb e3       	ldi	r30, 0x3B	; 59
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	48 2f       	mov	r20, r24
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	02 2e       	mov	r0, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <DIO_TogglePin+0x6c>
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	0a 94       	dec	r0
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <DIO_TogglePin+0x68>
    1daa:	84 27       	eor	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	3b c0       	rjmp	.+118    	; 0x1e26 <DIO_TogglePin+0xec>
		case DIO_PORTB :  TOGGLEBIT(PORTB , pin); break;
    1db0:	a8 e3       	ldi	r26, 0x38	; 56
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e8 e3       	ldi	r30, 0x38	; 56
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_TogglePin+0x94>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <DIO_TogglePin+0x90>
    1dd2:	84 27       	eor	r24, r20
    1dd4:	8c 93       	st	X, r24
    1dd6:	27 c0       	rjmp	.+78     	; 0x1e26 <DIO_TogglePin+0xec>
		case DIO_PORTC :  TOGGLEBIT(PORTC , pin); break;
    1dd8:	a5 e3       	ldi	r26, 0x35	; 53
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e5 e3       	ldi	r30, 0x35	; 53
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <DIO_TogglePin+0xbc>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <DIO_TogglePin+0xb8>
    1dfa:	84 27       	eor	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	13 c0       	rjmp	.+38     	; 0x1e26 <DIO_TogglePin+0xec>
		case DIO_PORTD :  TOGGLEBIT(PORTD , pin); break;
    1e00:	a2 e3       	ldi	r26, 0x32	; 50
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e2 e3       	ldi	r30, 0x32	; 50
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_TogglePin+0xe4>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_TogglePin+0xe0>
    1e22:	84 27       	eor	r24, r20
    1e24:	8c 93       	st	X, r24
	}	
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <DIO_SetPortDirection>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void	DIO_SetPortDirection (uint8_t port ,  uint8_t  direction)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <DIO_SetPortDirection+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <DIO_SetPortDirection+0x8>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <DIO_SetPortDirection+0xa>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	6a 83       	std	Y+2, r22	; 0x02
	if (direction == DIO_PIN_OUTPUT)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	99 f5       	brne	.+102    	; 0x1eb2 <DIO_SetPortDirection+0x7e>
	{
		switch(port)
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	3e 83       	std	Y+6, r19	; 0x06
    1e54:	2d 83       	std	Y+5, r18	; 0x05
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	d1 f0       	breq	.+52     	; 0x1e94 <DIO_SetPortDirection+0x60>
    1e60:	2d 81       	ldd	r18, Y+5	; 0x05
    1e62:	3e 81       	ldd	r19, Y+6	; 0x06
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	2c f4       	brge	.+10     	; 0x1e74 <DIO_SetPortDirection+0x40>
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	61 f0       	breq	.+24     	; 0x1e8a <DIO_SetPortDirection+0x56>
    1e72:	50 c0       	rjmp	.+160    	; 0x1f14 <DIO_SetPortDirection+0xe0>
    1e74:	2d 81       	ldd	r18, Y+5	; 0x05
    1e76:	3e 81       	ldd	r19, Y+6	; 0x06
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	81 f0       	breq	.+32     	; 0x1e9e <DIO_SetPortDirection+0x6a>
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	83 30       	cpi	r24, 0x03	; 3
    1e84:	91 05       	cpc	r25, r1
    1e86:	81 f0       	breq	.+32     	; 0x1ea8 <DIO_SetPortDirection+0x74>
    1e88:	45 c0       	rjmp	.+138    	; 0x1f14 <DIO_SetPortDirection+0xe0>
		{
			case DIO_PORTA :  DDRA = 0xFF ; break;
    1e8a:	ea e3       	ldi	r30, 0x3A	; 58
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	8f ef       	ldi	r24, 0xFF	; 255
    1e90:	80 83       	st	Z, r24
    1e92:	40 c0       	rjmp	.+128    	; 0x1f14 <DIO_SetPortDirection+0xe0>
			case DIO_PORTB :  DDRB = 0xFF ; break;
    1e94:	e7 e3       	ldi	r30, 0x37	; 55
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	80 83       	st	Z, r24
    1e9c:	3b c0       	rjmp	.+118    	; 0x1f14 <DIO_SetPortDirection+0xe0>
			case DIO_PORTC :  DDRC = 0xFF ; break;
    1e9e:	e4 e3       	ldi	r30, 0x34	; 52
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	8f ef       	ldi	r24, 0xFF	; 255
    1ea4:	80 83       	st	Z, r24
    1ea6:	36 c0       	rjmp	.+108    	; 0x1f14 <DIO_SetPortDirection+0xe0>
			case DIO_PORTD :  DDRD = 0xFF ; break;
    1ea8:	e1 e3       	ldi	r30, 0x31	; 49
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
    1eae:	80 83       	st	Z, r24
    1eb0:	31 c0       	rjmp	.+98     	; 0x1f14 <DIO_SetPortDirection+0xe0>
		}
	}else if (direction == DIO_PIN_INPUT)
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	88 23       	and	r24, r24
    1eb6:	71 f5       	brne	.+92     	; 0x1f14 <DIO_SetPortDirection+0xe0>
	{
		switch(port)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	3c 83       	std	Y+4, r19	; 0x04
    1ec0:	2b 83       	std	Y+3, r18	; 0x03
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	91 05       	cpc	r25, r1
    1eca:	c9 f0       	breq	.+50     	; 0x1efe <DIO_SetPortDirection+0xca>
    1ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ece:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed0:	22 30       	cpi	r18, 0x02	; 2
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <DIO_SetPortDirection+0xac>
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	61 f0       	breq	.+24     	; 0x1ef6 <DIO_SetPortDirection+0xc2>
    1ede:	1a c0       	rjmp	.+52     	; 0x1f14 <DIO_SetPortDirection+0xe0>
    1ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee4:	22 30       	cpi	r18, 0x02	; 2
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	71 f0       	breq	.+28     	; 0x1f06 <DIO_SetPortDirection+0xd2>
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	83 30       	cpi	r24, 0x03	; 3
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	69 f0       	breq	.+26     	; 0x1f0e <DIO_SetPortDirection+0xda>
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <DIO_SetPortDirection+0xe0>
		{
			case DIO_PORTA :  DDRA = 0x0 ; break;
    1ef6:	ea e3       	ldi	r30, 0x3A	; 58
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	10 82       	st	Z, r1
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <DIO_SetPortDirection+0xe0>
			case DIO_PORTB :  DDRB = 0x0 ; break;
    1efe:	e7 e3       	ldi	r30, 0x37	; 55
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	10 82       	st	Z, r1
    1f04:	07 c0       	rjmp	.+14     	; 0x1f14 <DIO_SetPortDirection+0xe0>
			case DIO_PORTC :  DDRC = 0x0 ; break;
    1f06:	e4 e3       	ldi	r30, 0x34	; 52
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	10 82       	st	Z, r1
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <DIO_SetPortDirection+0xe0>
			case DIO_PORTD :  DDRD = 0x0 ; break;
    1f0e:	e1 e3       	ldi	r30, 0x31	; 49
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	10 82       	st	Z, r1
		}
	}
}
    1f14:	26 96       	adiw	r28, 0x06	; 6
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <DIO_SetPortValue>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void	DIO_SetPortValue     (uint8_t port ,  uint8_t  value)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <DIO_SetPortValue+0x6>
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <DIO_SetPortValue+0x8>
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <DIO_SetPortValue+0xa>
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	6a 83       	std	Y+2, r22	; 0x02
	if (value == DIO_PIN_HIGH)
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	99 f5       	brne	.+102    	; 0x1fa4 <DIO_SetPortValue+0x7e>
	{
		switch(port)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	3e 83       	std	Y+6, r19	; 0x06
    1f46:	2d 83       	std	Y+5, r18	; 0x05
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	81 30       	cpi	r24, 0x01	; 1
    1f4e:	91 05       	cpc	r25, r1
    1f50:	d1 f0       	breq	.+52     	; 0x1f86 <DIO_SetPortValue+0x60>
    1f52:	2d 81       	ldd	r18, Y+5	; 0x05
    1f54:	3e 81       	ldd	r19, Y+6	; 0x06
    1f56:	22 30       	cpi	r18, 0x02	; 2
    1f58:	31 05       	cpc	r19, r1
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <DIO_SetPortValue+0x40>
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <DIO_SetPortValue+0x56>
    1f64:	50 c0       	rjmp	.+160    	; 0x2006 <DIO_SetPortValue+0xe0>
    1f66:	2d 81       	ldd	r18, Y+5	; 0x05
    1f68:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6a:	22 30       	cpi	r18, 0x02	; 2
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	81 f0       	breq	.+32     	; 0x1f90 <DIO_SetPortValue+0x6a>
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	81 f0       	breq	.+32     	; 0x1f9a <DIO_SetPortValue+0x74>
    1f7a:	45 c0       	rjmp	.+138    	; 0x2006 <DIO_SetPortValue+0xe0>
		{
			case DIO_PORTA :  PORTA = 0xFF ; break;
    1f7c:	eb e3       	ldi	r30, 0x3B	; 59
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	80 83       	st	Z, r24
    1f84:	40 c0       	rjmp	.+128    	; 0x2006 <DIO_SetPortValue+0xe0>
			case DIO_PORTB :  PORTB = 0xFF ; break;
    1f86:	e8 e3       	ldi	r30, 0x38	; 56
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	80 83       	st	Z, r24
    1f8e:	3b c0       	rjmp	.+118    	; 0x2006 <DIO_SetPortValue+0xe0>
			case DIO_PORTC :  PORTC = 0xFF ; break;
    1f90:	e5 e3       	ldi	r30, 0x35	; 53
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	80 83       	st	Z, r24
    1f98:	36 c0       	rjmp	.+108    	; 0x2006 <DIO_SetPortValue+0xe0>
			case DIO_PORTD :  PORTD = 0xFF ; break;
    1f9a:	e2 e3       	ldi	r30, 0x32	; 50
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	80 83       	st	Z, r24
    1fa2:	31 c0       	rjmp	.+98     	; 0x2006 <DIO_SetPortValue+0xe0>
		}
	}else if (value == DIO_PIN_LOW)
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	88 23       	and	r24, r24
    1fa8:	71 f5       	brne	.+92     	; 0x2006 <DIO_SetPortValue+0xe0>
	{
		switch(port)
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	3c 83       	std	Y+4, r19	; 0x04
    1fb2:	2b 83       	std	Y+3, r18	; 0x03
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	c9 f0       	breq	.+50     	; 0x1ff0 <DIO_SetPortValue+0xca>
    1fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc2:	22 30       	cpi	r18, 0x02	; 2
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <DIO_SetPortValue+0xac>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <DIO_SetPortValue+0xc2>
    1fd0:	1a c0       	rjmp	.+52     	; 0x2006 <DIO_SetPortValue+0xe0>
    1fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	71 f0       	breq	.+28     	; 0x1ff8 <DIO_SetPortValue+0xd2>
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	83 30       	cpi	r24, 0x03	; 3
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	69 f0       	breq	.+26     	; 0x2000 <DIO_SetPortValue+0xda>
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <DIO_SetPortValue+0xe0>
		{
			case DIO_PORTA :  PORTA = 0x0 ; break;
    1fe8:	eb e3       	ldi	r30, 0x3B	; 59
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	10 82       	st	Z, r1
    1fee:	0b c0       	rjmp	.+22     	; 0x2006 <DIO_SetPortValue+0xe0>
			case DIO_PORTB :  PORTB = 0x0 ; break;
    1ff0:	e8 e3       	ldi	r30, 0x38	; 56
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	10 82       	st	Z, r1
    1ff6:	07 c0       	rjmp	.+14     	; 0x2006 <DIO_SetPortValue+0xe0>
			case DIO_PORTC :  PORTC = 0x0 ; break;
    1ff8:	e5 e3       	ldi	r30, 0x35	; 53
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	10 82       	st	Z, r1
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <DIO_SetPortValue+0xe0>
			case DIO_PORTD :  PORTD = 0x0 ; break;
    2000:	e2 e3       	ldi	r30, 0x32	; 50
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	10 82       	st	Z, r1
		}
	}
}
    2006:	26 96       	adiw	r28, 0x06	; 6
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <DIO_GetPortValue>:
 * @retval			- value of port
 * @Note			- none
 * ===================================
 * */
uint8_t DIO_GetPortValue(uint8_t port )
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	00 d0       	rcall	.+0      	; 0x201e <DIO_GetPortValue+0x6>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <DIO_GetPortValue+0x8>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t inVal =0;
    2026:	19 82       	std	Y+1, r1	; 0x01
	
	switch(port)
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	3c 83       	std	Y+4, r19	; 0x04
    2030:	2b 83       	std	Y+3, r18	; 0x03
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	91 05       	cpc	r25, r1
    203a:	d1 f0       	breq	.+52     	; 0x2070 <DIO_GetPortValue+0x58>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	2c f4       	brge	.+10     	; 0x2050 <DIO_GetPortValue+0x38>
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	61 f0       	breq	.+24     	; 0x2066 <DIO_GetPortValue+0x4e>
    204e:	1e c0       	rjmp	.+60     	; 0x208c <DIO_GetPortValue+0x74>
    2050:	2b 81       	ldd	r18, Y+3	; 0x03
    2052:	3c 81       	ldd	r19, Y+4	; 0x04
    2054:	22 30       	cpi	r18, 0x02	; 2
    2056:	31 05       	cpc	r19, r1
    2058:	81 f0       	breq	.+32     	; 0x207a <DIO_GetPortValue+0x62>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	91 05       	cpc	r25, r1
    2062:	81 f0       	breq	.+32     	; 0x2084 <DIO_GetPortValue+0x6c>
    2064:	13 c0       	rjmp	.+38     	; 0x208c <DIO_GetPortValue+0x74>
	{
		case DIO_PORTA :  inVal = PINA ; break;
    2066:	e9 e3       	ldi	r30, 0x39	; 57
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	0e c0       	rjmp	.+28     	; 0x208c <DIO_GetPortValue+0x74>
		case DIO_PORTB :  inVal = PINB ; break;
    2070:	e6 e3       	ldi	r30, 0x36	; 54
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	09 c0       	rjmp	.+18     	; 0x208c <DIO_GetPortValue+0x74>
		case DIO_PORTC :  inVal = PINC ; break;
    207a:	e3 e3       	ldi	r30, 0x33	; 51
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	04 c0       	rjmp	.+8      	; 0x208c <DIO_GetPortValue+0x74>
		case DIO_PORTD :  inVal = PIND ; break;
    2084:	e0 e3       	ldi	r30, 0x30	; 48
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return inVal;
    208c:	89 81       	ldd	r24, Y+1	; 0x01
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <DIO_TogglePort>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void DIO_TogglePort(uint8_t port )
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <DIO_TogglePort+0x6>
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	3b 83       	std	Y+3, r19	; 0x03
    20b2:	2a 83       	std	Y+2, r18	; 0x02
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	81 30       	cpi	r24, 0x01	; 1
    20ba:	91 05       	cpc	r25, r1
    20bc:	01 f1       	breq	.+64     	; 0x20fe <DIO_TogglePort+0x62>
    20be:	2a 81       	ldd	r18, Y+2	; 0x02
    20c0:	3b 81       	ldd	r19, Y+3	; 0x03
    20c2:	22 30       	cpi	r18, 0x02	; 2
    20c4:	31 05       	cpc	r19, r1
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <DIO_TogglePort+0x36>
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	61 f0       	breq	.+24     	; 0x20e8 <DIO_TogglePort+0x4c>
    20d0:	36 c0       	rjmp	.+108    	; 0x213e <DIO_TogglePort+0xa2>
    20d2:	2a 81       	ldd	r18, Y+2	; 0x02
    20d4:	3b 81       	ldd	r19, Y+3	; 0x03
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	e1 f0       	breq	.+56     	; 0x2114 <DIO_TogglePort+0x78>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	83 30       	cpi	r24, 0x03	; 3
    20e2:	91 05       	cpc	r25, r1
    20e4:	11 f1       	breq	.+68     	; 0x212a <DIO_TogglePort+0x8e>
    20e6:	2b c0       	rjmp	.+86     	; 0x213e <DIO_TogglePort+0xa2>
	{
		case DIO_PORTA :  PORTA ^= PORTA ; break;
    20e8:	ab e3       	ldi	r26, 0x3B	; 59
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	eb e3       	ldi	r30, 0x3B	; 59
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	90 81       	ld	r25, Z
    20f2:	eb e3       	ldi	r30, 0x3B	; 59
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	89 27       	eor	r24, r25
    20fa:	8c 93       	st	X, r24
    20fc:	20 c0       	rjmp	.+64     	; 0x213e <DIO_TogglePort+0xa2>
		case DIO_PORTB :  PORTB ^= PORTB; break;
    20fe:	a8 e3       	ldi	r26, 0x38	; 56
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e8 e3       	ldi	r30, 0x38	; 56
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	90 81       	ld	r25, Z
    2108:	e8 e3       	ldi	r30, 0x38	; 56
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	89 27       	eor	r24, r25
    2110:	8c 93       	st	X, r24
    2112:	15 c0       	rjmp	.+42     	; 0x213e <DIO_TogglePort+0xa2>
		case DIO_PORTC :  PORTC ^= PORTC; break;
    2114:	a5 e3       	ldi	r26, 0x35	; 53
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e5 e3       	ldi	r30, 0x35	; 53
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	90 81       	ld	r25, Z
    211e:	e5 e3       	ldi	r30, 0x35	; 53
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	89 27       	eor	r24, r25
    2126:	8c 93       	st	X, r24
    2128:	0a c0       	rjmp	.+20     	; 0x213e <DIO_TogglePort+0xa2>
		case DIO_PORTD :  PORTD ^= PORTD; break;
    212a:	a2 e3       	ldi	r26, 0x32	; 50
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e2 e3       	ldi	r30, 0x32	; 50
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	90 81       	ld	r25, Z
    2134:	e2 e3       	ldi	r30, 0x32	; 50
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	89 27       	eor	r24, r25
    213c:	8c 93       	st	X, r24
	}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <MCAL_ADC_Init>:

/* ============================================================================ */
/* ==================== APIs Supported by "MCAL ADC DRIVER" =================== */
/* ============================================================================ */
void MCAL_ADC_Init(ADC_Config_t* ADC_cfg)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	27 97       	sbiw	r28, 0x07	; 7
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	9a 83       	std	Y+2, r25	; 0x02
    2160:	89 83       	std	Y+1, r24	; 0x01
	G_ADC_ConFig = *ADC_cfg;
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	25 e5       	ldi	r18, 0x55	; 85
    2168:	32 e0       	ldi	r19, 0x02	; 2
    216a:	3c 83       	std	Y+4, r19	; 0x04
    216c:	2b 83       	std	Y+3, r18	; 0x03
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	37 e0       	ldi	r19, 0x07	; 7
    2174:	3f 83       	std	Y+7, r19	; 0x07
    2176:	ed 81       	ldd	r30, Y+5	; 0x05
    2178:	fe 81       	ldd	r31, Y+6	; 0x06
    217a:	00 80       	ld	r0, Z
    217c:	2d 81       	ldd	r18, Y+5	; 0x05
    217e:	3e 81       	ldd	r19, Y+6	; 0x06
    2180:	2f 5f       	subi	r18, 0xFF	; 255
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	3e 83       	std	Y+6, r19	; 0x06
    2186:	2d 83       	std	Y+5, r18	; 0x05
    2188:	eb 81       	ldd	r30, Y+3	; 0x03
    218a:	fc 81       	ldd	r31, Y+4	; 0x04
    218c:	00 82       	st	Z, r0
    218e:	2b 81       	ldd	r18, Y+3	; 0x03
    2190:	3c 81       	ldd	r19, Y+4	; 0x04
    2192:	2f 5f       	subi	r18, 0xFF	; 255
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	3c 83       	std	Y+4, r19	; 0x04
    2198:	2b 83       	std	Y+3, r18	; 0x03
    219a:	3f 81       	ldd	r19, Y+7	; 0x07
    219c:	31 50       	subi	r19, 0x01	; 1
    219e:	3f 83       	std	Y+7, r19	; 0x07
    21a0:	8f 81       	ldd	r24, Y+7	; 0x07
    21a2:	88 23       	and	r24, r24
    21a4:	41 f7       	brne	.-48     	; 0x2176 <MCAL_ADC_Init+0x2c>
	
	// 1. select ADC mode
	//ADCSRA |= ADC_cfg->ADC_Mode;
	
	// 2. select ADC Voltage Reference
	ADMUX |= ADC_cfg->ADC_Voltage_Reference;
    21a6:	a7 e2       	ldi	r26, 0x27	; 39
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e7 e2       	ldi	r30, 0x27	; 39
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	90 81       	ld	r25, Z
    21b0:	e9 81       	ldd	r30, Y+1	; 0x01
    21b2:	fa 81       	ldd	r31, Y+2	; 0x02
    21b4:	81 81       	ldd	r24, Z+1	; 0x01
    21b6:	89 2b       	or	r24, r25
    21b8:	8c 93       	st	X, r24
	
	
	// 3. select ADC Result Presentation
	ADMUX |= ADC_cfg->ADC_Result_Presentation;
    21ba:	a7 e2       	ldi	r26, 0x27	; 39
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e7 e2       	ldi	r30, 0x27	; 39
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	90 81       	ld	r25, Z
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	83 81       	ldd	r24, Z+3	; 0x03
    21ca:	89 2b       	or	r24, r25
    21cc:	8c 93       	st	X, r24
		
	// 4. select ADC Prescaler
	ADMUX |= ADC_cfg->ADC_Prescaler;
    21ce:	a7 e2       	ldi	r26, 0x27	; 39
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e7 e2       	ldi	r30, 0x27	; 39
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	90 81       	ld	r25, Z
    21d8:	e9 81       	ldd	r30, Y+1	; 0x01
    21da:	fa 81       	ldd	r31, Y+2	; 0x02
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	89 2b       	or	r24, r25
    21e0:	8c 93       	st	X, r24
	

	
	// 5. configure Enable | Disable IRQ
	ADCSRA |= ADC_cfg->IRQ_Enable;
    21e2:	a6 e2       	ldi	r26, 0x26	; 38
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e6 e2       	ldi	r30, 0x26	; 38
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	90 81       	ld	r25, Z
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	84 81       	ldd	r24, Z+4	; 0x04
    21f2:	89 2b       	or	r24, r25
    21f4:	8c 93       	st	X, r24
	
	if (ADC_cfg->IRQ_Enable ==	IRQ_ADIE_Enable)
    21f6:	e9 81       	ldd	r30, Y+1	; 0x01
    21f8:	fa 81       	ldd	r31, Y+2	; 0x02
    21fa:	84 81       	ldd	r24, Z+4	; 0x04
    21fc:	88 30       	cpi	r24, 0x08	; 8
    21fe:	09 f4       	brne	.+2      	; 0x2202 <MCAL_ADC_Init+0xb8>
	{
		sei();
    2200:	78 94       	sei
	}
	
	
	// 6. enable ADC 
	SETBIT(ADCSRA , ADEN);
    2202:	a6 e2       	ldi	r26, 0x26	; 38
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e6 e2       	ldi	r30, 0x26	; 38
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	80 68       	ori	r24, 0x80	; 128
    220e:	8c 93       	st	X, r24
	
	
	// 7. start conversion with ADC free running mode 
	if (ADC_cfg->ADC_Mode == ADC_Mode_FREE_RUNNING)
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	fa 81       	ldd	r31, Y+2	; 0x02
    2214:	80 81       	ld	r24, Z
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	39 f4       	brne	.+14     	; 0x2228 <MCAL_ADC_Init+0xde>
	{
		SETBIT(ADCSRA , ADSC);
    221a:	a6 e2       	ldi	r26, 0x26	; 38
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e6 e2       	ldi	r30, 0x26	; 38
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 64       	ori	r24, 0x40	; 64
    2226:	8c 93       	st	X, r24
	}	
}
    2228:	27 96       	adiw	r28, 0x07	; 7
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <MCAL_ADC_DeInit>:




void MCAL_ADC_DeInit(void)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
	ADMUX  = 0x00;
    2242:	e7 e2       	ldi	r30, 0x27	; 39
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	10 82       	st	Z, r1
	ADCSRA = 0x00;
    2248:	e6 e2       	ldi	r30, 0x26	; 38
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	10 82       	st	Z, r1
	SFIOR &= ~(1<<ADTS0 | 1<<ADTS1 | 1<<ADTS2);
    224e:	a0 e5       	ldi	r26, 0x50	; 80
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e0 e5       	ldi	r30, 0x50	; 80
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	8f 71       	andi	r24, 0x1F	; 31
    225a:	8c 93       	st	X, r24
	
}
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <MCAL_ADC_GetConversionResult>:

void MCAL_ADC_GetConversionResult(Channel_Select_t channel , uint16_t * result  , Polling_Mechanism_t polling)
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <MCAL_ADC_GetConversionResult+0x6>
    2268:	00 d0       	rcall	.+0      	; 0x226a <MCAL_ADC_GetConversionResult+0x8>
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	7b 83       	std	Y+3, r23	; 0x03
    2272:	6a 83       	std	Y+2, r22	; 0x02
    2274:	4c 83       	std	Y+4, r20	; 0x04
	
	//ADMUX &= ~(0x1F);
	// or clear selected channel to select another channel
	CLEARBIT(ADMUX , MUX0);
    2276:	a7 e2       	ldi	r26, 0x27	; 39
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e7 e2       	ldi	r30, 0x27	; 39
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	8e 7f       	andi	r24, 0xFE	; 254
    2282:	8c 93       	st	X, r24
	CLEARBIT(ADMUX , MUX1);
    2284:	a7 e2       	ldi	r26, 0x27	; 39
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e7 e2       	ldi	r30, 0x27	; 39
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	8d 7f       	andi	r24, 0xFD	; 253
    2290:	8c 93       	st	X, r24
	CLEARBIT(ADMUX , MUX2);
    2292:	a7 e2       	ldi	r26, 0x27	; 39
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e7 e2       	ldi	r30, 0x27	; 39
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8b 7f       	andi	r24, 0xFB	; 251
    229e:	8c 93       	st	X, r24
	CLEARBIT(ADMUX , MUX3);
    22a0:	a7 e2       	ldi	r26, 0x27	; 39
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e7 e2       	ldi	r30, 0x27	; 39
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	87 7f       	andi	r24, 0xF7	; 247
    22ac:	8c 93       	st	X, r24
	CLEARBIT(ADMUX , MUX4);
    22ae:	a7 e2       	ldi	r26, 0x27	; 39
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e7 e2       	ldi	r30, 0x27	; 39
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	8f 7e       	andi	r24, 0xEF	; 239
    22ba:	8c 93       	st	X, r24
	
	
	// 1. select channel 
	ADMUX |= ((uint8_t)channel<< 0);
    22bc:	a7 e2       	ldi	r26, 0x27	; 39
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e7 e2       	ldi	r30, 0x27	; 39
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	90 81       	ld	r25, Z
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	89 2b       	or	r24, r25
    22ca:	8c 93       	st	X, r24
	
	// make pin as input
	CLEARBIT(DDRA,channel);
    22cc:	aa e3       	ldi	r26, 0x3A	; 58
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	ea e3       	ldi	r30, 0x3A	; 58
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	48 2f       	mov	r20, r24
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <MCAL_ADC_GetConversionResult+0x88>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <MCAL_ADC_GetConversionResult+0x84>
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	8c 93       	st	X, r24
	
	// 2. start conversion
	if (G_ADC_ConFig.ADC_Mode == ADC_Mode_SINGLE_CONVERSION)
    22f4:	80 91 55 02 	lds	r24, 0x0255
    22f8:	88 23       	and	r24, r24
    22fa:	39 f4       	brne	.+14     	; 0x230a <MCAL_ADC_GetConversionResult+0xa8>
	{
		SETBIT(ADCSRA , ADSC);
    22fc:	a6 e2       	ldi	r26, 0x26	; 38
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e6 e2       	ldi	r30, 0x26	; 38
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	80 64       	ori	r24, 0x40	; 64
    2308:	8c 93       	st	X, r24
	}
	
	// 3. wait until  ADC conversion completes and the Data Registers are updated   => ADCSRA >> ADIF flag
	if (polling == Polling_ENABLE)
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	88 23       	and	r24, r24
    230e:	89 f4       	brne	.+34     	; 0x2332 <MCAL_ADC_GetConversionResult+0xd0>
	{
		while(!READBIT(ADCSRA , ADIF));
    2310:	e6 e2       	ldi	r30, 0x26	; 38
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	80 71       	andi	r24, 0x10	; 16
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	95 95       	asr	r25
    2320:	87 95       	ror	r24
    2322:	95 95       	asr	r25
    2324:	87 95       	ror	r24
    2326:	95 95       	asr	r25
    2328:	87 95       	ror	r24
    232a:	95 95       	asr	r25
    232c:	87 95       	ror	r24
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	79 f3       	breq	.-34     	; 0x2310 <MCAL_ADC_GetConversionResult+0xae>
	}
	
	
	// 4. read conversion data
	if (G_ADC_ConFig.ADC_Result_Presentation == ADC_Result_Presentation_RIGHT)
    2332:	80 91 58 02 	lds	r24, 0x0258
    2336:	88 23       	and	r24, r24
    2338:	a9 f4       	brne	.+42     	; 0x2364 <MCAL_ADC_GetConversionResult+0x102>
	{
		*result = (ADCL | ((ADCH & (0x03)) << 8));
    233a:	e4 e2       	ldi	r30, 0x24	; 36
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	e5 e2       	ldi	r30, 0x25	; 37
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	83 70       	andi	r24, 0x03	; 3
    2350:	90 70       	andi	r25, 0x00	; 0
    2352:	98 2f       	mov	r25, r24
    2354:	88 27       	eor	r24, r24
    2356:	82 2b       	or	r24, r18
    2358:	93 2b       	or	r25, r19
    235a:	ea 81       	ldd	r30, Y+2	; 0x02
    235c:	fb 81       	ldd	r31, Y+3	; 0x03
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
    2362:	1e c0       	rjmp	.+60     	; 0x23a0 <MCAL_ADC_GetConversionResult+0x13e>
	}else if (G_ADC_ConFig.ADC_Result_Presentation == ADC_Result_Presentation_LEFT)
    2364:	80 91 58 02 	lds	r24, 0x0258
    2368:	80 32       	cpi	r24, 0x20	; 32
    236a:	d1 f4       	brne	.+52     	; 0x23a0 <MCAL_ADC_GetConversionResult+0x13e>
	{
		*result = (((ADCL & 0xC0) >> 6)|(ADCH<<2));
    236c:	e4 e2       	ldi	r30, 0x24	; 36
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	82 95       	swap	r24
    2374:	86 95       	lsr	r24
    2376:	86 95       	lsr	r24
    2378:	83 70       	andi	r24, 0x03	; 3
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9c 01       	movw	r18, r24
    2380:	30 70       	andi	r19, 0x00	; 0
    2382:	e5 e2       	ldi	r30, 0x25	; 37
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	82 2b       	or	r24, r18
    2396:	93 2b       	or	r25, r19
    2398:	ea 81       	ldd	r30, Y+2	; 0x02
    239a:	fb 81       	ldd	r31, Y+3	; 0x03
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
	}


	// 5. Clear ADIF flag
	CLEARBIT(ADCSRA, ADIF);
    23a0:	a6 e2       	ldi	r26, 0x26	; 38
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e6 e2       	ldi	r30, 0x26	; 38
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	8f 7e       	andi	r24, 0xEF	; 239
    23ac:	8c 93       	st	X, r24
	
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <__vector_16>:

/* ============================================================================ */
/* ================================== IRQ Handlers ============================ */
/* ============================================================================ */
ISR(ADC_vect)
{
    23bc:	1f 92       	push	r1
    23be:	0f 92       	push	r0
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	0f 92       	push	r0
    23c4:	11 24       	eor	r1, r1
    23c6:	2f 93       	push	r18
    23c8:	3f 93       	push	r19
    23ca:	4f 93       	push	r20
    23cc:	5f 93       	push	r21
    23ce:	6f 93       	push	r22
    23d0:	7f 93       	push	r23
    23d2:	8f 93       	push	r24
    23d4:	9f 93       	push	r25
    23d6:	af 93       	push	r26
    23d8:	bf 93       	push	r27
    23da:	ef 93       	push	r30
    23dc:	ff 93       	push	r31
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
	G_ADC_ConFig.P_IRQ_CallBack();
    23e6:	e0 91 5a 02 	lds	r30, 0x025A
    23ea:	f0 91 5b 02 	lds	r31, 0x025B
    23ee:	09 95       	icall
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	ff 91       	pop	r31
    23f6:	ef 91       	pop	r30
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	7f 91       	pop	r23
    2402:	6f 91       	pop	r22
    2404:	5f 91       	pop	r21
    2406:	4f 91       	pop	r20
    2408:	3f 91       	pop	r19
    240a:	2f 91       	pop	r18
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	0f 90       	pop	r0
    2412:	1f 90       	pop	r1
    2414:	18 95       	reti

00002416 <servo_Motor_Init>:
#include "Servo_Motor.h"



void servo_Motor_Init()
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <servo_Motor_Init+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <servo_Motor_Init+0x8>
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	TIMER0_Config_t Servo_PWM_CFG;
	Servo_PWM_CFG.Timer_Mode = Timer0_Mode_PWM_NONINVERTING;
    2424:	88 e6       	ldi	r24, 0x68	; 104
    2426:	89 83       	std	Y+1, r24	; 0x01
	Servo_PWM_CFG.Timer_Clock_Source = Timer_Clock_Source_PRESCALING_1024;
    2428:	85 e0       	ldi	r24, 0x05	; 5
    242a:	8a 83       	std	Y+2, r24	; 0x02
	Servo_PWM_CFG.IRQ_Enable = IRQ_Enable_NON;
    242c:	1b 82       	std	Y+3, r1	; 0x03
	Servo_PWM_CFG.P_IRQ_CallBack = 0;
    242e:	1d 82       	std	Y+5, r1	; 0x05
    2430:	1c 82       	std	Y+4, r1	; 0x04

	MCAL_Timer0_Init(&Servo_PWM_CFG);
    2432:	ce 01       	movw	r24, r28
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	0e 94 97 07 	call	0xf2e	; 0xf2e <MCAL_Timer0_Init>
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <Open_Gate>:

void Open_Gate()
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	// 0 => 0
	// 10 | 9 => +90

	MCAL_Timer0_PWM_DutyCycle(9);
    2452:	89 e0       	ldi	r24, 0x09	; 9
    2454:	0e 94 46 08 	call	0x108c	; 0x108c <MCAL_Timer0_PWM_DutyCycle>

}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <Close_Gate>:
void Close_Gate()
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	// 0 => 0
	// 10 | 9 => +90

	MCAL_Timer0_PWM_DutyCycle(0);
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	0e 94 46 08 	call	0x108c	; 0x108c <MCAL_Timer0_PWM_DutyCycle>
}
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <SSD_init>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void SSD_init(SSD_Cfg config)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <SSD_init+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <SSD_init+0x8>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	69 83       	std	Y+1, r22	; 0x01
    2480:	7a 83       	std	Y+2, r23	; 0x02
    2482:	8b 83       	std	Y+3, r24	; 0x03
    2484:	9c 83       	std	Y+4, r25	; 0x04
	DIO_SetPortDirection(config.DataPort , DIO_PIN_OUTPUT);
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	61 e0       	ldi	r22, 0x01	; 1
    248a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_SetPortDirection>
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <SSD_Write>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void SSD_Write(SSD_Cfg config , uint8_t number)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <SSD_Write+0x6>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <SSD_Write+0x8>
    24a4:	0f 92       	push	r0
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	69 83       	std	Y+1, r22	; 0x01
    24ac:	7a 83       	std	Y+2, r23	; 0x02
    24ae:	8b 83       	std	Y+3, r24	; 0x03
    24b0:	9c 83       	std	Y+4, r25	; 0x04
    24b2:	4d 83       	std	Y+5, r20	; 0x05
	if(config.type == SSD_COMMON_CATHODE)
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	81 30       	cpi	r24, 0x01	; 1
    24b8:	69 f4       	brne	.+26     	; 0x24d4 <SSD_Write+0x38>
		DIO_SetPortValue(config.DataPort , seg_CCathodeVal[number]);
    24ba:	2a 81       	ldd	r18, Y+2	; 0x02
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	88 2f       	mov	r24, r24
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	fc 01       	movw	r30, r24
    24c4:	e0 50       	subi	r30, 0x00	; 0
    24c6:	fe 4f       	sbci	r31, 0xFE	; 254
    24c8:	90 81       	ld	r25, Z
    24ca:	82 2f       	mov	r24, r18
    24cc:	69 2f       	mov	r22, r25
    24ce:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_SetPortValue>
    24d2:	0f c0       	rjmp	.+30     	; 0x24f2 <SSD_Write+0x56>
	else if(config.type == SSD_COMMON_ANODE)
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	88 23       	and	r24, r24
    24d8:	61 f4       	brne	.+24     	; 0x24f2 <SSD_Write+0x56>
		DIO_SetPortValue(config.DataPort , seg_CAnodeVal[number]);
    24da:	2a 81       	ldd	r18, Y+2	; 0x02
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	fc 01       	movw	r30, r24
    24e4:	ea 50       	subi	r30, 0x0A	; 10
    24e6:	fe 4f       	sbci	r31, 0xFE	; 254
    24e8:	90 81       	ld	r25, Z
    24ea:	82 2f       	mov	r24, r18
    24ec:	69 2f       	mov	r22, r25
    24ee:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <DIO_SetPortValue>
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <keypad_Init>:
int keypad_Row[]	={R0,R1,R2,R3};
int keypad_Column[] ={C0,C1,C2,C3};


void keypad_Init()
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_DDR &= ~((1<<R0) | (1<<R1) |(1<<R2) | (1<<R3)); // set row as input
    250a:	a1 e3       	ldi	r26, 0x31	; 49
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e1 e3       	ldi	r30, 0x31	; 49
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	80 7f       	andi	r24, 0xF0	; 240
    2516:	8c 93       	st	X, r24
	KEYPAD_DDR |=  ((1<<C0) | (1<<C1) |(1<<C2) | (1<<C3)); // set column as output
    2518:	a1 e3       	ldi	r26, 0x31	; 49
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e1 e3       	ldi	r30, 0x31	; 49
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	80 6f       	ori	r24, 0xF0	; 240
    2524:	8c 93       	st	X, r24
	
	KEYPAD_PORT = 0xFF;
    2526:	e2 e3       	ldi	r30, 0x32	; 50
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	80 83       	st	Z, r24
}
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <keypad_GetKey>:

char keypad_GetKey()
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	27 97       	sbiw	r28, 0x07	; 7
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	
	for(i = 0; i < 4 ; i++)
    2548:	1c 82       	std	Y+4, r1	; 0x04
    254a:	1b 82       	std	Y+3, r1	; 0x03
    254c:	37 c1       	rjmp	.+622    	; 0x27bc <keypad_GetKey+0x288>
	{
		KEYPAD_PORT |= ((1<<keypad_Column[0]) | (1<<keypad_Column[1]) | (1<<keypad_Column[2]) | (1<<keypad_Column[3]));
    254e:	a2 e3       	ldi	r26, 0x32	; 50
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e2 e3       	ldi	r30, 0x32	; 50
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	58 2f       	mov	r21, r24
    255a:	20 91 12 02 	lds	r18, 0x0212
    255e:	30 91 13 02 	lds	r19, 0x0213
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	02 c0       	rjmp	.+4      	; 0x256c <keypad_GetKey+0x38>
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	2a 95       	dec	r18
    256e:	e2 f7       	brpl	.-8      	; 0x2568 <keypad_GetKey+0x34>
    2570:	48 2f       	mov	r20, r24
    2572:	20 91 14 02 	lds	r18, 0x0214
    2576:	30 91 15 02 	lds	r19, 0x0215
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <keypad_GetKey+0x50>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	2a 95       	dec	r18
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <keypad_GetKey+0x4c>
    2588:	48 2b       	or	r20, r24
    258a:	20 91 16 02 	lds	r18, 0x0216
    258e:	30 91 17 02 	lds	r19, 0x0217
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 c0       	rjmp	.+4      	; 0x259c <keypad_GetKey+0x68>
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	2a 95       	dec	r18
    259e:	e2 f7       	brpl	.-8      	; 0x2598 <keypad_GetKey+0x64>
    25a0:	48 2b       	or	r20, r24
    25a2:	20 91 18 02 	lds	r18, 0x0218
    25a6:	30 91 19 02 	lds	r19, 0x0219
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <keypad_GetKey+0x80>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	2a 95       	dec	r18
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <keypad_GetKey+0x7c>
    25b8:	84 2b       	or	r24, r20
    25ba:	85 2b       	or	r24, r21
    25bc:	8c 93       	st	X, r24
		KEYPAD_PORT &= ~(1<<keypad_Column[i]); //send low to a particular row of the keypad
    25be:	a2 e3       	ldi	r26, 0x32	; 50
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e2 e3       	ldi	r30, 0x32	; 50
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	48 2f       	mov	r20, r24
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	9c 81       	ldd	r25, Y+4	; 0x04
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	fc 01       	movw	r30, r24
    25d4:	ee 5e       	subi	r30, 0xEE	; 238
    25d6:	fd 4f       	sbci	r31, 0xFD	; 253
    25d8:	20 81       	ld	r18, Z
    25da:	31 81       	ldd	r19, Z+1	; 0x01
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	02 2e       	mov	r0, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <keypad_GetKey+0xb4>
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	0a 94       	dec	r0
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <keypad_GetKey+0xb0>
    25ec:	80 95       	com	r24
    25ee:	84 23       	and	r24, r20
    25f0:	8c 93       	st	X, r24
		for(j=0;j<4 ; j++)
    25f2:	1a 82       	std	Y+2, r1	; 0x02
    25f4:	19 82       	std	Y+1, r1	; 0x01
    25f6:	d7 c0       	rjmp	.+430    	; 0x27a6 <keypad_GetKey+0x272>
		{
			if(!(KEYPAD_PIN & (1<<keypad_Row[j]))) // check if key is pressed
    25f8:	e0 e3       	ldi	r30, 0x30	; 48
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	fc 01       	movw	r30, r24
    260c:	e6 5f       	subi	r30, 0xF6	; 246
    260e:	fd 4f       	sbci	r31, 0xFD	; 253
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	a9 01       	movw	r20, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <keypad_GetKey+0xe8>
    2618:	55 95       	asr	r21
    261a:	47 95       	ror	r20
    261c:	8a 95       	dec	r24
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <keypad_GetKey+0xe4>
    2620:	ca 01       	movw	r24, r20
    2622:	81 70       	andi	r24, 0x01	; 1
    2624:	90 70       	andi	r25, 0x00	; 0
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	09 f0       	breq	.+2      	; 0x262c <keypad_GetKey+0xf8>
    262a:	b8 c0       	rjmp	.+368    	; 0x279c <keypad_GetKey+0x268>
			{
				while(!(KEYPAD_PIN & (1<<keypad_Row[j]))); // wait for  single press
    262c:	e0 e3       	ldi	r30, 0x30	; 48
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	fc 01       	movw	r30, r24
    2640:	e6 5f       	subi	r30, 0xF6	; 246
    2642:	fd 4f       	sbci	r31, 0xFD	; 253
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	a9 01       	movw	r20, r18
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <keypad_GetKey+0x11c>
    264c:	55 95       	asr	r21
    264e:	47 95       	ror	r20
    2650:	8a 95       	dec	r24
    2652:	e2 f7       	brpl	.-8      	; 0x264c <keypad_GetKey+0x118>
    2654:	ca 01       	movw	r24, r20
    2656:	81 70       	andi	r24, 0x01	; 1
    2658:	90 70       	andi	r25, 0x00	; 0
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	39 f3       	breq	.-50     	; 0x262c <keypad_GetKey+0xf8>
				switch (i)
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	9f 83       	std	Y+7, r25	; 0x07
    2664:	8e 83       	std	Y+6, r24	; 0x06
    2666:	4e 81       	ldd	r20, Y+6	; 0x06
    2668:	5f 81       	ldd	r21, Y+7	; 0x07
    266a:	41 30       	cpi	r20, 0x01	; 1
    266c:	51 05       	cpc	r21, r1
    266e:	c1 f1       	breq	.+112    	; 0x26e0 <keypad_GetKey+0x1ac>
    2670:	8e 81       	ldd	r24, Y+6	; 0x06
    2672:	9f 81       	ldd	r25, Y+7	; 0x07
    2674:	82 30       	cpi	r24, 0x02	; 2
    2676:	91 05       	cpc	r25, r1
    2678:	34 f4       	brge	.+12     	; 0x2686 <keypad_GetKey+0x152>
    267a:	4e 81       	ldd	r20, Y+6	; 0x06
    267c:	5f 81       	ldd	r21, Y+7	; 0x07
    267e:	41 15       	cp	r20, r1
    2680:	51 05       	cpc	r21, r1
    2682:	71 f0       	breq	.+28     	; 0x26a0 <keypad_GetKey+0x16c>
    2684:	8b c0       	rjmp	.+278    	; 0x279c <keypad_GetKey+0x268>
    2686:	8e 81       	ldd	r24, Y+6	; 0x06
    2688:	9f 81       	ldd	r25, Y+7	; 0x07
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	91 05       	cpc	r25, r1
    268e:	09 f4       	brne	.+2      	; 0x2692 <keypad_GetKey+0x15e>
    2690:	47 c0       	rjmp	.+142    	; 0x2720 <keypad_GetKey+0x1ec>
    2692:	4e 81       	ldd	r20, Y+6	; 0x06
    2694:	5f 81       	ldd	r21, Y+7	; 0x07
    2696:	43 30       	cpi	r20, 0x03	; 3
    2698:	51 05       	cpc	r21, r1
    269a:	09 f4       	brne	.+2      	; 0x269e <keypad_GetKey+0x16a>
    269c:	60 c0       	rjmp	.+192    	; 0x275e <keypad_GetKey+0x22a>
    269e:	7e c0       	rjmp	.+252    	; 0x279c <keypad_GetKey+0x268>
				{
					case(0):
					if(j == 0) return '7';
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	9a 81       	ldd	r25, Y+2	; 0x02
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	19 f4       	brne	.+6      	; 0x26ae <keypad_GetKey+0x17a>
    26a8:	57 e3       	ldi	r21, 0x37	; 55
    26aa:	5d 83       	std	Y+5, r21	; 0x05
    26ac:	8f c0       	rjmp	.+286    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 1) return '4';
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	91 05       	cpc	r25, r1
    26b6:	19 f4       	brne	.+6      	; 0x26be <keypad_GetKey+0x18a>
    26b8:	84 e3       	ldi	r24, 0x34	; 52
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	87 c0       	rjmp	.+270    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 2) return '1';
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	82 30       	cpi	r24, 0x02	; 2
    26c4:	91 05       	cpc	r25, r1
    26c6:	19 f4       	brne	.+6      	; 0x26ce <keypad_GetKey+0x19a>
    26c8:	91 e3       	ldi	r25, 0x31	; 49
    26ca:	9d 83       	std	Y+5, r25	; 0x05
    26cc:	7f c0       	rjmp	.+254    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 3) return '?';
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	83 30       	cpi	r24, 0x03	; 3
    26d4:	91 05       	cpc	r25, r1
    26d6:	09 f0       	breq	.+2      	; 0x26da <keypad_GetKey+0x1a6>
    26d8:	61 c0       	rjmp	.+194    	; 0x279c <keypad_GetKey+0x268>
    26da:	4f e3       	ldi	r20, 0x3F	; 63
    26dc:	4d 83       	std	Y+5, r20	; 0x05
    26de:	76 c0       	rjmp	.+236    	; 0x27cc <keypad_GetKey+0x298>
					break;
					case(1):
					if(j == 0) return '8';
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	00 97       	sbiw	r24, 0x00	; 0
    26e6:	19 f4       	brne	.+6      	; 0x26ee <keypad_GetKey+0x1ba>
    26e8:	58 e3       	ldi	r21, 0x38	; 56
    26ea:	5d 83       	std	Y+5, r21	; 0x05
    26ec:	6f c0       	rjmp	.+222    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 1) return '5';
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	91 05       	cpc	r25, r1
    26f6:	19 f4       	brne	.+6      	; 0x26fe <keypad_GetKey+0x1ca>
    26f8:	85 e3       	ldi	r24, 0x35	; 53
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	67 c0       	rjmp	.+206    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 2) return '2';
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	82 30       	cpi	r24, 0x02	; 2
    2704:	91 05       	cpc	r25, r1
    2706:	19 f4       	brne	.+6      	; 0x270e <keypad_GetKey+0x1da>
    2708:	92 e3       	ldi	r25, 0x32	; 50
    270a:	9d 83       	std	Y+5, r25	; 0x05
    270c:	5f c0       	rjmp	.+190    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 3) return '0';
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	83 30       	cpi	r24, 0x03	; 3
    2714:	91 05       	cpc	r25, r1
    2716:	09 f0       	breq	.+2      	; 0x271a <keypad_GetKey+0x1e6>
    2718:	41 c0       	rjmp	.+130    	; 0x279c <keypad_GetKey+0x268>
    271a:	40 e3       	ldi	r20, 0x30	; 48
    271c:	4d 83       	std	Y+5, r20	; 0x05
    271e:	56 c0       	rjmp	.+172    	; 0x27cc <keypad_GetKey+0x298>
					break;
					case(2):
					if(j == 0) return '9';
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	19 f4       	brne	.+6      	; 0x272e <keypad_GetKey+0x1fa>
    2728:	59 e3       	ldi	r21, 0x39	; 57
    272a:	5d 83       	std	Y+5, r21	; 0x05
    272c:	4f c0       	rjmp	.+158    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 1) return '6';
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	81 30       	cpi	r24, 0x01	; 1
    2734:	91 05       	cpc	r25, r1
    2736:	19 f4       	brne	.+6      	; 0x273e <keypad_GetKey+0x20a>
    2738:	86 e3       	ldi	r24, 0x36	; 54
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	47 c0       	rjmp	.+142    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 2) return '3';
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	91 05       	cpc	r25, r1
    2746:	19 f4       	brne	.+6      	; 0x274e <keypad_GetKey+0x21a>
    2748:	93 e3       	ldi	r25, 0x33	; 51
    274a:	9d 83       	std	Y+5, r25	; 0x05
    274c:	3f c0       	rjmp	.+126    	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 3) return '=';
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	83 30       	cpi	r24, 0x03	; 3
    2754:	91 05       	cpc	r25, r1
    2756:	11 f5       	brne	.+68     	; 0x279c <keypad_GetKey+0x268>
    2758:	4d e3       	ldi	r20, 0x3D	; 61
    275a:	4d 83       	std	Y+5, r20	; 0x05
    275c:	37 c0       	rjmp	.+110    	; 0x27cc <keypad_GetKey+0x298>
					break;
					case(3):
					if(j == 0) return '/';
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	19 f4       	brne	.+6      	; 0x276c <keypad_GetKey+0x238>
    2766:	5f e2       	ldi	r21, 0x2F	; 47
    2768:	5d 83       	std	Y+5, r21	; 0x05
    276a:	30 c0       	rjmp	.+96     	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 1) return '*';
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	91 05       	cpc	r25, r1
    2774:	19 f4       	brne	.+6      	; 0x277c <keypad_GetKey+0x248>
    2776:	8a e2       	ldi	r24, 0x2A	; 42
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	28 c0       	rjmp	.+80     	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 2) return '-';
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	82 30       	cpi	r24, 0x02	; 2
    2782:	91 05       	cpc	r25, r1
    2784:	19 f4       	brne	.+6      	; 0x278c <keypad_GetKey+0x258>
    2786:	9d e2       	ldi	r25, 0x2D	; 45
    2788:	9d 83       	std	Y+5, r25	; 0x05
    278a:	20 c0       	rjmp	.+64     	; 0x27cc <keypad_GetKey+0x298>
					else if(j == 3) return '+';
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	83 30       	cpi	r24, 0x03	; 3
    2792:	91 05       	cpc	r25, r1
    2794:	19 f4       	brne	.+6      	; 0x279c <keypad_GetKey+0x268>
    2796:	4b e2       	ldi	r20, 0x2B	; 43
    2798:	4d 83       	std	Y+5, r20	; 0x05
    279a:	18 c0       	rjmp	.+48     	; 0x27cc <keypad_GetKey+0x298>
	
	for(i = 0; i < 4 ; i++)
	{
		KEYPAD_PORT |= ((1<<keypad_Column[0]) | (1<<keypad_Column[1]) | (1<<keypad_Column[2]) | (1<<keypad_Column[3]));
		KEYPAD_PORT &= ~(1<<keypad_Column[i]); //send low to a particular row of the keypad
		for(j=0;j<4 ; j++)
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	01 96       	adiw	r24, 0x01	; 1
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	84 30       	cpi	r24, 0x04	; 4
    27ac:	91 05       	cpc	r25, r1
    27ae:	0c f4       	brge	.+2      	; 0x27b2 <keypad_GetKey+0x27e>
    27b0:	23 cf       	rjmp	.-442    	; 0x25f8 <keypad_GetKey+0xc4>

char keypad_GetKey()
{
	int i,j;
	
	for(i = 0; i < 4 ; i++)
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	9c 83       	std	Y+4, r25	; 0x04
    27ba:	8b 83       	std	Y+3, r24	; 0x03
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	84 30       	cpi	r24, 0x04	; 4
    27c2:	91 05       	cpc	r25, r1
    27c4:	0c f4       	brge	.+2      	; 0x27c8 <keypad_GetKey+0x294>
    27c6:	c3 ce       	rjmp	.-634    	; 0x254e <keypad_GetKey+0x1a>
					
				}
			}
		}
	}
	return 'A'; // return A if no key is pressed
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	5d 83       	std	Y+5, r21	; 0x05
    27cc:	8d 81       	ldd	r24, Y+5	; 0x05
    27ce:	27 96       	adiw	r28, 0x07	; 7
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <LCD_Init>:
 */ 

#include "lcd_driver.h"

void LCD_Init(void)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	6c 97       	sbiw	r28, 0x1c	; 28
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e0       	ldi	r26, 0x00	; 0
    27fa:	b0 e4       	ldi	r27, 0x40	; 64
    27fc:	89 8f       	std	Y+25, r24	; 0x19
    27fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2800:	ab 8f       	std	Y+27, r26	; 0x1b
    2802:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	69 8d       	ldd	r22, Y+25	; 0x19
    2806:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2808:	8b 8d       	ldd	r24, Y+27	; 0x1b
    280a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a ef       	ldi	r20, 0xFA	; 250
    2812:	54 e4       	ldi	r21, 0x44	; 68
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8d 8b       	std	Y+21, r24	; 0x15
    281e:	9e 8b       	std	Y+22, r25	; 0x16
    2820:	af 8b       	std	Y+23, r26	; 0x17
    2822:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2824:	6d 89       	ldd	r22, Y+21	; 0x15
    2826:	7e 89       	ldd	r23, Y+22	; 0x16
    2828:	8f 89       	ldd	r24, Y+23	; 0x17
    282a:	98 8d       	ldd	r25, Y+24	; 0x18
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e8       	ldi	r20, 0x80	; 128
    2832:	5f e3       	ldi	r21, 0x3F	; 63
    2834:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2838:	88 23       	and	r24, r24
    283a:	2c f4       	brge	.+10     	; 0x2846 <LCD_Init+0x66>
		__ticks = 1;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	9c 8b       	std	Y+20, r25	; 0x14
    2842:	8b 8b       	std	Y+19, r24	; 0x13
    2844:	3f c0       	rjmp	.+126    	; 0x28c4 <LCD_Init+0xe4>
	else if (__tmp > 65535)
    2846:	6d 89       	ldd	r22, Y+21	; 0x15
    2848:	7e 89       	ldd	r23, Y+22	; 0x16
    284a:	8f 89       	ldd	r24, Y+23	; 0x17
    284c:	98 8d       	ldd	r25, Y+24	; 0x18
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	4f e7       	ldi	r20, 0x7F	; 127
    2854:	57 e4       	ldi	r21, 0x47	; 71
    2856:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    285a:	18 16       	cp	r1, r24
    285c:	4c f5       	brge	.+82     	; 0x28b0 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	69 8d       	ldd	r22, Y+25	; 0x19
    2860:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2862:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2864:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e2       	ldi	r20, 0x20	; 32
    286c:	51 e4       	ldi	r21, 0x41	; 65
    286e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	9c 8b       	std	Y+20, r25	; 0x14
    2884:	8b 8b       	std	Y+19, r24	; 0x13
    2886:	0f c0       	rjmp	.+30     	; 0x28a6 <LCD_Init+0xc6>
    2888:	88 ec       	ldi	r24, 0xC8	; 200
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9a 8b       	std	Y+18, r25	; 0x12
    288e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2890:	89 89       	ldd	r24, Y+17	; 0x11
    2892:	9a 89       	ldd	r25, Y+18	; 0x12
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_Init+0xb4>
    2898:	9a 8b       	std	Y+18, r25	; 0x12
    289a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	9c 89       	ldd	r25, Y+20	; 0x14
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	9c 8b       	std	Y+20, r25	; 0x14
    28a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	8b 89       	ldd	r24, Y+19	; 0x13
    28a8:	9c 89       	ldd	r25, Y+20	; 0x14
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	69 f7       	brne	.-38     	; 0x2888 <LCD_Init+0xa8>
    28ae:	14 c0       	rjmp	.+40     	; 0x28d8 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b0:	6d 89       	ldd	r22, Y+21	; 0x15
    28b2:	7e 89       	ldd	r23, Y+22	; 0x16
    28b4:	8f 89       	ldd	r24, Y+23	; 0x17
    28b6:	98 8d       	ldd	r25, Y+24	; 0x18
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9c 8b       	std	Y+20, r25	; 0x14
    28c2:	8b 8b       	std	Y+19, r24	; 0x13
    28c4:	8b 89       	ldd	r24, Y+19	; 0x13
    28c6:	9c 89       	ldd	r25, Y+20	; 0x14
    28c8:	98 8b       	std	Y+16, r25	; 0x10
    28ca:	8f 87       	std	Y+15, r24	; 0x0f
    28cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ce:	98 89       	ldd	r25, Y+16	; 0x10
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_Init+0xf0>
    28d4:	98 8b       	std	Y+16, r25	; 0x10
    28d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DataDir_LCD_CONTROL |=  (1<<EN_switch | 1<<RW_switch | 1<<RS_switch);
    28d8:	a1 e3       	ldi	r26, 0x31	; 49
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e1 e3       	ldi	r30, 0x31	; 49
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	80 6e       	ori	r24, 0xE0	; 224
    28e4:	8c 93       	st	X, r24
	LCD_CONTROL_PORT    &= ~(1<<EN_switch | 1<<RW_switch | 1<<RS_switch);
    28e6:	a2 e3       	ldi	r26, 0x32	; 50
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e2 e3       	ldi	r30, 0x32	; 50
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	8f 71       	andi	r24, 0x1F	; 31
    28f2:	8c 93       	st	X, r24



	DataDir_LCD_PORT = 0xFF;
    28f4:	ea e3       	ldi	r30, 0x3A	; 58
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	80 83       	st	Z, r24
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e0       	ldi	r26, 0x00	; 0
    2902:	b0 e4       	ldi	r27, 0x40	; 64
    2904:	8b 87       	std	Y+11, r24	; 0x0b
    2906:	9c 87       	std	Y+12, r25	; 0x0c
    2908:	ad 87       	std	Y+13, r26	; 0x0d
    290a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6b 85       	ldd	r22, Y+11	; 0x0b
    290e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2910:	8d 85       	ldd	r24, Y+13	; 0x0d
    2912:	9e 85       	ldd	r25, Y+14	; 0x0e
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a ef       	ldi	r20, 0xFA	; 250
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8f 83       	std	Y+7, r24	; 0x07
    2926:	98 87       	std	Y+8, r25	; 0x08
    2928:	a9 87       	std	Y+9, r26	; 0x09
    292a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <LCD_Init+0x16e>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <LCD_Init+0x1ec>
	else if (__tmp > 65535)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <LCD_Init+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6b 85       	ldd	r22, Y+11	; 0x0b
    2968:	7c 85       	ldd	r23, Y+12	; 0x0c
    296a:	8d 85       	ldd	r24, Y+13	; 0x0d
    296c:	9e 85       	ldd	r25, Y+14	; 0x0e
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <LCD_Init+0x1ce>
    2990:	88 ec       	ldi	r24, 0xC8	; 200
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9c 83       	std	Y+4, r25	; 0x04
    2996:	8b 83       	std	Y+3, r24	; 0x03
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <LCD_Init+0x1bc>
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <LCD_Init+0x1b0>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <LCD_Init+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <LCD_Init+0x1f8>
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
	LCD_Clear_Screen();
    29e0:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_Clear_Screen>

#ifdef EIGHT_BIT_MODE
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
    29e4:	88 e3       	ldi	r24, 0x38	; 56
    29e6:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
#ifdef FOUR_BIT_MODE
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
    29ea:	86 e0       	ldi	r24, 0x06	; 6
    29ec:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
    29f0:	80 e8       	ldi	r24, 0x80	; 128
    29f2:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_0N);
    29f6:	8c e0       	ldi	r24, 0x0C	; 12
    29f8:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>

}
    29fc:	6c 96       	adiw	r28, 0x1c	; 28
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	08 95       	ret

00002a0e <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
    2a0e:	df 93       	push	r29
    2a10:	cf 93       	push	r28
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Command(LCD_CLEAR);
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
}
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <LCD_Send_Command>:

void LCD_Send_Command(uint8_t command)
{
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	2f 97       	sbiw	r28, 0x0f	; 15
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	8f 87       	std	Y+15, r24	; 0x0f
#ifdef EIGHT_BIT_MODE
	LCD_Check_Is_Busy();
    2a38:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_Check_Is_Busy>

	LCD_PORT = command;
    2a3c:	eb e3       	ldi	r30, 0x3B	; 59
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a42:	80 83       	st	Z, r24
	LCD_CONTROL_PORT &= ~((1<<RW_switch) | (1<<RS_switch));
    2a44:	a2 e3       	ldi	r26, 0x32	; 50
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e2 e3       	ldi	r30, 0x32	; 50
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	8f 75       	andi	r24, 0x5F	; 95
    2a50:	8c 93       	st	X, r24
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	a0 e8       	ldi	r26, 0x80	; 128
    2a58:	bf e3       	ldi	r27, 0x3F	; 63
    2a5a:	8b 87       	std	Y+11, r24	; 0x0b
    2a5c:	9c 87       	std	Y+12, r25	; 0x0c
    2a5e:	ad 87       	std	Y+13, r26	; 0x0d
    2a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	4a ef       	ldi	r20, 0xFA	; 250
    2a70:	54 e4       	ldi	r21, 0x44	; 68
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8f 83       	std	Y+7, r24	; 0x07
    2a7c:	98 87       	std	Y+8, r25	; 0x08
    2a7e:	a9 87       	std	Y+9, r26	; 0x09
    2a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <LCD_Send_Command+0x82>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	3f c0       	rjmp	.+126    	; 0x2b22 <LCD_Send_Command+0x100>
	else if (__tmp > 65535)
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	4c f5       	brge	.+82     	; 0x2b0e <LCD_Send_Command+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <LCD_Send_Command+0xe2>
    2ae6:	88 ec       	ldi	r24, 0xC8	; 200
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9c 83       	std	Y+4, r25	; 0x04
    2aec:	8b 83       	std	Y+3, r24	; 0x03
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <LCD_Send_Command+0xd0>
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	69 f7       	brne	.-38     	; 0x2ae6 <LCD_Send_Command+0xc4>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <LCD_Send_Command+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <LCD_Send_Command+0x10c>
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_Kick();
    2b36:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (command << 4);
	LCD_CONTROL_PORT &= ~((1<<RW_switch) | (1<<RS_switch));
	LCD_Kick();
#endif

}
    2b3a:	2f 96       	adiw	r28, 0x0f	; 15
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <LCD_Send_Character>:
void LCD_Send_Character(uint8_t character)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	2f 97       	sbiw	r28, 0x0f	; 15
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	8f 87       	std	Y+15, r24	; 0x0f
#ifdef EIGHT_BIT_MODE
	LCD_Check_Is_Busy();
    2b62:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <LCD_Check_Is_Busy>

	LCD_PORT = (character << DATA_SHIFT);
    2b66:	eb e3       	ldi	r30, 0x3B	; 59
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6c:	80 83       	st	Z, r24
	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
    2b6e:	a2 e3       	ldi	r26, 0x32	; 50
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e2 e3       	ldi	r30, 0x32	; 50
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	8f 7d       	andi	r24, 0xDF	; 223
    2b7a:	8c 93       	st	X, r24
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
    2b7c:	a2 e3       	ldi	r26, 0x32	; 50
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e2 e3       	ldi	r30, 0x32	; 50
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	80 68       	ori	r24, 0x80	; 128
    2b88:	8c 93       	st	X, r24
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e8       	ldi	r26, 0x80	; 128
    2b90:	bf e3       	ldi	r27, 0x3F	; 63
    2b92:	8b 87       	std	Y+11, r24	; 0x0b
    2b94:	9c 87       	std	Y+12, r25	; 0x0c
    2b96:	ad 87       	std	Y+13, r26	; 0x0d
    2b98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a ef       	ldi	r20, 0xFA	; 250
    2ba8:	54 e4       	ldi	r21, 0x44	; 68
    2baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	8f 83       	std	Y+7, r24	; 0x07
    2bb4:	98 87       	std	Y+8, r25	; 0x08
    2bb6:	a9 87       	std	Y+9, r26	; 0x09
    2bb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bba:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbc:	78 85       	ldd	r23, Y+8	; 0x08
    2bbe:	89 85       	ldd	r24, Y+9	; 0x09
    2bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	2c f4       	brge	.+10     	; 0x2bdc <LCD_Send_Character+0x90>
		__ticks = 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
    2bda:	3f c0       	rjmp	.+126    	; 0x2c5a <LCD_Send_Character+0x10e>
	else if (__tmp > 65535)
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	3f ef       	ldi	r19, 0xFF	; 255
    2be8:	4f e7       	ldi	r20, 0x7F	; 127
    2bea:	57 e4       	ldi	r21, 0x47	; 71
    2bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf0:	18 16       	cp	r1, r24
    2bf2:	4c f5       	brge	.+82     	; 0x2c46 <LCD_Send_Character+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	51 e4       	ldi	r21, 0x41	; 65
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9e 83       	std	Y+6, r25	; 0x06
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
    2c1c:	0f c0       	rjmp	.+30     	; 0x2c3c <LCD_Send_Character+0xf0>
    2c1e:	88 ec       	ldi	r24, 0xC8	; 200
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	8b 83       	std	Y+3, r24	; 0x03
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <LCD_Send_Character+0xde>
    2c2e:	9c 83       	std	Y+4, r25	; 0x04
    2c30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	69 f7       	brne	.-38     	; 0x2c1e <LCD_Send_Character+0xd2>
    2c44:	14 c0       	rjmp	.+40     	; 0x2c6e <LCD_Send_Character+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c46:	6f 81       	ldd	r22, Y+7	; 0x07
    2c48:	78 85       	ldd	r23, Y+8	; 0x08
    2c4a:	89 85       	ldd	r24, Y+9	; 0x09
    2c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5e:	9a 83       	std	Y+2, r25	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_Send_Character+0x11a>
    2c6a:	9a 83       	std	Y+2, r25	; 0x02
    2c6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_Kick();
    2c6e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_Kick>
	LCD_PORT = (LCD_PORT &0x0F) | (character << 4);
	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
	LCD_CONTROL_PORT |= (1<<RS_switch);     //1: Data Register
	LCD_Kick();
#endif
}
    2c72:	2f 96       	adiw	r28, 0x0f	; 15
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <LCD_Send_String>:
void LCD_Send_String(char *string)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	00 d0       	rcall	.+0      	; 0x2c8a <LCD_Send_String+0x6>
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <LCD_Send_String+0x8>
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
	int count =0;
    2c94:	1a 82       	std	Y+2, r1	; 0x02
    2c96:	19 82       	std	Y+1, r1	; 0x01
    2c98:	43 c0       	rjmp	.+134    	; 0x2d20 <LCD_Send_String+0x9c>
	while(*string >0)
	{
		count++;
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	01 96       	adiw	r24, 0x01	; 1
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Character(*string++);
    2ca4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ca6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca8:	20 81       	ld	r18, Z
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	9c 83       	std	Y+4, r25	; 0x04
    2cb2:	8b 83       	std	Y+3, r24	; 0x03
    2cb4:	82 2f       	mov	r24, r18
    2cb6:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_Send_Character>
		if (count == 16)
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cbe:	80 31       	cpi	r24, 0x10	; 16
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	39 f4       	brne	.+14     	; 0x2cd2 <LCD_Send_String+0x4e>
		{
			LCD_gotoXY(2,0);
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
    2cd0:	27 c0       	rjmp	.+78     	; 0x2d20 <LCD_Send_String+0x9c>
		}else if (count == 32)
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	80 32       	cpi	r24, 0x20	; 32
    2cd8:	91 05       	cpc	r25, r1
    2cda:	39 f4       	brne	.+14     	; 0x2cea <LCD_Send_String+0x66>
		{
			LCD_gotoXY(3,0);
    2cdc:	83 e0       	ldi	r24, 0x03	; 3
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	60 e0       	ldi	r22, 0x00	; 0
    2ce2:	70 e0       	ldi	r23, 0x00	; 0
    2ce4:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
    2ce8:	1b c0       	rjmp	.+54     	; 0x2d20 <LCD_Send_String+0x9c>
		}
		else if (count == 48)
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	9a 81       	ldd	r25, Y+2	; 0x02
    2cee:	80 33       	cpi	r24, 0x30	; 48
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	39 f4       	brne	.+14     	; 0x2d02 <LCD_Send_String+0x7e>
		{
			LCD_gotoXY(4,0);
    2cf4:	84 e0       	ldi	r24, 0x04	; 4
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	60 e0       	ldi	r22, 0x00	; 0
    2cfa:	70 e0       	ldi	r23, 0x00	; 0
    2cfc:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <LCD_Send_String+0x9c>
		}

		else if(count >= 64 )
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	9a 81       	ldd	r25, Y+2	; 0x02
    2d06:	80 34       	cpi	r24, 0x40	; 64
    2d08:	91 05       	cpc	r25, r1
    2d0a:	54 f0       	brlt	.+20     	; 0x2d20 <LCD_Send_String+0x9c>
		{
			LCD_Clear_Screen();
    2d0c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_Clear_Screen>
			LCD_gotoXY(1,0);
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
			count =0;
    2d1c:	1a 82       	std	Y+2, r1	; 0x02
    2d1e:	19 82       	std	Y+1, r1	; 0x01
#endif
}
void LCD_Send_String(char *string)
{
	int count =0;
	while(*string >0)
    2d20:	eb 81       	ldd	r30, Y+3	; 0x03
    2d22:	fc 81       	ldd	r31, Y+4	; 0x04
    2d24:	80 81       	ld	r24, Z
    2d26:	88 23       	and	r24, r24
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <LCD_Send_String+0xa8>
    2d2a:	b7 cf       	rjmp	.-146    	; 0x2c9a <LCD_Send_String+0x16>
			LCD_Clear_Screen();
			LCD_gotoXY(1,0);
			count =0;
		}
	}
}
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <LCD_Send_Custom_String>:
void LCD_Send_Custom_String(char *string , int count)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <LCD_Send_Custom_String+0x6>
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <LCD_Send_Custom_String+0x8>
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	89 83       	std	Y+1, r24	; 0x01
    2d4a:	7c 83       	std	Y+4, r23	; 0x04
    2d4c:	6b 83       	std	Y+3, r22	; 0x03
    2d4e:	17 c0       	rjmp	.+46     	; 0x2d7e <LCD_Send_Custom_String+0x44>

	while(*string >0)
	{
		count++;
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	9c 83       	std	Y+4, r25	; 0x04
    2d58:	8b 83       	std	Y+3, r24	; 0x03

		if (count>=0)
    2d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5e:	99 23       	and	r25, r25
    2d60:	4c f0       	brlt	.+18     	; 0x2d74 <LCD_Send_Custom_String+0x3a>
		{
			LCD_Send_Character(*string);
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	80 81       	ld	r24, Z
    2d68:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LCD_Send_Character>
			LCD_Send_Command(0x80+count);
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	80 58       	subi	r24, 0x80	; 128
    2d70:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
		}
		string++;
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	89 83       	std	Y+1, r24	; 0x01
	}
}
void LCD_Send_Custom_String(char *string , int count)
{

	while(*string >0)
    2d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d80:	fa 81       	ldd	r31, Y+2	; 0x02
    2d82:	80 81       	ld	r24, Z
    2d84:	88 23       	and	r24, r24
    2d86:	21 f7       	brne	.-56     	; 0x2d50 <LCD_Send_Custom_String+0x16>
			LCD_Send_Command(0x80+count);
		}
		string++;

	}
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <LCD_Kick>:

void LCD_Kick(void)
{	
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	2e 97       	sbiw	r28, 0x0e	; 14
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
	LCD_CONTROL_PORT |= (1<<EN_switch);
    2daa:	a2 e3       	ldi	r26, 0x32	; 50
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e2 e3       	ldi	r30, 0x32	; 50
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	80 64       	ori	r24, 0x40	; 64
    2db6:	8c 93       	st	X, r24
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a0 e8       	ldi	r26, 0x80	; 128
    2dbe:	bf e3       	ldi	r27, 0x3F	; 63
    2dc0:	8b 87       	std	Y+11, r24	; 0x0b
    2dc2:	9c 87       	std	Y+12, r25	; 0x0c
    2dc4:	ad 87       	std	Y+13, r26	; 0x0d
    2dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a ef       	ldi	r20, 0xFA	; 250
    2dd6:	54 e4       	ldi	r21, 0x44	; 68
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8f 83       	std	Y+7, r24	; 0x07
    2de2:	98 87       	std	Y+8, r25	; 0x08
    2de4:	a9 87       	std	Y+9, r26	; 0x09
    2de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	5f e3       	ldi	r21, 0x3F	; 63
    2df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <LCD_Kick+0x74>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <LCD_Kick+0xf2>
	else if (__tmp > 65535)
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <LCD_Kick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <LCD_Kick+0xd4>
    2e4c:	88 ec       	ldi	r24, 0xC8	; 200
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	8b 83       	std	Y+3, r24	; 0x03
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <LCD_Kick+0xc2>
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <LCD_Kick+0xb6>
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <LCD_Kick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <LCD_Kick+0xfe>
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_CONTROL_PORT &= ~(1<<EN_switch);
    2e9c:	a2 e3       	ldi	r26, 0x32	; 50
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e2 e3       	ldi	r30, 0x32	; 50
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	8f 7b       	andi	r24, 0xBF	; 191
    2ea8:	8c 93       	st	X, r24
	//asm volatile ("nop");
	//asm volatile ("nop");


}
    2eaa:	2e 96       	adiw	r28, 0x0e	; 14
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <LCD_Check_Is_Busy>:
void LCD_Check_Is_Busy(void)
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <LCD_Check_Is_Busy+0x6>
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_PORT &= ~(0xFF << DATA_SHIFT);
    2ec6:	ea e3       	ldi	r30, 0x3A	; 58
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	ea e3       	ldi	r30, 0x3A	; 58
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	10 82       	st	Z, r1
	LCD_CONTROL_PORT |= (1<<RW_switch);            //1: Read
    2ed2:	a2 e3       	ldi	r26, 0x32	; 50
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e2 e3       	ldi	r30, 0x32	; 50
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	80 62       	ori	r24, 0x20	; 32
    2ede:	8c 93       	st	X, r24
	LCD_CONTROL_PORT &= ~(1<<RS_switch);           // 0: Command Register
    2ee0:	a2 e3       	ldi	r26, 0x32	; 50
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e2 e3       	ldi	r30, 0x32	; 50
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	8f 77       	andi	r24, 0x7F	; 127
    2eec:	8c 93       	st	X, r24

	LCD_Kick();
    2eee:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <LCD_Kick>

	DataDir_LCD_PORT |= (0xFF << DATA_SHIFT);
    2ef2:	ea e3       	ldi	r30, 0x3A	; 58
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	ea e3       	ldi	r30, 0x3A	; 58
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	8f ef       	ldi	r24, 0xFF	; 255
    2efe:	80 83       	st	Z, r24
	LCD_CONTROL_PORT &= ~(1<<RW_switch);       //0: Write
    2f00:	a2 e3       	ldi	r26, 0x32	; 50
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e2 e3       	ldi	r30, 0x32	; 50
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	8f 7d       	andi	r24, 0xDF	; 223
    2f0c:	8c 93       	st	X, r24
}
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <LCD_gotoXY>:

void LCD_gotoXY(uint16_t line , uint16_t position)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <LCD_gotoXY+0x6>
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <LCD_gotoXY+0x8>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	7c 83       	std	Y+4, r23	; 0x04
    2f2a:	6b 83       	std	Y+3, r22	; 0x03
	if (line == 1) // line 1
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	91 05       	cpc	r25, r1
    2f34:	51 f4       	brne	.+20     	; 0x2f4a <LCD_gotoXY+0x32>
	{
		if(  position >= 0 && position < 16)
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	80 31       	cpi	r24, 0x10	; 16
    2f3c:	91 05       	cpc	r25, r1
    2f3e:	88 f5       	brcc	.+98     	; 0x2fa2 <LCD_gotoXY+0x8a>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW+position);
    2f40:	8b 81       	ldd	r24, Y+3	; 0x03
    2f42:	80 58       	subi	r24, 0x80	; 128
    2f44:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
    2f48:	2c c0       	rjmp	.+88     	; 0x2fa2 <LCD_gotoXY+0x8a>
	}
	else if (line == 2) //  line 2
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	82 30       	cpi	r24, 0x02	; 2
    2f50:	91 05       	cpc	r25, r1
    2f52:	51 f4       	brne	.+20     	; 0x2f68 <LCD_gotoXY+0x50>
	{
		if(  position >= 0 && position < 16)
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	80 31       	cpi	r24, 0x10	; 16
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	10 f5       	brcc	.+68     	; 0x2fa2 <LCD_gotoXY+0x8a>
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW+position);
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	80 54       	subi	r24, 0x40	; 64
    2f62:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
    2f66:	1d c0       	rjmp	.+58     	; 0x2fa2 <LCD_gotoXY+0x8a>
	}
	else if (line == 3) // line 3
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	83 30       	cpi	r24, 0x03	; 3
    2f6e:	91 05       	cpc	r25, r1
    2f70:	51 f4       	brne	.+20     	; 0x2f86 <LCD_gotoXY+0x6e>
	{
		if(  position >= 0 && position < 16)
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	80 31       	cpi	r24, 0x10	; 16
    2f78:	91 05       	cpc	r25, r1
    2f7a:	98 f4       	brcc	.+38     	; 0x2fa2 <LCD_gotoXY+0x8a>
			LCD_Send_Command(LCD_BEGIN_AT_THIRD_RAW+position);
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	80 57       	subi	r24, 0x70	; 112
    2f80:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
    2f84:	0e c0       	rjmp	.+28     	; 0x2fa2 <LCD_gotoXY+0x8a>
	}
	else if (line == 4) //  line 4
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8a:	84 30       	cpi	r24, 0x04	; 4
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	49 f4       	brne	.+18     	; 0x2fa2 <LCD_gotoXY+0x8a>
	{
		if(  position >= 0 && position < 16)
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	80 31       	cpi	r24, 0x10	; 16
    2f96:	91 05       	cpc	r25, r1
    2f98:	20 f4       	brcc	.+8      	; 0x2fa2 <LCD_gotoXY+0x8a>
			LCD_Send_Command(LCD_BEGIN_AT_FOURTH_RAW+position);
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	80 53       	subi	r24, 0x30	; 48
    2f9e:	0e 94 11 15 	call	0x2a22	; 0x2a22 <LCD_Send_Command>
	}
}
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <LCD_Display_Number>:
void LCD_Display_Number(unsigned int Number)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	28 97       	sbiw	r28, 0x08	; 8
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	98 87       	std	Y+8, r25	; 0x08
    2fc6:	8f 83       	std	Y+7, r24	; 0x07
	char str[6];
	sprintf(str,"%d",Number); //adjust the formatting to your liking
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <LCD_Display_Number+0x1a>
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <LCD_Display_Number+0x1c>
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <LCD_Display_Number+0x1e>
    2fce:	ed b7       	in	r30, 0x3d	; 61
    2fd0:	fe b7       	in	r31, 0x3e	; 62
    2fd2:	31 96       	adiw	r30, 0x01	; 1
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	80 e6       	ldi	r24, 0x60	; 96
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	93 83       	std	Z+3, r25	; 0x03
    2fe2:	82 83       	std	Z+2, r24	; 0x02
    2fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fe6:	98 85       	ldd	r25, Y+8	; 0x08
    2fe8:	95 83       	std	Z+5, r25	; 0x05
    2fea:	84 83       	std	Z+4, r24	; 0x04
    2fec:	0e 94 8f 1c 	call	0x391e	; 0x391e <sprintf>
    2ff0:	8d b7       	in	r24, 0x3d	; 61
    2ff2:	9e b7       	in	r25, 0x3e	; 62
    2ff4:	06 96       	adiw	r24, 0x06	; 6
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	9e bf       	out	0x3e, r25	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	8d bf       	out	0x3d, r24	; 61

	LCD_Send_String(str);
    3000:	ce 01       	movw	r24, r28
    3002:	01 96       	adiw	r24, 0x01	; 1
    3004:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
}
    3008:	28 96       	adiw	r28, 0x08	; 8
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <LCD_Display_Real_Number>:

void LCD_Display_Real_Number(double Number)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	a8 97       	sbiw	r28, 0x28	; 40
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	6f 8f       	std	Y+31, r22	; 0x1f
    3030:	78 a3       	std	Y+32, r23	; 0x20
    3032:	89 a3       	std	Y+33, r24	; 0x21
    3034:	9a a3       	std	Y+34, r25	; 0x22
	char str[16];

	char *tmpsign = (Number < 0) ? "-" : "";
    3036:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3038:	78 a1       	ldd	r23, Y+32	; 0x20
    303a:	89 a1       	ldd	r24, Y+33	; 0x21
    303c:	9a a1       	ldd	r25, Y+34	; 0x22
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	50 e0       	ldi	r21, 0x00	; 0
    3046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    304a:	88 23       	and	r24, r24
    304c:	2c f4       	brge	.+10     	; 0x3058 <LCD_Display_Real_Number+0x3e>
    304e:	23 e6       	ldi	r18, 0x63	; 99
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	38 a7       	std	Y+40, r19	; 0x28
    3054:	2f a3       	std	Y+39, r18	; 0x27
    3056:	04 c0       	rjmp	.+8      	; 0x3060 <LCD_Display_Real_Number+0x46>
    3058:	45 e6       	ldi	r20, 0x65	; 101
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	58 a7       	std	Y+40, r21	; 0x28
    305e:	4f a3       	std	Y+39, r20	; 0x27
    3060:	8f a1       	ldd	r24, Y+39	; 0x27
    3062:	98 a5       	ldd	r25, Y+40	; 0x28
    3064:	9e 87       	std	Y+14, r25	; 0x0e
    3066:	8d 87       	std	Y+13, r24	; 0x0d
	float tmpVal = (Number < 0) ? -Number : Number;
    3068:	6f 8d       	ldd	r22, Y+31	; 0x1f
    306a:	78 a1       	ldd	r23, Y+32	; 0x20
    306c:	89 a1       	ldd	r24, Y+33	; 0x21
    306e:	9a a1       	ldd	r25, Y+34	; 0x22
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	50 e0       	ldi	r21, 0x00	; 0
    3078:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307c:	88 23       	and	r24, r24
    307e:	64 f4       	brge	.+24     	; 0x3098 <LCD_Display_Real_Number+0x7e>
    3080:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3082:	98 a1       	ldd	r25, Y+32	; 0x20
    3084:	a9 a1       	ldd	r26, Y+33	; 0x21
    3086:	ba a1       	ldd	r27, Y+34	; 0x22
    3088:	9c 01       	movw	r18, r24
    308a:	ad 01       	movw	r20, r26
    308c:	50 58       	subi	r21, 0x80	; 128
    308e:	2b a3       	std	Y+35, r18	; 0x23
    3090:	3c a3       	std	Y+36, r19	; 0x24
    3092:	4d a3       	std	Y+37, r20	; 0x25
    3094:	5e a3       	std	Y+38, r21	; 0x26
    3096:	08 c0       	rjmp	.+16     	; 0x30a8 <LCD_Display_Real_Number+0x8e>
    3098:	8f 8d       	ldd	r24, Y+31	; 0x1f
    309a:	98 a1       	ldd	r25, Y+32	; 0x20
    309c:	a9 a1       	ldd	r26, Y+33	; 0x21
    309e:	ba a1       	ldd	r27, Y+34	; 0x22
    30a0:	8b a3       	std	Y+35, r24	; 0x23
    30a2:	9c a3       	std	Y+36, r25	; 0x24
    30a4:	ad a3       	std	Y+37, r26	; 0x25
    30a6:	be a3       	std	Y+38, r27	; 0x26
    30a8:	2b a1       	ldd	r18, Y+35	; 0x23
    30aa:	3c a1       	ldd	r19, Y+36	; 0x24
    30ac:	4d a1       	ldd	r20, Y+37	; 0x25
    30ae:	5e a1       	ldd	r21, Y+38	; 0x26
    30b0:	29 87       	std	Y+9, r18	; 0x09
    30b2:	3a 87       	std	Y+10, r19	; 0x0a
    30b4:	4b 87       	std	Y+11, r20	; 0x0b
    30b6:	5c 87       	std	Y+12, r21	; 0x0c

	int tmpInt1 = tmpVal; //get the integer value 
    30b8:	69 85       	ldd	r22, Y+9	; 0x09
    30ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    30bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    30be:	9c 85       	ldd	r25, Y+12	; 0x0c
    30c0:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	98 87       	std	Y+8, r25	; 0x08
    30ca:	8f 83       	std	Y+7, r24	; 0x07
	float tmpFraction = tmpVal - tmpInt1; // get fraction value
    30cc:	8f 81       	ldd	r24, Y+7	; 0x07
    30ce:	98 85       	ldd	r25, Y+8	; 0x08
    30d0:	aa 27       	eor	r26, r26
    30d2:	97 fd       	sbrc	r25, 7
    30d4:	a0 95       	com	r26
    30d6:	ba 2f       	mov	r27, r26
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    30e0:	9b 01       	movw	r18, r22
    30e2:	ac 01       	movw	r20, r24
    30e4:	69 85       	ldd	r22, Y+9	; 0x09
    30e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    30e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    30ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    30ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	8b 83       	std	Y+3, r24	; 0x03
    30f6:	9c 83       	std	Y+4, r25	; 0x04
    30f8:	ad 83       	std	Y+5, r26	; 0x05
    30fa:	be 83       	std	Y+6, r27	; 0x06
	int tmpInt2 = tmpFraction * 10000; // turn into integer
    30fc:	6b 81       	ldd	r22, Y+3	; 0x03
    30fe:	7c 81       	ldd	r23, Y+4	; 0x04
    3100:	8d 81       	ldd	r24, Y+5	; 0x05
    3102:	9e 81       	ldd	r25, Y+6	; 0x06
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e4       	ldi	r19, 0x40	; 64
    3108:	4c e1       	ldi	r20, 0x1C	; 28
    310a:	56 e4       	ldi	r21, 0x46	; 70
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	9a 83       	std	Y+2, r25	; 0x02
    3122:	89 83       	std	Y+1, r24	; 0x01

	sprintf(str,"$s%d.%04d",tmpsign,tmpInt1,tmpInt2);
    3124:	4d b7       	in	r20, 0x3d	; 61
    3126:	5e b7       	in	r21, 0x3e	; 62
    3128:	4a 50       	subi	r20, 0x0A	; 10
    312a:	50 40       	sbci	r21, 0x00	; 0
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	5e bf       	out	0x3e, r21	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	4d bf       	out	0x3d, r20	; 61
    3136:	ed b7       	in	r30, 0x3d	; 61
    3138:	fe b7       	in	r31, 0x3e	; 62
    313a:	31 96       	adiw	r30, 0x01	; 1
    313c:	ce 01       	movw	r24, r28
    313e:	0f 96       	adiw	r24, 0x0f	; 15
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	80 83       	st	Z, r24
    3144:	86 e6       	ldi	r24, 0x66	; 102
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	93 83       	std	Z+3, r25	; 0x03
    314a:	82 83       	std	Z+2, r24	; 0x02
    314c:	8d 85       	ldd	r24, Y+13	; 0x0d
    314e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3150:	95 83       	std	Z+5, r25	; 0x05
    3152:	84 83       	std	Z+4, r24	; 0x04
    3154:	8f 81       	ldd	r24, Y+7	; 0x07
    3156:	98 85       	ldd	r25, Y+8	; 0x08
    3158:	97 83       	std	Z+7, r25	; 0x07
    315a:	86 83       	std	Z+6, r24	; 0x06
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	91 87       	std	Z+9, r25	; 0x09
    3162:	80 87       	std	Z+8, r24	; 0x08
    3164:	0e 94 8f 1c 	call	0x391e	; 0x391e <sprintf>
    3168:	8d b7       	in	r24, 0x3d	; 61
    316a:	9e b7       	in	r25, 0x3e	; 62
    316c:	0a 96       	adiw	r24, 0x0a	; 10
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	9e bf       	out	0x3e, r25	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	8d bf       	out	0x3d, r24	; 61
	LCD_Send_String(str);
    3178:	ce 01       	movw	r24, r28
    317a:	0f 96       	adiw	r24, 0x0f	; 15
    317c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
}
    3180:	a8 96       	adiw	r28, 0x28	; 40
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <Enter_Gate_ECU1>:
 */
#include "ECU1_TASKS.h"
#include "Servo_Motor.h"

void Enter_Gate_ECU1()
{
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62

	LCD_Clear_Screen();
    319a:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_Clear_Screen>
	LCD_gotoXY(2, 1);
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	61 e0       	ldi	r22, 0x01	; 1
    31a4:	70 e0       	ldi	r23, 0x00	; 0
    31a6:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("Please Enter ID");
    31aa:	80 e7       	ldi	r24, 0x70	; 112
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
	LCD_gotoXY(3, 2);
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	62 e0       	ldi	r22, 0x02	; 2
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("In Card Reader");
    31be:	80 e8       	ldi	r24, 0x80	; 128
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>

	Entered_ID = MCAL_UART_Receive_String();
    31c6:	0e 94 6e 07 	call	0xedc	; 0xedc <MCAL_UART_Receive_String>
    31ca:	90 93 5d 02 	sts	0x025D, r25
    31ce:	80 93 5c 02 	sts	0x025C, r24
	LCD_gotoXY(4, 6);
    31d2:	84 e0       	ldi	r24, 0x04	; 4
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	66 e0       	ldi	r22, 0x06	; 6
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String(Entered_ID);
    31de:	80 91 5c 02 	lds	r24, 0x025C
    31e2:	90 91 5d 02 	lds	r25, 0x025D
    31e6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>

	spi_Send_ID_to_ECU3();
    31ea:	0e 94 03 19 	call	0x3206	; 0x3206 <spi_Send_ID_to_ECU3>

	if(ID_State == '1')
    31ee:	80 91 5e 02 	lds	r24, 0x025E
    31f2:	81 33       	cpi	r24, 0x31	; 49
    31f4:	19 f4       	brne	.+6      	; 0x31fc <Enter_Gate_ECU1+0x6a>
	{
		Correct_ID();
    31f6:	0e 94 1e 19 	call	0x323c	; 0x323c <Correct_ID>
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <Enter_Gate_ECU1+0x6e>
	}else
	{
		Wrong_ID();
    31fc:	0e 94 ca 19 	call	0x3394	; 0x3394 <Wrong_ID>
	}
}
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <spi_Send_ID_to_ECU3>:

void spi_Send_ID_to_ECU3()
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	cd b7       	in	r28, 0x3d	; 61
    320c:	de b7       	in	r29, 0x3e	; 62
	//	Entered_ID = MCAL_UART_Receive_String();

	DIO_SetPinValue(ECU1_EXTI_PORT, ECU1_EXTI_PIN, DIO_PIN_HIGH);
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	62 e0       	ldi	r22, 0x02	; 2
    3212:	41 e0       	ldi	r20, 0x01	; 1
    3214:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>
	MCAL_SPI_Send_String(Entered_ID);
    3218:	80 91 5c 02 	lds	r24, 0x025C
    321c:	90 91 5d 02 	lds	r25, 0x025D
    3220:	0e 94 cf 09 	call	0x139e	; 0x139e <MCAL_SPI_Send_String>
	DIO_SetPinValue(ECU1_EXTI_PORT, ECU1_EXTI_PIN, DIO_PIN_LOW);
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	62 e0       	ldi	r22, 0x02	; 2
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>

	MCAL_SPI_Receive_Data(&ID_State);
    322e:	8e e5       	ldi	r24, 0x5E	; 94
    3230:	92 e0       	ldi	r25, 0x02	; 2
    3232:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <MCAL_SPI_Receive_Data>
}
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <Correct_ID>:

void Correct_ID()
{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	2e 97       	sbiw	r28, 0x0e	; 14
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(GreenLED_PORT, GreenLED_PIN, DIO_PIN_HIGH);
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	61 e0       	ldi	r22, 0x01	; 1
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>
	Open_Gate();
    325a:	0e 94 25 12 	call	0x244a	; 0x244a <Open_Gate>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	a8 e4       	ldi	r26, 0x48	; 72
    3264:	b3 e4       	ldi	r27, 0x43	; 67
    3266:	8b 87       	std	Y+11, r24	; 0x0b
    3268:	9c 87       	std	Y+12, r25	; 0x0c
    326a:	ad 87       	std	Y+13, r26	; 0x0d
    326c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3270:	7c 85       	ldd	r23, Y+12	; 0x0c
    3272:	8d 85       	ldd	r24, Y+13	; 0x0d
    3274:	9e 85       	ldd	r25, Y+14	; 0x0e
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4a ef       	ldi	r20, 0xFA	; 250
    327c:	54 e4       	ldi	r21, 0x44	; 68
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	8f 83       	std	Y+7, r24	; 0x07
    3288:	98 87       	std	Y+8, r25	; 0x08
    328a:	a9 87       	std	Y+9, r26	; 0x09
    328c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    328e:	6f 81       	ldd	r22, Y+7	; 0x07
    3290:	78 85       	ldd	r23, Y+8	; 0x08
    3292:	89 85       	ldd	r24, Y+9	; 0x09
    3294:	9a 85       	ldd	r25, Y+10	; 0x0a
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	40 e8       	ldi	r20, 0x80	; 128
    329c:	5f e3       	ldi	r21, 0x3F	; 63
    329e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a2:	88 23       	and	r24, r24
    32a4:	2c f4       	brge	.+10     	; 0x32b0 <Correct_ID+0x74>
		__ticks = 1;
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	8d 83       	std	Y+5, r24	; 0x05
    32ae:	3f c0       	rjmp	.+126    	; 0x332e <Correct_ID+0xf2>
	else if (__tmp > 65535)
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	3f ef       	ldi	r19, 0xFF	; 255
    32bc:	4f e7       	ldi	r20, 0x7F	; 127
    32be:	57 e4       	ldi	r21, 0x47	; 71
    32c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c4:	18 16       	cp	r1, r24
    32c6:	4c f5       	brge	.+82     	; 0x331a <Correct_ID+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    32cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e2       	ldi	r20, 0x20	; 32
    32d6:	51 e4       	ldi	r21, 0x41	; 65
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	8d 83       	std	Y+5, r24	; 0x05
    32f0:	0f c0       	rjmp	.+30     	; 0x3310 <Correct_ID+0xd4>
    32f2:	88 ec       	ldi	r24, 0xC8	; 200
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	9c 83       	std	Y+4, r25	; 0x04
    32f8:	8b 83       	std	Y+3, r24	; 0x03
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	f1 f7       	brne	.-4      	; 0x32fe <Correct_ID+0xc2>
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3306:	8d 81       	ldd	r24, Y+5	; 0x05
    3308:	9e 81       	ldd	r25, Y+6	; 0x06
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
    3312:	9e 81       	ldd	r25, Y+6	; 0x06
    3314:	00 97       	sbiw	r24, 0x00	; 0
    3316:	69 f7       	brne	.-38     	; 0x32f2 <Correct_ID+0xb6>
    3318:	14 c0       	rjmp	.+40     	; 0x3342 <Correct_ID+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331a:	6f 81       	ldd	r22, Y+7	; 0x07
    331c:	78 85       	ldd	r23, Y+8	; 0x08
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	9a 85       	ldd	r25, Y+10	; 0x0a
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	9a 81       	ldd	r25, Y+2	; 0x02
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <Correct_ID+0xfe>
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_SetPinValue(GreenLED_PORT, GreenLED_PIN, DIO_PIN_LOW);
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	61 e0       	ldi	r22, 0x01	; 1
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>
	LCD_Clear_Screen();
    334c:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_Clear_Screen>
	LCD_Send_String(" Gate Is Opened");
    3350:	8f e8       	ldi	r24, 0x8F	; 143
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
	LCD_gotoXY(3, 2);
    3358:	83 e0       	ldi	r24, 0x03	; 3
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	62 e0       	ldi	r22, 0x02	; 2
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("move your car");
    3364:	8f e9       	ldi	r24, 0x9F	; 159
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
	while(READBIT(PINB , 0)); /* ====== wait until car leave its place and enter the parking (PIR Sensor) ====== */
    336c:	e6 e3       	ldi	r30, 0x36	; 54
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	81 70       	andi	r24, 0x01	; 1
    3378:	90 70       	andi	r25, 0x00	; 0
    337a:	88 23       	and	r24, r24
    337c:	b9 f7       	brne	.-18     	; 0x336c <Correct_ID+0x130>
	Close_Gate();
    337e:	0e 94 2f 12 	call	0x245e	; 0x245e <Close_Gate>
}
    3382:	2e 96       	adiw	r28, 0x0e	; 14
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	cd bf       	out	0x3d, r28	; 61
    338e:	cf 91       	pop	r28
    3390:	df 91       	pop	r29
    3392:	08 95       	ret

00003394 <Wrong_ID>:

void Wrong_ID()
{
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	2e 97       	sbiw	r28, 0x0e	; 14
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(RedLED_PORT, RedLED_PIN, DIO_PIN_HIGH);
    33a8:	82 e0       	ldi	r24, 0x02	; 2
    33aa:	62 e0       	ldi	r22, 0x02	; 2
    33ac:	41 e0       	ldi	r20, 0x01	; 1
    33ae:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>
	Play_Buzzer();
    33b2:	0e 94 67 1a 	call	0x34ce	; 0x34ce <Play_Buzzer>
	LCD_Clear_Screen();
    33b6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_Clear_Screen>
	LCD_gotoXY(2, 1);
    33ba:	82 e0       	ldi	r24, 0x02	; 2
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	61 e0       	ldi	r22, 0x01	; 1
    33c0:	70 e0       	ldi	r23, 0x00	; 0
    33c2:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("Unauthorized ID");
    33c6:	8d ea       	ldi	r24, 0xAD	; 173
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	a8 e4       	ldi	r26, 0x48	; 72
    33d4:	b3 e4       	ldi	r27, 0x43	; 67
    33d6:	8b 87       	std	Y+11, r24	; 0x0b
    33d8:	9c 87       	std	Y+12, r25	; 0x0c
    33da:	ad 87       	std	Y+13, r26	; 0x0d
    33dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33de:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	4a ef       	ldi	r20, 0xFA	; 250
    33ec:	54 e4       	ldi	r21, 0x44	; 68
    33ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8f 83       	std	Y+7, r24	; 0x07
    33f8:	98 87       	std	Y+8, r25	; 0x08
    33fa:	a9 87       	std	Y+9, r26	; 0x09
    33fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3400:	78 85       	ldd	r23, Y+8	; 0x08
    3402:	89 85       	ldd	r24, Y+9	; 0x09
    3404:	9a 85       	ldd	r25, Y+10	; 0x0a
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e8       	ldi	r20, 0x80	; 128
    340c:	5f e3       	ldi	r21, 0x3F	; 63
    340e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3412:	88 23       	and	r24, r24
    3414:	2c f4       	brge	.+10     	; 0x3420 <Wrong_ID+0x8c>
		__ticks = 1;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9e 83       	std	Y+6, r25	; 0x06
    341c:	8d 83       	std	Y+5, r24	; 0x05
    341e:	3f c0       	rjmp	.+126    	; 0x349e <Wrong_ID+0x10a>
	else if (__tmp > 65535)
    3420:	6f 81       	ldd	r22, Y+7	; 0x07
    3422:	78 85       	ldd	r23, Y+8	; 0x08
    3424:	89 85       	ldd	r24, Y+9	; 0x09
    3426:	9a 85       	ldd	r25, Y+10	; 0x0a
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	3f ef       	ldi	r19, 0xFF	; 255
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	57 e4       	ldi	r21, 0x47	; 71
    3430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	4c f5       	brge	.+82     	; 0x348a <Wrong_ID+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3438:	6b 85       	ldd	r22, Y+11	; 0x0b
    343a:	7c 85       	ldd	r23, Y+12	; 0x0c
    343c:	8d 85       	ldd	r24, Y+13	; 0x0d
    343e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e2       	ldi	r20, 0x20	; 32
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	bc 01       	movw	r22, r24
    3452:	cd 01       	movw	r24, r26
    3454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	9e 83       	std	Y+6, r25	; 0x06
    345e:	8d 83       	std	Y+5, r24	; 0x05
    3460:	0f c0       	rjmp	.+30     	; 0x3480 <Wrong_ID+0xec>
    3462:	88 ec       	ldi	r24, 0xC8	; 200
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	9c 81       	ldd	r25, Y+4	; 0x04
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <Wrong_ID+0xda>
    3472:	9c 83       	std	Y+4, r25	; 0x04
    3474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3480:	8d 81       	ldd	r24, Y+5	; 0x05
    3482:	9e 81       	ldd	r25, Y+6	; 0x06
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	69 f7       	brne	.-38     	; 0x3462 <Wrong_ID+0xce>
    3488:	14 c0       	rjmp	.+40     	; 0x34b2 <Wrong_ID+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348a:	6f 81       	ldd	r22, Y+7	; 0x07
    348c:	78 85       	ldd	r23, Y+8	; 0x08
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <Wrong_ID+0x116>
    34ae:	9a 83       	std	Y+2, r25	; 0x02
    34b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_SetPinValue(RedLED_PORT, RedLED_PIN, DIO_PIN_LOW);
    34b2:	82 e0       	ldi	r24, 0x02	; 2
    34b4:	62 e0       	ldi	r22, 0x02	; 2
    34b6:	40 e0       	ldi	r20, 0x00	; 0
    34b8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>
}
    34bc:	2e 96       	adiw	r28, 0x0e	; 14
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	08 95       	ret

000034ce <Play_Buzzer>:

void Play_Buzzer()
{
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	2e 97       	sbiw	r28, 0x0e	; 14
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(Buzzer_PORT, Buzzer_PIN, DIO_PIN_HIGH);
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a8 e4       	ldi	r26, 0x48	; 72
    34f2:	b3 e4       	ldi	r27, 0x43	; 67
    34f4:	8b 87       	std	Y+11, r24	; 0x0b
    34f6:	9c 87       	std	Y+12, r25	; 0x0c
    34f8:	ad 87       	std	Y+13, r26	; 0x0d
    34fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3500:	8d 85       	ldd	r24, Y+13	; 0x0d
    3502:	9e 85       	ldd	r25, Y+14	; 0x0e
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	4a ef       	ldi	r20, 0xFA	; 250
    350a:	54 e4       	ldi	r21, 0x44	; 68
    350c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	8f 83       	std	Y+7, r24	; 0x07
    3516:	98 87       	std	Y+8, r25	; 0x08
    3518:	a9 87       	std	Y+9, r26	; 0x09
    351a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    351c:	6f 81       	ldd	r22, Y+7	; 0x07
    351e:	78 85       	ldd	r23, Y+8	; 0x08
    3520:	89 85       	ldd	r24, Y+9	; 0x09
    3522:	9a 85       	ldd	r25, Y+10	; 0x0a
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	2c f4       	brge	.+10     	; 0x353e <Play_Buzzer+0x70>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	3f c0       	rjmp	.+126    	; 0x35bc <Play_Buzzer+0xee>
	else if (__tmp > 65535)
    353e:	6f 81       	ldd	r22, Y+7	; 0x07
    3540:	78 85       	ldd	r23, Y+8	; 0x08
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	9a 85       	ldd	r25, Y+10	; 0x0a
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	4c f5       	brge	.+82     	; 0x35a8 <Play_Buzzer+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	6b 85       	ldd	r22, Y+11	; 0x0b
    3558:	7c 85       	ldd	r23, Y+12	; 0x0c
    355a:	8d 85       	ldd	r24, Y+13	; 0x0d
    355c:	9e 85       	ldd	r25, Y+14	; 0x0e
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
    357e:	0f c0       	rjmp	.+30     	; 0x359e <Play_Buzzer+0xd0>
    3580:	88 ec       	ldi	r24, 0xC8	; 200
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9c 83       	std	Y+4, r25	; 0x04
    3586:	8b 83       	std	Y+3, r24	; 0x03
    3588:	8b 81       	ldd	r24, Y+3	; 0x03
    358a:	9c 81       	ldd	r25, Y+4	; 0x04
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <Play_Buzzer+0xbe>
    3590:	9c 83       	std	Y+4, r25	; 0x04
    3592:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	8d 81       	ldd	r24, Y+5	; 0x05
    3596:	9e 81       	ldd	r25, Y+6	; 0x06
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	9e 83       	std	Y+6, r25	; 0x06
    359c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	9e 81       	ldd	r25, Y+6	; 0x06
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	69 f7       	brne	.-38     	; 0x3580 <Play_Buzzer+0xb2>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <Play_Buzzer+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	6f 81       	ldd	r22, Y+7	; 0x07
    35aa:	78 85       	ldd	r23, Y+8	; 0x08
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	8d 81       	ldd	r24, Y+5	; 0x05
    35be:	9e 81       	ldd	r25, Y+6	; 0x06
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <Play_Buzzer+0xfa>
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_SetPinValue(Buzzer_PORT, Buzzer_PIN, DIO_PIN_LOW);
    35d0:	82 e0       	ldi	r24, 0x02	; 2
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	40 e0       	ldi	r20, 0x00	; 0
    35d6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <DIO_SetPinValue>

}
    35da:	2e 96       	adiw	r28, 0x0e	; 14
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <init_Some_Pins>:

void init_Some_Pins()
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
	/* --------------- ECU1 EXTI Init --------------- */
	DIO_SetPinDirection(ECU1_EXTI_PORT, ECU1_EXTI_PIN, DIO_PIN_OUTPUT);
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	62 e0       	ldi	r22, 0x02	; 2
    35f8:	41 e0       	ldi	r20, 0x01	; 1
    35fa:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_SetPinDirection>


	/* --------------- Correct & Wrong ID LED Init --------------- */
	DIO_SetPinDirection(GreenLED_PORT, GreenLED_PIN, DIO_PIN_OUTPUT); // init green led for correct ID
    35fe:	82 e0       	ldi	r24, 0x02	; 2
    3600:	61 e0       	ldi	r22, 0x01	; 1
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_SetPinDirection>
	DIO_SetPinDirection(RedLED_PORT, RedLED_PIN, DIO_PIN_OUTPUT); // init Red   led for Wrong   ID
    3608:	82 e0       	ldi	r24, 0x02	; 2
    360a:	62 e0       	ldi	r22, 0x02	; 2
    360c:	41 e0       	ldi	r20, 0x01	; 1
    360e:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_SetPinDirection>

	/* --------------- Init Buzzer for Wrong ID  --------------- */
	DIO_SetPinDirection(Buzzer_PORT, Buzzer_PIN, DIO_PIN_OUTPUT); // init Bezzer	for Wrong   ID
    3612:	82 e0       	ldi	r24, 0x02	; 2
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_SetPinDirection>

	/* --------------- Init PIR Sensor  --------------- */
	DIO_SetPinDirection(DIO_PORTB, DIO_PIN0, DIO_PIN_INPUT); // init Bezzer	for Wrong   ID
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <DIO_SetPinDirection>
}
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <ECU1_UART_init>:


void ECU1_UART_init()
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	28 97       	sbiw	r28, 0x08	; 8
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
	/* --------------- UART configuration (init RFID Cart) --------------- */
	UART_Config_t ECU1_uart_cfg;
	ECU1_uart_cfg.UART_MODE = UART_MODE_Receiver;
    3640:	80 e1       	ldi	r24, 0x10	; 16
    3642:	89 83       	std	Y+1, r24	; 0x01
	ECU1_uart_cfg.UART_BaudRate = UART_BaudRate_9600;
    3644:	83 e3       	ldi	r24, 0x33	; 51
    3646:	8a 83       	std	Y+2, r24	; 0x02
	ECU1_uart_cfg.UART_DATA_SIZE = UART_DATA_SIZE_8bit;
    3648:	86 e0       	ldi	r24, 0x06	; 6
    364a:	8b 83       	std	Y+3, r24	; 0x03
	ECU1_uart_cfg.UART_Parity_Mode = UART_Parity_Mode_disable;
    364c:	1c 82       	std	Y+4, r1	; 0x04
	ECU1_uart_cfg.UART_STOP_Bit = UART_STOP_Bit_1BIT;
    364e:	1d 82       	std	Y+5, r1	; 0x05
	ECU1_uart_cfg.UART_IRQ = UART_IRQ_disable;
    3650:	1e 82       	std	Y+6, r1	; 0x06
	ECU1_uart_cfg.P_IRQ_CallBack = 0;
    3652:	18 86       	std	Y+8, r1	; 0x08
    3654:	1f 82       	std	Y+7, r1	; 0x07

	MCAL_UART_Init(&ECU1_uart_cfg);
    3656:	ce 01       	movw	r24, r28
    3658:	01 96       	adiw	r24, 0x01	; 1
    365a:	0e 94 50 06 	call	0xca0	; 0xca0 <MCAL_UART_Init>
}
    365e:	28 96       	adiw	r28, 0x08	; 8
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	f8 94       	cli
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	0f be       	out	0x3f, r0	; 63
    3668:	cd bf       	out	0x3d, r28	; 61
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <ECU1_SPI_init>:
void ECU1_SPI_init()
{
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	29 97       	sbiw	r28, 0x09	; 9
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	f8 94       	cli
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	cd bf       	out	0x3d, r28	; 61
	/* --------------- SPI configuration --------------- */
	SPI_Config_t ECU1_spi_cfg;

	ECU1_spi_cfg.SPI_prescaler = SPI_prescaler_DOUBLE_SPEED_8;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	8a 83       	std	Y+2, r24	; 0x02
	ECU1_spi_cfg.SPI_Data_Order = SPI_Data_Order_MSB;
    3688:	1c 82       	std	Y+4, r1	; 0x04
	ECU1_spi_cfg.SPI_CLK_Phase = SPI_CLK_Phase_Trailing;
    368a:	84 e0       	ldi	r24, 0x04	; 4
    368c:	8e 83       	std	Y+6, r24	; 0x06
	ECU1_spi_cfg.SPI_CLK_Polarity = SPI_CLK_Polarity_idle_high;
    368e:	88 e0       	ldi	r24, 0x08	; 8
    3690:	8d 83       	std	Y+5, r24	; 0x05
	ECU1_spi_cfg.SPI_Double_Speed = SPI_Double_Speed_Enable;
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	8b 83       	std	Y+3, r24	; 0x03
	ECU1_spi_cfg.SPI_IRQ = SPI_IRQ_Disable;
	ECU1_spi_cfg.P_IRQ_CallBack = 0;
#endif

#ifdef MCU_ACT_As_Slave
	ECU1_spi_cfg.SPI_MODE = SPI_MODE_Slave;
    3696:	19 82       	std	Y+1, r1	; 0x01
	ECU1_spi_cfg.SPI_IRQ = SPI_IRQ_Disable;
    3698:	1f 82       	std	Y+7, r1	; 0x07
	ECU1_spi_cfg.P_IRQ_CallBack = 0;
    369a:	19 86       	std	Y+9, r1	; 0x09
    369c:	18 86       	std	Y+8, r1	; 0x08
#endif

	MCAL_SPI_Init(&ECU1_spi_cfg);
    369e:	ce 01       	movw	r24, r28
    36a0:	01 96       	adiw	r24, 0x01	; 1
    36a2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <MCAL_SPI_Init>

}
    36a6:	29 96       	adiw	r28, 0x09	; 9
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <main>:
#include "i2c_slave.h"



int main(void)
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	2e 97       	sbiw	r28, 0x0e	; 14
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
	ECU1_UART_init();
    36cc:	0e 94 16 1b 	call	0x362c	; 0x362c <ECU1_UART_init>
	ECU1_SPI_init();
    36d0:	0e 94 38 1b 	call	0x3670	; 0x3670 <ECU1_SPI_init>
	servo_Motor_Init();
    36d4:	0e 94 0b 12 	call	0x2416	; 0x2416 <servo_Motor_Init>
	LCD_Init();
    36d8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_Init>

	/* --------------- init green,red pin & Buzzer & EXTI --------------- */
	init_Some_Pins();
    36dc:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <init_Some_Pins>


	/* ======== welcome message ========= */
	LCD_Clear_Screen();
    36e0:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <LCD_Clear_Screen>
	LCD_gotoXY(1, 3);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	63 e0       	ldi	r22, 0x03	; 3
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("Welcome in");
    36f0:	8d eb       	ldi	r24, 0xBD	; 189
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
	LCD_gotoXY(2, 1);
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	61 e0       	ldi	r22, 0x01	; 1
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("Mohamed Belal's");
    3704:	88 ec       	ldi	r24, 0xC8	; 200
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
	LCD_gotoXY(3, 2);
    370c:	83 e0       	ldi	r24, 0x03	; 3
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	62 e0       	ldi	r22, 0x02	; 2
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("Smart Private");
    3718:	88 ed       	ldi	r24, 0xD8	; 216
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
	LCD_gotoXY(4, 5);
    3720:	84 e0       	ldi	r24, 0x04	; 4
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	65 e0       	ldi	r22, 0x05	; 5
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <LCD_gotoXY>
	LCD_Send_String("Parking");
    372c:	86 ee       	ldi	r24, 0xE6	; 230
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	0e 94 42 16 	call	0x2c84	; 0x2c84 <LCD_Send_String>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	a6 e9       	ldi	r26, 0x96	; 150
    373a:	b3 e4       	ldi	r27, 0x43	; 67
    373c:	8b 87       	std	Y+11, r24	; 0x0b
    373e:	9c 87       	std	Y+12, r25	; 0x0c
    3740:	ad 87       	std	Y+13, r26	; 0x0d
    3742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3744:	6b 85       	ldd	r22, Y+11	; 0x0b
    3746:	7c 85       	ldd	r23, Y+12	; 0x0c
    3748:	8d 85       	ldd	r24, Y+13	; 0x0d
    374a:	9e 85       	ldd	r25, Y+14	; 0x0e
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	4a ef       	ldi	r20, 0xFA	; 250
    3752:	54 e4       	ldi	r21, 0x44	; 68
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	8f 83       	std	Y+7, r24	; 0x07
    375e:	98 87       	std	Y+8, r25	; 0x08
    3760:	a9 87       	std	Y+9, r26	; 0x09
    3762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3764:	6f 81       	ldd	r22, Y+7	; 0x07
    3766:	78 85       	ldd	r23, Y+8	; 0x08
    3768:	89 85       	ldd	r24, Y+9	; 0x09
    376a:	9a 85       	ldd	r25, Y+10	; 0x0a
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e8       	ldi	r20, 0x80	; 128
    3772:	5f e3       	ldi	r21, 0x3F	; 63
    3774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3778:	88 23       	and	r24, r24
    377a:	2c f4       	brge	.+10     	; 0x3786 <main+0xce>
		__ticks = 1;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	9e 83       	std	Y+6, r25	; 0x06
    3782:	8d 83       	std	Y+5, r24	; 0x05
    3784:	3f c0       	rjmp	.+126    	; 0x3804 <main+0x14c>
	else if (__tmp > 65535)
    3786:	6f 81       	ldd	r22, Y+7	; 0x07
    3788:	78 85       	ldd	r23, Y+8	; 0x08
    378a:	89 85       	ldd	r24, Y+9	; 0x09
    378c:	9a 85       	ldd	r25, Y+10	; 0x0a
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	3f ef       	ldi	r19, 0xFF	; 255
    3792:	4f e7       	ldi	r20, 0x7F	; 127
    3794:	57 e4       	ldi	r21, 0x47	; 71
    3796:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    379a:	18 16       	cp	r1, r24
    379c:	4c f5       	brge	.+82     	; 0x37f0 <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379e:	6b 85       	ldd	r22, Y+11	; 0x0b
    37a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e2       	ldi	r20, 0x20	; 32
    37ac:	51 e4       	ldi	r21, 0x41	; 65
    37ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	9e 83       	std	Y+6, r25	; 0x06
    37c4:	8d 83       	std	Y+5, r24	; 0x05
    37c6:	0f c0       	rjmp	.+30     	; 0x37e6 <main+0x12e>
    37c8:	88 ec       	ldi	r24, 0xC8	; 200
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	9c 83       	std	Y+4, r25	; 0x04
    37ce:	8b 83       	std	Y+3, r24	; 0x03
    37d0:	8b 81       	ldd	r24, Y+3	; 0x03
    37d2:	9c 81       	ldd	r25, Y+4	; 0x04
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <main+0x11c>
    37d8:	9c 83       	std	Y+4, r25	; 0x04
    37da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37dc:	8d 81       	ldd	r24, Y+5	; 0x05
    37de:	9e 81       	ldd	r25, Y+6	; 0x06
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	9e 83       	std	Y+6, r25	; 0x06
    37e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e6:	8d 81       	ldd	r24, Y+5	; 0x05
    37e8:	9e 81       	ldd	r25, Y+6	; 0x06
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	69 f7       	brne	.-38     	; 0x37c8 <main+0x110>
    37ee:	14 c0       	rjmp	.+40     	; 0x3818 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f0:	6f 81       	ldd	r22, Y+7	; 0x07
    37f2:	78 85       	ldd	r23, Y+8	; 0x08
    37f4:	89 85       	ldd	r24, Y+9	; 0x09
    37f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	9e 83       	std	Y+6, r25	; 0x06
    3802:	8d 83       	std	Y+5, r24	; 0x05
    3804:	8d 81       	ldd	r24, Y+5	; 0x05
    3806:	9e 81       	ldd	r25, Y+6	; 0x06
    3808:	9a 83       	std	Y+2, r25	; 0x02
    380a:	89 83       	std	Y+1, r24	; 0x01
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	9a 81       	ldd	r25, Y+2	; 0x02
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <main+0x158>
    3814:	9a 83       	std	Y+2, r25	; 0x02
    3816:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

	while(1)
	{
		Enter_Gate_ECU1();
    3818:	0e 94 c9 18 	call	0x3192	; 0x3192 <Enter_Gate_ECU1>
    381c:	fd cf       	rjmp	.-6      	; 0x3818 <main+0x160>

0000381e <__divmodhi4>:
    381e:	97 fb       	bst	r25, 7
    3820:	09 2e       	mov	r0, r25
    3822:	07 26       	eor	r0, r23
    3824:	0a d0       	rcall	.+20     	; 0x383a <__divmodhi4_neg1>
    3826:	77 fd       	sbrc	r23, 7
    3828:	04 d0       	rcall	.+8      	; 0x3832 <__divmodhi4_neg2>
    382a:	2e d0       	rcall	.+92     	; 0x3888 <__udivmodhi4>
    382c:	06 d0       	rcall	.+12     	; 0x383a <__divmodhi4_neg1>
    382e:	00 20       	and	r0, r0
    3830:	1a f4       	brpl	.+6      	; 0x3838 <__divmodhi4_exit>

00003832 <__divmodhi4_neg2>:
    3832:	70 95       	com	r23
    3834:	61 95       	neg	r22
    3836:	7f 4f       	sbci	r23, 0xFF	; 255

00003838 <__divmodhi4_exit>:
    3838:	08 95       	ret

0000383a <__divmodhi4_neg1>:
    383a:	f6 f7       	brtc	.-4      	; 0x3838 <__divmodhi4_exit>
    383c:	90 95       	com	r25
    383e:	81 95       	neg	r24
    3840:	9f 4f       	sbci	r25, 0xFF	; 255
    3842:	08 95       	ret

00003844 <__udivmodsi4>:
    3844:	a1 e2       	ldi	r26, 0x21	; 33
    3846:	1a 2e       	mov	r1, r26
    3848:	aa 1b       	sub	r26, r26
    384a:	bb 1b       	sub	r27, r27
    384c:	fd 01       	movw	r30, r26
    384e:	0d c0       	rjmp	.+26     	; 0x386a <__udivmodsi4_ep>

00003850 <__udivmodsi4_loop>:
    3850:	aa 1f       	adc	r26, r26
    3852:	bb 1f       	adc	r27, r27
    3854:	ee 1f       	adc	r30, r30
    3856:	ff 1f       	adc	r31, r31
    3858:	a2 17       	cp	r26, r18
    385a:	b3 07       	cpc	r27, r19
    385c:	e4 07       	cpc	r30, r20
    385e:	f5 07       	cpc	r31, r21
    3860:	20 f0       	brcs	.+8      	; 0x386a <__udivmodsi4_ep>
    3862:	a2 1b       	sub	r26, r18
    3864:	b3 0b       	sbc	r27, r19
    3866:	e4 0b       	sbc	r30, r20
    3868:	f5 0b       	sbc	r31, r21

0000386a <__udivmodsi4_ep>:
    386a:	66 1f       	adc	r22, r22
    386c:	77 1f       	adc	r23, r23
    386e:	88 1f       	adc	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	1a 94       	dec	r1
    3874:	69 f7       	brne	.-38     	; 0x3850 <__udivmodsi4_loop>
    3876:	60 95       	com	r22
    3878:	70 95       	com	r23
    387a:	80 95       	com	r24
    387c:	90 95       	com	r25
    387e:	9b 01       	movw	r18, r22
    3880:	ac 01       	movw	r20, r24
    3882:	bd 01       	movw	r22, r26
    3884:	cf 01       	movw	r24, r30
    3886:	08 95       	ret

00003888 <__udivmodhi4>:
    3888:	aa 1b       	sub	r26, r26
    388a:	bb 1b       	sub	r27, r27
    388c:	51 e1       	ldi	r21, 0x11	; 17
    388e:	07 c0       	rjmp	.+14     	; 0x389e <__udivmodhi4_ep>

00003890 <__udivmodhi4_loop>:
    3890:	aa 1f       	adc	r26, r26
    3892:	bb 1f       	adc	r27, r27
    3894:	a6 17       	cp	r26, r22
    3896:	b7 07       	cpc	r27, r23
    3898:	10 f0       	brcs	.+4      	; 0x389e <__udivmodhi4_ep>
    389a:	a6 1b       	sub	r26, r22
    389c:	b7 0b       	sbc	r27, r23

0000389e <__udivmodhi4_ep>:
    389e:	88 1f       	adc	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	5a 95       	dec	r21
    38a4:	a9 f7       	brne	.-22     	; 0x3890 <__udivmodhi4_loop>
    38a6:	80 95       	com	r24
    38a8:	90 95       	com	r25
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	08 95       	ret

000038b0 <__prologue_saves__>:
    38b0:	2f 92       	push	r2
    38b2:	3f 92       	push	r3
    38b4:	4f 92       	push	r4
    38b6:	5f 92       	push	r5
    38b8:	6f 92       	push	r6
    38ba:	7f 92       	push	r7
    38bc:	8f 92       	push	r8
    38be:	9f 92       	push	r9
    38c0:	af 92       	push	r10
    38c2:	bf 92       	push	r11
    38c4:	cf 92       	push	r12
    38c6:	df 92       	push	r13
    38c8:	ef 92       	push	r14
    38ca:	ff 92       	push	r15
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	ca 1b       	sub	r28, r26
    38da:	db 0b       	sbc	r29, r27
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	09 94       	ijmp

000038e8 <__epilogue_restores__>:
    38e8:	2a 88       	ldd	r2, Y+18	; 0x12
    38ea:	39 88       	ldd	r3, Y+17	; 0x11
    38ec:	48 88       	ldd	r4, Y+16	; 0x10
    38ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    38f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    38f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    38f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    38f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    38f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    38fa:	b9 84       	ldd	r11, Y+9	; 0x09
    38fc:	c8 84       	ldd	r12, Y+8	; 0x08
    38fe:	df 80       	ldd	r13, Y+7	; 0x07
    3900:	ee 80       	ldd	r14, Y+6	; 0x06
    3902:	fd 80       	ldd	r15, Y+5	; 0x05
    3904:	0c 81       	ldd	r16, Y+4	; 0x04
    3906:	1b 81       	ldd	r17, Y+3	; 0x03
    3908:	aa 81       	ldd	r26, Y+2	; 0x02
    390a:	b9 81       	ldd	r27, Y+1	; 0x01
    390c:	ce 0f       	add	r28, r30
    390e:	d1 1d       	adc	r29, r1
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	ed 01       	movw	r28, r26
    391c:	08 95       	ret

0000391e <sprintf>:
    391e:	ae e0       	ldi	r26, 0x0E	; 14
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e5 e9       	ldi	r30, 0x95	; 149
    3924:	fc e1       	ldi	r31, 0x1C	; 28
    3926:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__prologue_saves__+0x1c>
    392a:	0d 89       	ldd	r16, Y+21	; 0x15
    392c:	1e 89       	ldd	r17, Y+22	; 0x16
    392e:	86 e0       	ldi	r24, 0x06	; 6
    3930:	8c 83       	std	Y+4, r24	; 0x04
    3932:	1a 83       	std	Y+2, r17	; 0x02
    3934:	09 83       	std	Y+1, r16	; 0x01
    3936:	8f ef       	ldi	r24, 0xFF	; 255
    3938:	9f e7       	ldi	r25, 0x7F	; 127
    393a:	9e 83       	std	Y+6, r25	; 0x06
    393c:	8d 83       	std	Y+5, r24	; 0x05
    393e:	9e 01       	movw	r18, r28
    3940:	27 5e       	subi	r18, 0xE7	; 231
    3942:	3f 4f       	sbci	r19, 0xFF	; 255
    3944:	ce 01       	movw	r24, r28
    3946:	01 96       	adiw	r24, 0x01	; 1
    3948:	6f 89       	ldd	r22, Y+23	; 0x17
    394a:	78 8d       	ldd	r23, Y+24	; 0x18
    394c:	a9 01       	movw	r20, r18
    394e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <vfprintf>
    3952:	2f 81       	ldd	r18, Y+7	; 0x07
    3954:	38 85       	ldd	r19, Y+8	; 0x08
    3956:	02 0f       	add	r16, r18
    3958:	13 1f       	adc	r17, r19
    395a:	f8 01       	movw	r30, r16
    395c:	10 82       	st	Z, r1
    395e:	2e 96       	adiw	r28, 0x0e	; 14
    3960:	e4 e0       	ldi	r30, 0x04	; 4
    3962:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__epilogue_restores__+0x1c>

00003966 <vfprintf>:
    3966:	ab e0       	ldi	r26, 0x0B	; 11
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e9 eb       	ldi	r30, 0xB9	; 185
    396c:	fc e1       	ldi	r31, 0x1C	; 28
    396e:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__prologue_saves__>
    3972:	3c 01       	movw	r6, r24
    3974:	2b 01       	movw	r4, r22
    3976:	5a 01       	movw	r10, r20
    3978:	fc 01       	movw	r30, r24
    397a:	17 82       	std	Z+7, r1	; 0x07
    397c:	16 82       	std	Z+6, r1	; 0x06
    397e:	83 81       	ldd	r24, Z+3	; 0x03
    3980:	81 fd       	sbrc	r24, 1
    3982:	03 c0       	rjmp	.+6      	; 0x398a <vfprintf+0x24>
    3984:	6f ef       	ldi	r22, 0xFF	; 255
    3986:	7f ef       	ldi	r23, 0xFF	; 255
    3988:	c6 c1       	rjmp	.+908    	; 0x3d16 <vfprintf+0x3b0>
    398a:	9a e0       	ldi	r25, 0x0A	; 10
    398c:	89 2e       	mov	r8, r25
    398e:	1e 01       	movw	r2, r28
    3990:	08 94       	sec
    3992:	21 1c       	adc	r2, r1
    3994:	31 1c       	adc	r3, r1
    3996:	f3 01       	movw	r30, r6
    3998:	23 81       	ldd	r18, Z+3	; 0x03
    399a:	f2 01       	movw	r30, r4
    399c:	23 fd       	sbrc	r18, 3
    399e:	85 91       	lpm	r24, Z+
    39a0:	23 ff       	sbrs	r18, 3
    39a2:	81 91       	ld	r24, Z+
    39a4:	2f 01       	movw	r4, r30
    39a6:	88 23       	and	r24, r24
    39a8:	09 f4       	brne	.+2      	; 0x39ac <vfprintf+0x46>
    39aa:	b2 c1       	rjmp	.+868    	; 0x3d10 <vfprintf+0x3aa>
    39ac:	85 32       	cpi	r24, 0x25	; 37
    39ae:	39 f4       	brne	.+14     	; 0x39be <vfprintf+0x58>
    39b0:	23 fd       	sbrc	r18, 3
    39b2:	85 91       	lpm	r24, Z+
    39b4:	23 ff       	sbrs	r18, 3
    39b6:	81 91       	ld	r24, Z+
    39b8:	2f 01       	movw	r4, r30
    39ba:	85 32       	cpi	r24, 0x25	; 37
    39bc:	29 f4       	brne	.+10     	; 0x39c8 <vfprintf+0x62>
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	b3 01       	movw	r22, r6
    39c2:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    39c6:	e7 cf       	rjmp	.-50     	; 0x3996 <vfprintf+0x30>
    39c8:	98 2f       	mov	r25, r24
    39ca:	ff 24       	eor	r15, r15
    39cc:	ee 24       	eor	r14, r14
    39ce:	99 24       	eor	r9, r9
    39d0:	ff e1       	ldi	r31, 0x1F	; 31
    39d2:	ff 15       	cp	r31, r15
    39d4:	d0 f0       	brcs	.+52     	; 0x3a0a <vfprintf+0xa4>
    39d6:	9b 32       	cpi	r25, 0x2B	; 43
    39d8:	69 f0       	breq	.+26     	; 0x39f4 <vfprintf+0x8e>
    39da:	9c 32       	cpi	r25, 0x2C	; 44
    39dc:	28 f4       	brcc	.+10     	; 0x39e8 <vfprintf+0x82>
    39de:	90 32       	cpi	r25, 0x20	; 32
    39e0:	59 f0       	breq	.+22     	; 0x39f8 <vfprintf+0x92>
    39e2:	93 32       	cpi	r25, 0x23	; 35
    39e4:	91 f4       	brne	.+36     	; 0x3a0a <vfprintf+0xa4>
    39e6:	0e c0       	rjmp	.+28     	; 0x3a04 <vfprintf+0x9e>
    39e8:	9d 32       	cpi	r25, 0x2D	; 45
    39ea:	49 f0       	breq	.+18     	; 0x39fe <vfprintf+0x98>
    39ec:	90 33       	cpi	r25, 0x30	; 48
    39ee:	69 f4       	brne	.+26     	; 0x3a0a <vfprintf+0xa4>
    39f0:	41 e0       	ldi	r20, 0x01	; 1
    39f2:	24 c0       	rjmp	.+72     	; 0x3a3c <vfprintf+0xd6>
    39f4:	52 e0       	ldi	r21, 0x02	; 2
    39f6:	f5 2a       	or	r15, r21
    39f8:	84 e0       	ldi	r24, 0x04	; 4
    39fa:	f8 2a       	or	r15, r24
    39fc:	28 c0       	rjmp	.+80     	; 0x3a4e <vfprintf+0xe8>
    39fe:	98 e0       	ldi	r25, 0x08	; 8
    3a00:	f9 2a       	or	r15, r25
    3a02:	25 c0       	rjmp	.+74     	; 0x3a4e <vfprintf+0xe8>
    3a04:	e0 e1       	ldi	r30, 0x10	; 16
    3a06:	fe 2a       	or	r15, r30
    3a08:	22 c0       	rjmp	.+68     	; 0x3a4e <vfprintf+0xe8>
    3a0a:	f7 fc       	sbrc	r15, 7
    3a0c:	29 c0       	rjmp	.+82     	; 0x3a60 <vfprintf+0xfa>
    3a0e:	89 2f       	mov	r24, r25
    3a10:	80 53       	subi	r24, 0x30	; 48
    3a12:	8a 30       	cpi	r24, 0x0A	; 10
    3a14:	70 f4       	brcc	.+28     	; 0x3a32 <vfprintf+0xcc>
    3a16:	f6 fe       	sbrs	r15, 6
    3a18:	05 c0       	rjmp	.+10     	; 0x3a24 <vfprintf+0xbe>
    3a1a:	98 9c       	mul	r9, r8
    3a1c:	90 2c       	mov	r9, r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	98 0e       	add	r9, r24
    3a22:	15 c0       	rjmp	.+42     	; 0x3a4e <vfprintf+0xe8>
    3a24:	e8 9c       	mul	r14, r8
    3a26:	e0 2c       	mov	r14, r0
    3a28:	11 24       	eor	r1, r1
    3a2a:	e8 0e       	add	r14, r24
    3a2c:	f0 e2       	ldi	r31, 0x20	; 32
    3a2e:	ff 2a       	or	r15, r31
    3a30:	0e c0       	rjmp	.+28     	; 0x3a4e <vfprintf+0xe8>
    3a32:	9e 32       	cpi	r25, 0x2E	; 46
    3a34:	29 f4       	brne	.+10     	; 0x3a40 <vfprintf+0xda>
    3a36:	f6 fc       	sbrc	r15, 6
    3a38:	6b c1       	rjmp	.+726    	; 0x3d10 <vfprintf+0x3aa>
    3a3a:	40 e4       	ldi	r20, 0x40	; 64
    3a3c:	f4 2a       	or	r15, r20
    3a3e:	07 c0       	rjmp	.+14     	; 0x3a4e <vfprintf+0xe8>
    3a40:	9c 36       	cpi	r25, 0x6C	; 108
    3a42:	19 f4       	brne	.+6      	; 0x3a4a <vfprintf+0xe4>
    3a44:	50 e8       	ldi	r21, 0x80	; 128
    3a46:	f5 2a       	or	r15, r21
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <vfprintf+0xe8>
    3a4a:	98 36       	cpi	r25, 0x68	; 104
    3a4c:	49 f4       	brne	.+18     	; 0x3a60 <vfprintf+0xfa>
    3a4e:	f2 01       	movw	r30, r4
    3a50:	23 fd       	sbrc	r18, 3
    3a52:	95 91       	lpm	r25, Z+
    3a54:	23 ff       	sbrs	r18, 3
    3a56:	91 91       	ld	r25, Z+
    3a58:	2f 01       	movw	r4, r30
    3a5a:	99 23       	and	r25, r25
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <vfprintf+0xfa>
    3a5e:	b8 cf       	rjmp	.-144    	; 0x39d0 <vfprintf+0x6a>
    3a60:	89 2f       	mov	r24, r25
    3a62:	85 54       	subi	r24, 0x45	; 69
    3a64:	83 30       	cpi	r24, 0x03	; 3
    3a66:	18 f0       	brcs	.+6      	; 0x3a6e <vfprintf+0x108>
    3a68:	80 52       	subi	r24, 0x20	; 32
    3a6a:	83 30       	cpi	r24, 0x03	; 3
    3a6c:	38 f4       	brcc	.+14     	; 0x3a7c <vfprintf+0x116>
    3a6e:	44 e0       	ldi	r20, 0x04	; 4
    3a70:	50 e0       	ldi	r21, 0x00	; 0
    3a72:	a4 0e       	add	r10, r20
    3a74:	b5 1e       	adc	r11, r21
    3a76:	5f e3       	ldi	r21, 0x3F	; 63
    3a78:	59 83       	std	Y+1, r21	; 0x01
    3a7a:	0f c0       	rjmp	.+30     	; 0x3a9a <vfprintf+0x134>
    3a7c:	93 36       	cpi	r25, 0x63	; 99
    3a7e:	31 f0       	breq	.+12     	; 0x3a8c <vfprintf+0x126>
    3a80:	93 37       	cpi	r25, 0x73	; 115
    3a82:	79 f0       	breq	.+30     	; 0x3aa2 <vfprintf+0x13c>
    3a84:	93 35       	cpi	r25, 0x53	; 83
    3a86:	09 f0       	breq	.+2      	; 0x3a8a <vfprintf+0x124>
    3a88:	56 c0       	rjmp	.+172    	; 0x3b36 <vfprintf+0x1d0>
    3a8a:	20 c0       	rjmp	.+64     	; 0x3acc <vfprintf+0x166>
    3a8c:	f5 01       	movw	r30, r10
    3a8e:	80 81       	ld	r24, Z
    3a90:	89 83       	std	Y+1, r24	; 0x01
    3a92:	42 e0       	ldi	r20, 0x02	; 2
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	a4 0e       	add	r10, r20
    3a98:	b5 1e       	adc	r11, r21
    3a9a:	61 01       	movw	r12, r2
    3a9c:	01 e0       	ldi	r16, 0x01	; 1
    3a9e:	10 e0       	ldi	r17, 0x00	; 0
    3aa0:	12 c0       	rjmp	.+36     	; 0x3ac6 <vfprintf+0x160>
    3aa2:	f5 01       	movw	r30, r10
    3aa4:	c0 80       	ld	r12, Z
    3aa6:	d1 80       	ldd	r13, Z+1	; 0x01
    3aa8:	f6 fc       	sbrc	r15, 6
    3aaa:	03 c0       	rjmp	.+6      	; 0x3ab2 <vfprintf+0x14c>
    3aac:	6f ef       	ldi	r22, 0xFF	; 255
    3aae:	7f ef       	ldi	r23, 0xFF	; 255
    3ab0:	02 c0       	rjmp	.+4      	; 0x3ab6 <vfprintf+0x150>
    3ab2:	69 2d       	mov	r22, r9
    3ab4:	70 e0       	ldi	r23, 0x00	; 0
    3ab6:	42 e0       	ldi	r20, 0x02	; 2
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	a4 0e       	add	r10, r20
    3abc:	b5 1e       	adc	r11, r21
    3abe:	c6 01       	movw	r24, r12
    3ac0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <strnlen>
    3ac4:	8c 01       	movw	r16, r24
    3ac6:	5f e7       	ldi	r21, 0x7F	; 127
    3ac8:	f5 22       	and	r15, r21
    3aca:	14 c0       	rjmp	.+40     	; 0x3af4 <vfprintf+0x18e>
    3acc:	f5 01       	movw	r30, r10
    3ace:	c0 80       	ld	r12, Z
    3ad0:	d1 80       	ldd	r13, Z+1	; 0x01
    3ad2:	f6 fc       	sbrc	r15, 6
    3ad4:	03 c0       	rjmp	.+6      	; 0x3adc <vfprintf+0x176>
    3ad6:	6f ef       	ldi	r22, 0xFF	; 255
    3ad8:	7f ef       	ldi	r23, 0xFF	; 255
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <vfprintf+0x17a>
    3adc:	69 2d       	mov	r22, r9
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	42 e0       	ldi	r20, 0x02	; 2
    3ae2:	50 e0       	ldi	r21, 0x00	; 0
    3ae4:	a4 0e       	add	r10, r20
    3ae6:	b5 1e       	adc	r11, r21
    3ae8:	c6 01       	movw	r24, r12
    3aea:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <strnlen_P>
    3aee:	8c 01       	movw	r16, r24
    3af0:	50 e8       	ldi	r21, 0x80	; 128
    3af2:	f5 2a       	or	r15, r21
    3af4:	f3 fe       	sbrs	r15, 3
    3af6:	07 c0       	rjmp	.+14     	; 0x3b06 <vfprintf+0x1a0>
    3af8:	1a c0       	rjmp	.+52     	; 0x3b2e <vfprintf+0x1c8>
    3afa:	80 e2       	ldi	r24, 0x20	; 32
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	b3 01       	movw	r22, r6
    3b00:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3b04:	ea 94       	dec	r14
    3b06:	8e 2d       	mov	r24, r14
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	08 17       	cp	r16, r24
    3b0c:	19 07       	cpc	r17, r25
    3b0e:	a8 f3       	brcs	.-22     	; 0x3afa <vfprintf+0x194>
    3b10:	0e c0       	rjmp	.+28     	; 0x3b2e <vfprintf+0x1c8>
    3b12:	f6 01       	movw	r30, r12
    3b14:	f7 fc       	sbrc	r15, 7
    3b16:	85 91       	lpm	r24, Z+
    3b18:	f7 fe       	sbrs	r15, 7
    3b1a:	81 91       	ld	r24, Z+
    3b1c:	6f 01       	movw	r12, r30
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	b3 01       	movw	r22, r6
    3b22:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3b26:	e1 10       	cpse	r14, r1
    3b28:	ea 94       	dec	r14
    3b2a:	01 50       	subi	r16, 0x01	; 1
    3b2c:	10 40       	sbci	r17, 0x00	; 0
    3b2e:	01 15       	cp	r16, r1
    3b30:	11 05       	cpc	r17, r1
    3b32:	79 f7       	brne	.-34     	; 0x3b12 <vfprintf+0x1ac>
    3b34:	ea c0       	rjmp	.+468    	; 0x3d0a <vfprintf+0x3a4>
    3b36:	94 36       	cpi	r25, 0x64	; 100
    3b38:	11 f0       	breq	.+4      	; 0x3b3e <vfprintf+0x1d8>
    3b3a:	99 36       	cpi	r25, 0x69	; 105
    3b3c:	69 f5       	brne	.+90     	; 0x3b98 <vfprintf+0x232>
    3b3e:	f7 fe       	sbrs	r15, 7
    3b40:	08 c0       	rjmp	.+16     	; 0x3b52 <vfprintf+0x1ec>
    3b42:	f5 01       	movw	r30, r10
    3b44:	20 81       	ld	r18, Z
    3b46:	31 81       	ldd	r19, Z+1	; 0x01
    3b48:	42 81       	ldd	r20, Z+2	; 0x02
    3b4a:	53 81       	ldd	r21, Z+3	; 0x03
    3b4c:	84 e0       	ldi	r24, 0x04	; 4
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	0a c0       	rjmp	.+20     	; 0x3b66 <vfprintf+0x200>
    3b52:	f5 01       	movw	r30, r10
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	9c 01       	movw	r18, r24
    3b5a:	44 27       	eor	r20, r20
    3b5c:	37 fd       	sbrc	r19, 7
    3b5e:	40 95       	com	r20
    3b60:	54 2f       	mov	r21, r20
    3b62:	82 e0       	ldi	r24, 0x02	; 2
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	a8 0e       	add	r10, r24
    3b68:	b9 1e       	adc	r11, r25
    3b6a:	9f e6       	ldi	r25, 0x6F	; 111
    3b6c:	f9 22       	and	r15, r25
    3b6e:	57 ff       	sbrs	r21, 7
    3b70:	09 c0       	rjmp	.+18     	; 0x3b84 <vfprintf+0x21e>
    3b72:	50 95       	com	r21
    3b74:	40 95       	com	r20
    3b76:	30 95       	com	r19
    3b78:	21 95       	neg	r18
    3b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7c:	4f 4f       	sbci	r20, 0xFF	; 255
    3b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b80:	e0 e8       	ldi	r30, 0x80	; 128
    3b82:	fe 2a       	or	r15, r30
    3b84:	ca 01       	movw	r24, r20
    3b86:	b9 01       	movw	r22, r18
    3b88:	a1 01       	movw	r20, r2
    3b8a:	2a e0       	ldi	r18, 0x0A	; 10
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__ultoa_invert>
    3b92:	d8 2e       	mov	r13, r24
    3b94:	d2 18       	sub	r13, r2
    3b96:	40 c0       	rjmp	.+128    	; 0x3c18 <vfprintf+0x2b2>
    3b98:	95 37       	cpi	r25, 0x75	; 117
    3b9a:	29 f4       	brne	.+10     	; 0x3ba6 <vfprintf+0x240>
    3b9c:	1f 2d       	mov	r17, r15
    3b9e:	1f 7e       	andi	r17, 0xEF	; 239
    3ba0:	2a e0       	ldi	r18, 0x0A	; 10
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	1d c0       	rjmp	.+58     	; 0x3be0 <vfprintf+0x27a>
    3ba6:	1f 2d       	mov	r17, r15
    3ba8:	19 7f       	andi	r17, 0xF9	; 249
    3baa:	9f 36       	cpi	r25, 0x6F	; 111
    3bac:	61 f0       	breq	.+24     	; 0x3bc6 <vfprintf+0x260>
    3bae:	90 37       	cpi	r25, 0x70	; 112
    3bb0:	20 f4       	brcc	.+8      	; 0x3bba <vfprintf+0x254>
    3bb2:	98 35       	cpi	r25, 0x58	; 88
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <vfprintf+0x252>
    3bb6:	ac c0       	rjmp	.+344    	; 0x3d10 <vfprintf+0x3aa>
    3bb8:	0f c0       	rjmp	.+30     	; 0x3bd8 <vfprintf+0x272>
    3bba:	90 37       	cpi	r25, 0x70	; 112
    3bbc:	39 f0       	breq	.+14     	; 0x3bcc <vfprintf+0x266>
    3bbe:	98 37       	cpi	r25, 0x78	; 120
    3bc0:	09 f0       	breq	.+2      	; 0x3bc4 <vfprintf+0x25e>
    3bc2:	a6 c0       	rjmp	.+332    	; 0x3d10 <vfprintf+0x3aa>
    3bc4:	04 c0       	rjmp	.+8      	; 0x3bce <vfprintf+0x268>
    3bc6:	28 e0       	ldi	r18, 0x08	; 8
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	0a c0       	rjmp	.+20     	; 0x3be0 <vfprintf+0x27a>
    3bcc:	10 61       	ori	r17, 0x10	; 16
    3bce:	14 fd       	sbrc	r17, 4
    3bd0:	14 60       	ori	r17, 0x04	; 4
    3bd2:	20 e1       	ldi	r18, 0x10	; 16
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	04 c0       	rjmp	.+8      	; 0x3be0 <vfprintf+0x27a>
    3bd8:	14 fd       	sbrc	r17, 4
    3bda:	16 60       	ori	r17, 0x06	; 6
    3bdc:	20 e1       	ldi	r18, 0x10	; 16
    3bde:	32 e0       	ldi	r19, 0x02	; 2
    3be0:	17 ff       	sbrs	r17, 7
    3be2:	08 c0       	rjmp	.+16     	; 0x3bf4 <vfprintf+0x28e>
    3be4:	f5 01       	movw	r30, r10
    3be6:	60 81       	ld	r22, Z
    3be8:	71 81       	ldd	r23, Z+1	; 0x01
    3bea:	82 81       	ldd	r24, Z+2	; 0x02
    3bec:	93 81       	ldd	r25, Z+3	; 0x03
    3bee:	44 e0       	ldi	r20, 0x04	; 4
    3bf0:	50 e0       	ldi	r21, 0x00	; 0
    3bf2:	08 c0       	rjmp	.+16     	; 0x3c04 <vfprintf+0x29e>
    3bf4:	f5 01       	movw	r30, r10
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	bc 01       	movw	r22, r24
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	42 e0       	ldi	r20, 0x02	; 2
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	a4 0e       	add	r10, r20
    3c06:	b5 1e       	adc	r11, r21
    3c08:	a1 01       	movw	r20, r2
    3c0a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__ultoa_invert>
    3c0e:	d8 2e       	mov	r13, r24
    3c10:	d2 18       	sub	r13, r2
    3c12:	8f e7       	ldi	r24, 0x7F	; 127
    3c14:	f8 2e       	mov	r15, r24
    3c16:	f1 22       	and	r15, r17
    3c18:	f6 fe       	sbrs	r15, 6
    3c1a:	0b c0       	rjmp	.+22     	; 0x3c32 <vfprintf+0x2cc>
    3c1c:	5e ef       	ldi	r21, 0xFE	; 254
    3c1e:	f5 22       	and	r15, r21
    3c20:	d9 14       	cp	r13, r9
    3c22:	38 f4       	brcc	.+14     	; 0x3c32 <vfprintf+0x2cc>
    3c24:	f4 fe       	sbrs	r15, 4
    3c26:	07 c0       	rjmp	.+14     	; 0x3c36 <vfprintf+0x2d0>
    3c28:	f2 fc       	sbrc	r15, 2
    3c2a:	05 c0       	rjmp	.+10     	; 0x3c36 <vfprintf+0x2d0>
    3c2c:	8f ee       	ldi	r24, 0xEF	; 239
    3c2e:	f8 22       	and	r15, r24
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <vfprintf+0x2d0>
    3c32:	1d 2d       	mov	r17, r13
    3c34:	01 c0       	rjmp	.+2      	; 0x3c38 <vfprintf+0x2d2>
    3c36:	19 2d       	mov	r17, r9
    3c38:	f4 fe       	sbrs	r15, 4
    3c3a:	0d c0       	rjmp	.+26     	; 0x3c56 <vfprintf+0x2f0>
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	ed 0d       	add	r30, r13
    3c40:	f1 1d       	adc	r31, r1
    3c42:	80 81       	ld	r24, Z
    3c44:	80 33       	cpi	r24, 0x30	; 48
    3c46:	19 f4       	brne	.+6      	; 0x3c4e <vfprintf+0x2e8>
    3c48:	99 ee       	ldi	r25, 0xE9	; 233
    3c4a:	f9 22       	and	r15, r25
    3c4c:	08 c0       	rjmp	.+16     	; 0x3c5e <vfprintf+0x2f8>
    3c4e:	1f 5f       	subi	r17, 0xFF	; 255
    3c50:	f2 fe       	sbrs	r15, 2
    3c52:	05 c0       	rjmp	.+10     	; 0x3c5e <vfprintf+0x2f8>
    3c54:	03 c0       	rjmp	.+6      	; 0x3c5c <vfprintf+0x2f6>
    3c56:	8f 2d       	mov	r24, r15
    3c58:	86 78       	andi	r24, 0x86	; 134
    3c5a:	09 f0       	breq	.+2      	; 0x3c5e <vfprintf+0x2f8>
    3c5c:	1f 5f       	subi	r17, 0xFF	; 255
    3c5e:	0f 2d       	mov	r16, r15
    3c60:	f3 fc       	sbrc	r15, 3
    3c62:	14 c0       	rjmp	.+40     	; 0x3c8c <vfprintf+0x326>
    3c64:	f0 fe       	sbrs	r15, 0
    3c66:	0f c0       	rjmp	.+30     	; 0x3c86 <vfprintf+0x320>
    3c68:	1e 15       	cp	r17, r14
    3c6a:	10 f0       	brcs	.+4      	; 0x3c70 <vfprintf+0x30a>
    3c6c:	9d 2c       	mov	r9, r13
    3c6e:	0b c0       	rjmp	.+22     	; 0x3c86 <vfprintf+0x320>
    3c70:	9d 2c       	mov	r9, r13
    3c72:	9e 0c       	add	r9, r14
    3c74:	91 1a       	sub	r9, r17
    3c76:	1e 2d       	mov	r17, r14
    3c78:	06 c0       	rjmp	.+12     	; 0x3c86 <vfprintf+0x320>
    3c7a:	80 e2       	ldi	r24, 0x20	; 32
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	b3 01       	movw	r22, r6
    3c80:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3c84:	1f 5f       	subi	r17, 0xFF	; 255
    3c86:	1e 15       	cp	r17, r14
    3c88:	c0 f3       	brcs	.-16     	; 0x3c7a <vfprintf+0x314>
    3c8a:	04 c0       	rjmp	.+8      	; 0x3c94 <vfprintf+0x32e>
    3c8c:	1e 15       	cp	r17, r14
    3c8e:	10 f4       	brcc	.+4      	; 0x3c94 <vfprintf+0x32e>
    3c90:	e1 1a       	sub	r14, r17
    3c92:	01 c0       	rjmp	.+2      	; 0x3c96 <vfprintf+0x330>
    3c94:	ee 24       	eor	r14, r14
    3c96:	04 ff       	sbrs	r16, 4
    3c98:	0f c0       	rjmp	.+30     	; 0x3cb8 <vfprintf+0x352>
    3c9a:	80 e3       	ldi	r24, 0x30	; 48
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	b3 01       	movw	r22, r6
    3ca0:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3ca4:	02 ff       	sbrs	r16, 2
    3ca6:	1d c0       	rjmp	.+58     	; 0x3ce2 <vfprintf+0x37c>
    3ca8:	01 fd       	sbrc	r16, 1
    3caa:	03 c0       	rjmp	.+6      	; 0x3cb2 <vfprintf+0x34c>
    3cac:	88 e7       	ldi	r24, 0x78	; 120
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	0e c0       	rjmp	.+28     	; 0x3cce <vfprintf+0x368>
    3cb2:	88 e5       	ldi	r24, 0x58	; 88
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	0b c0       	rjmp	.+22     	; 0x3cce <vfprintf+0x368>
    3cb8:	80 2f       	mov	r24, r16
    3cba:	86 78       	andi	r24, 0x86	; 134
    3cbc:	91 f0       	breq	.+36     	; 0x3ce2 <vfprintf+0x37c>
    3cbe:	01 ff       	sbrs	r16, 1
    3cc0:	02 c0       	rjmp	.+4      	; 0x3cc6 <vfprintf+0x360>
    3cc2:	8b e2       	ldi	r24, 0x2B	; 43
    3cc4:	01 c0       	rjmp	.+2      	; 0x3cc8 <vfprintf+0x362>
    3cc6:	80 e2       	ldi	r24, 0x20	; 32
    3cc8:	f7 fc       	sbrc	r15, 7
    3cca:	8d e2       	ldi	r24, 0x2D	; 45
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	b3 01       	movw	r22, r6
    3cd0:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3cd4:	06 c0       	rjmp	.+12     	; 0x3ce2 <vfprintf+0x37c>
    3cd6:	80 e3       	ldi	r24, 0x30	; 48
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	b3 01       	movw	r22, r6
    3cdc:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3ce0:	9a 94       	dec	r9
    3ce2:	d9 14       	cp	r13, r9
    3ce4:	c0 f3       	brcs	.-16     	; 0x3cd6 <vfprintf+0x370>
    3ce6:	da 94       	dec	r13
    3ce8:	f1 01       	movw	r30, r2
    3cea:	ed 0d       	add	r30, r13
    3cec:	f1 1d       	adc	r31, r1
    3cee:	80 81       	ld	r24, Z
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	b3 01       	movw	r22, r6
    3cf4:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3cf8:	dd 20       	and	r13, r13
    3cfa:	a9 f7       	brne	.-22     	; 0x3ce6 <vfprintf+0x380>
    3cfc:	06 c0       	rjmp	.+12     	; 0x3d0a <vfprintf+0x3a4>
    3cfe:	80 e2       	ldi	r24, 0x20	; 32
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	b3 01       	movw	r22, r6
    3d04:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <fputc>
    3d08:	ea 94       	dec	r14
    3d0a:	ee 20       	and	r14, r14
    3d0c:	c1 f7       	brne	.-16     	; 0x3cfe <vfprintf+0x398>
    3d0e:	43 ce       	rjmp	.-890    	; 0x3996 <vfprintf+0x30>
    3d10:	f3 01       	movw	r30, r6
    3d12:	66 81       	ldd	r22, Z+6	; 0x06
    3d14:	77 81       	ldd	r23, Z+7	; 0x07
    3d16:	cb 01       	movw	r24, r22
    3d18:	2b 96       	adiw	r28, 0x0b	; 11
    3d1a:	e2 e1       	ldi	r30, 0x12	; 18
    3d1c:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__epilogue_restores__>

00003d20 <strnlen_P>:
    3d20:	fc 01       	movw	r30, r24
    3d22:	05 90       	lpm	r0, Z+
    3d24:	61 50       	subi	r22, 0x01	; 1
    3d26:	70 40       	sbci	r23, 0x00	; 0
    3d28:	01 10       	cpse	r0, r1
    3d2a:	d8 f7       	brcc	.-10     	; 0x3d22 <strnlen_P+0x2>
    3d2c:	80 95       	com	r24
    3d2e:	90 95       	com	r25
    3d30:	8e 0f       	add	r24, r30
    3d32:	9f 1f       	adc	r25, r31
    3d34:	08 95       	ret

00003d36 <strnlen>:
    3d36:	fc 01       	movw	r30, r24
    3d38:	61 50       	subi	r22, 0x01	; 1
    3d3a:	70 40       	sbci	r23, 0x00	; 0
    3d3c:	01 90       	ld	r0, Z+
    3d3e:	01 10       	cpse	r0, r1
    3d40:	d8 f7       	brcc	.-10     	; 0x3d38 <strnlen+0x2>
    3d42:	80 95       	com	r24
    3d44:	90 95       	com	r25
    3d46:	8e 0f       	add	r24, r30
    3d48:	9f 1f       	adc	r25, r31
    3d4a:	08 95       	ret

00003d4c <fputc>:
    3d4c:	0f 93       	push	r16
    3d4e:	1f 93       	push	r17
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	8c 01       	movw	r16, r24
    3d56:	eb 01       	movw	r28, r22
    3d58:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5a:	81 ff       	sbrs	r24, 1
    3d5c:	1b c0       	rjmp	.+54     	; 0x3d94 <fputc+0x48>
    3d5e:	82 ff       	sbrs	r24, 2
    3d60:	0d c0       	rjmp	.+26     	; 0x3d7c <fputc+0x30>
    3d62:	2e 81       	ldd	r18, Y+6	; 0x06
    3d64:	3f 81       	ldd	r19, Y+7	; 0x07
    3d66:	8c 81       	ldd	r24, Y+4	; 0x04
    3d68:	9d 81       	ldd	r25, Y+5	; 0x05
    3d6a:	28 17       	cp	r18, r24
    3d6c:	39 07       	cpc	r19, r25
    3d6e:	64 f4       	brge	.+24     	; 0x3d88 <fputc+0x3c>
    3d70:	e8 81       	ld	r30, Y
    3d72:	f9 81       	ldd	r31, Y+1	; 0x01
    3d74:	01 93       	st	Z+, r16
    3d76:	f9 83       	std	Y+1, r31	; 0x01
    3d78:	e8 83       	st	Y, r30
    3d7a:	06 c0       	rjmp	.+12     	; 0x3d88 <fputc+0x3c>
    3d7c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d7e:	f9 85       	ldd	r31, Y+9	; 0x09
    3d80:	80 2f       	mov	r24, r16
    3d82:	09 95       	icall
    3d84:	89 2b       	or	r24, r25
    3d86:	31 f4       	brne	.+12     	; 0x3d94 <fputc+0x48>
    3d88:	8e 81       	ldd	r24, Y+6	; 0x06
    3d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	9f 83       	std	Y+7, r25	; 0x07
    3d90:	8e 83       	std	Y+6, r24	; 0x06
    3d92:	02 c0       	rjmp	.+4      	; 0x3d98 <fputc+0x4c>
    3d94:	0f ef       	ldi	r16, 0xFF	; 255
    3d96:	1f ef       	ldi	r17, 0xFF	; 255
    3d98:	c8 01       	movw	r24, r16
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	1f 91       	pop	r17
    3da0:	0f 91       	pop	r16
    3da2:	08 95       	ret

00003da4 <__ultoa_invert>:
    3da4:	fa 01       	movw	r30, r20
    3da6:	aa 27       	eor	r26, r26
    3da8:	28 30       	cpi	r18, 0x08	; 8
    3daa:	51 f1       	breq	.+84     	; 0x3e00 <__ultoa_invert+0x5c>
    3dac:	20 31       	cpi	r18, 0x10	; 16
    3dae:	81 f1       	breq	.+96     	; 0x3e10 <__ultoa_invert+0x6c>
    3db0:	e8 94       	clt
    3db2:	6f 93       	push	r22
    3db4:	6e 7f       	andi	r22, 0xFE	; 254
    3db6:	6e 5f       	subi	r22, 0xFE	; 254
    3db8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dba:	8f 4f       	sbci	r24, 0xFF	; 255
    3dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbe:	af 4f       	sbci	r26, 0xFF	; 255
    3dc0:	b1 e0       	ldi	r27, 0x01	; 1
    3dc2:	3e d0       	rcall	.+124    	; 0x3e40 <__ultoa_invert+0x9c>
    3dc4:	b4 e0       	ldi	r27, 0x04	; 4
    3dc6:	3c d0       	rcall	.+120    	; 0x3e40 <__ultoa_invert+0x9c>
    3dc8:	67 0f       	add	r22, r23
    3dca:	78 1f       	adc	r23, r24
    3dcc:	89 1f       	adc	r24, r25
    3dce:	9a 1f       	adc	r25, r26
    3dd0:	a1 1d       	adc	r26, r1
    3dd2:	68 0f       	add	r22, r24
    3dd4:	79 1f       	adc	r23, r25
    3dd6:	8a 1f       	adc	r24, r26
    3dd8:	91 1d       	adc	r25, r1
    3dda:	a1 1d       	adc	r26, r1
    3ddc:	6a 0f       	add	r22, r26
    3dde:	71 1d       	adc	r23, r1
    3de0:	81 1d       	adc	r24, r1
    3de2:	91 1d       	adc	r25, r1
    3de4:	a1 1d       	adc	r26, r1
    3de6:	20 d0       	rcall	.+64     	; 0x3e28 <__ultoa_invert+0x84>
    3de8:	09 f4       	brne	.+2      	; 0x3dec <__ultoa_invert+0x48>
    3dea:	68 94       	set
    3dec:	3f 91       	pop	r19
    3dee:	2a e0       	ldi	r18, 0x0A	; 10
    3df0:	26 9f       	mul	r18, r22
    3df2:	11 24       	eor	r1, r1
    3df4:	30 19       	sub	r19, r0
    3df6:	30 5d       	subi	r19, 0xD0	; 208
    3df8:	31 93       	st	Z+, r19
    3dfa:	de f6       	brtc	.-74     	; 0x3db2 <__ultoa_invert+0xe>
    3dfc:	cf 01       	movw	r24, r30
    3dfe:	08 95       	ret
    3e00:	46 2f       	mov	r20, r22
    3e02:	47 70       	andi	r20, 0x07	; 7
    3e04:	40 5d       	subi	r20, 0xD0	; 208
    3e06:	41 93       	st	Z+, r20
    3e08:	b3 e0       	ldi	r27, 0x03	; 3
    3e0a:	0f d0       	rcall	.+30     	; 0x3e2a <__ultoa_invert+0x86>
    3e0c:	c9 f7       	brne	.-14     	; 0x3e00 <__ultoa_invert+0x5c>
    3e0e:	f6 cf       	rjmp	.-20     	; 0x3dfc <__ultoa_invert+0x58>
    3e10:	46 2f       	mov	r20, r22
    3e12:	4f 70       	andi	r20, 0x0F	; 15
    3e14:	40 5d       	subi	r20, 0xD0	; 208
    3e16:	4a 33       	cpi	r20, 0x3A	; 58
    3e18:	18 f0       	brcs	.+6      	; 0x3e20 <__ultoa_invert+0x7c>
    3e1a:	49 5d       	subi	r20, 0xD9	; 217
    3e1c:	31 fd       	sbrc	r19, 1
    3e1e:	40 52       	subi	r20, 0x20	; 32
    3e20:	41 93       	st	Z+, r20
    3e22:	02 d0       	rcall	.+4      	; 0x3e28 <__ultoa_invert+0x84>
    3e24:	a9 f7       	brne	.-22     	; 0x3e10 <__ultoa_invert+0x6c>
    3e26:	ea cf       	rjmp	.-44     	; 0x3dfc <__ultoa_invert+0x58>
    3e28:	b4 e0       	ldi	r27, 0x04	; 4
    3e2a:	a6 95       	lsr	r26
    3e2c:	97 95       	ror	r25
    3e2e:	87 95       	ror	r24
    3e30:	77 95       	ror	r23
    3e32:	67 95       	ror	r22
    3e34:	ba 95       	dec	r27
    3e36:	c9 f7       	brne	.-14     	; 0x3e2a <__ultoa_invert+0x86>
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	61 05       	cpc	r22, r1
    3e3c:	71 05       	cpc	r23, r1
    3e3e:	08 95       	ret
    3e40:	9b 01       	movw	r18, r22
    3e42:	ac 01       	movw	r20, r24
    3e44:	0a 2e       	mov	r0, r26
    3e46:	06 94       	lsr	r0
    3e48:	57 95       	ror	r21
    3e4a:	47 95       	ror	r20
    3e4c:	37 95       	ror	r19
    3e4e:	27 95       	ror	r18
    3e50:	ba 95       	dec	r27
    3e52:	c9 f7       	brne	.-14     	; 0x3e46 <__ultoa_invert+0xa2>
    3e54:	62 0f       	add	r22, r18
    3e56:	73 1f       	adc	r23, r19
    3e58:	84 1f       	adc	r24, r20
    3e5a:	95 1f       	adc	r25, r21
    3e5c:	a0 1d       	adc	r26, r0
    3e5e:	08 95       	ret

00003e60 <_exit>:
    3e60:	f8 94       	cli

00003e62 <__stop_program>:
    3e62:	ff cf       	rjmp	.-2      	; 0x3e62 <__stop_program>
