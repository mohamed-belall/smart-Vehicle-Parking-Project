
ECU3_dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08001e6c  08001e6c  00011e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f84  08001f84  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001f84  08001f84  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f84  08001f84  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f84  08001f84  00011f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f88  08001f88  00011f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08001f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000038  08001fc4  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001fc4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000364b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000109f  00000000  00000000  000236ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001892  00000000  00000000  0002478e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003a0  00000000  00000000  00026020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000002f8  00000000  00000000  000263c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000187d  00000000  00000000  000266b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000053bf  00000000  00000000  00027f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ce1c  00000000  00000000  0002d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000cb4  00000000  00000000  0003a110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000038 	.word	0x20000038
 800014c:	00000000 	.word	0x00000000
 8000150:	08001e54 	.word	0x08001e54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000003c 	.word	0x2000003c
 800016c:	08001e54 	.word	0x08001e54

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <keypad_Init>:
int keypad_Row[]	={R0,R1,R2,R3};
int keypad_Column[] ={C0,C1,C2};
#endif

void keypad_Init()
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R0;
 800018a:	2302      	movs	r3, #2
 800018c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800018e:	2304      	movs	r3, #4
 8000190:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000192:	2301      	movs	r3, #1
 8000194:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	482a      	ldr	r0, [pc, #168]	; (8000244 <keypad_Init+0xc0>)
 800019c:	f000 fef4 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 80001a0:	2304      	movs	r3, #4
 80001a2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4826      	ldr	r0, [pc, #152]	; (8000244 <keypad_Init+0xc0>)
 80001aa:	f000 feed 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 80001ae:	2308      	movs	r3, #8
 80001b0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	4619      	mov	r1, r3
 80001b6:	4823      	ldr	r0, [pc, #140]	; (8000244 <keypad_Init+0xc0>)
 80001b8:	f000 fee6 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 80001bc:	2310      	movs	r3, #16
 80001be:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	4619      	mov	r1, r3
 80001c4:	481f      	ldr	r0, [pc, #124]	; (8000244 <keypad_Init+0xc0>)
 80001c6:	f000 fedf 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 80001ca:	2320      	movs	r3, #32
 80001cc:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	4619      	mov	r1, r3
 80001d2:	481c      	ldr	r0, [pc, #112]	; (8000244 <keypad_Init+0xc0>)
 80001d4:	f000 fed8 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 80001d8:	2340      	movs	r3, #64	; 0x40
 80001da:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	4818      	ldr	r0, [pc, #96]	; (8000244 <keypad_Init+0xc0>)
 80001e2:	f000 fed1 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 80001e6:	2380      	movs	r3, #128	; 0x80
 80001e8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	4619      	mov	r1, r3
 80001ee:	4815      	ldr	r0, [pc, #84]	; (8000244 <keypad_Init+0xc0>)
 80001f0:	f000 feca 	bl	8000f88 <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = C3;
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
#endif


	MCAL_GPIO_WritePin(KEYPAD_PORT, R0, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2102      	movs	r1, #2
 80001f8:	4812      	ldr	r0, [pc, #72]	; (8000244 <keypad_Init+0xc0>)
 80001fa:	f000 ff5b 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R1, GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	2104      	movs	r1, #4
 8000202:	4810      	ldr	r0, [pc, #64]	; (8000244 <keypad_Init+0xc0>)
 8000204:	f000 ff56 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R2, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	2108      	movs	r1, #8
 800020c:	480d      	ldr	r0, [pc, #52]	; (8000244 <keypad_Init+0xc0>)
 800020e:	f000 ff51 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R3, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2110      	movs	r1, #16
 8000216:	480b      	ldr	r0, [pc, #44]	; (8000244 <keypad_Init+0xc0>)
 8000218:	f000 ff4c 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C0, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2120      	movs	r1, #32
 8000220:	4808      	ldr	r0, [pc, #32]	; (8000244 <keypad_Init+0xc0>)
 8000222:	f000 ff47 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C1, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2140      	movs	r1, #64	; 0x40
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <keypad_Init+0xc0>)
 800022c:	f000 ff42 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C2, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	4803      	ldr	r0, [pc, #12]	; (8000244 <keypad_Init+0xc0>)
 8000236:	f000 ff3d 	bl	80010b4 <MCAL_GPIO_WritePin>
#ifdef calculator_keypad
	MCAL_GPIO_WritePin(KEYPAD_PORT, C3, GPIO_PIN_SET);
#endif

}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40010c00 	.word	0x40010c00

08000248 <keypad_GetKey>:

char keypad_GetKey()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	int i,j;

	for(i = 0; i < 3 ; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	e08b      	b.n	800036c <keypad_GetKey+0x124>
	{

		MCAL_GPIO_WritePin(KEYPAD_PORT, C0, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2120      	movs	r1, #32
 8000258:	4849      	ldr	r0, [pc, #292]	; (8000380 <keypad_GetKey+0x138>)
 800025a:	f000 ff2b 	bl	80010b4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C1, GPIO_PIN_SET);
 800025e:	2201      	movs	r2, #1
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	4847      	ldr	r0, [pc, #284]	; (8000380 <keypad_GetKey+0x138>)
 8000264:	f000 ff26 	bl	80010b4 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, C2, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2180      	movs	r1, #128	; 0x80
 800026c:	4844      	ldr	r0, [pc, #272]	; (8000380 <keypad_GetKey+0x138>)
 800026e:	f000 ff21 	bl	80010b4 <MCAL_GPIO_WritePin>


		MCAL_GPIO_WritePin(KEYPAD_PORT, keypad_Column[i], GPIO_PIN_RESET);
 8000272:	4a44      	ldr	r2, [pc, #272]	; (8000384 <keypad_GetKey+0x13c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	b29b      	uxth	r3, r3
 800027c:	2200      	movs	r2, #0
 800027e:	4619      	mov	r1, r3
 8000280:	483f      	ldr	r0, [pc, #252]	; (8000380 <keypad_GetKey+0x138>)
 8000282:	f000 ff17 	bl	80010b4 <MCAL_GPIO_WritePin>
		for(j=0;j<4 ; j++)
 8000286:	2300      	movs	r3, #0
 8000288:	603b      	str	r3, [r7, #0]
 800028a:	e069      	b.n	8000360 <keypad_GetKey+0x118>
		{

			if(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_Row[j] ) == 0) // check if key is pressed
 800028c:	4a3e      	ldr	r2, [pc, #248]	; (8000388 <keypad_GetKey+0x140>)
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	b29b      	uxth	r3, r3
 8000296:	4619      	mov	r1, r3
 8000298:	4839      	ldr	r0, [pc, #228]	; (8000380 <keypad_GetKey+0x138>)
 800029a:	f000 fef4 	bl	8001086 <MCAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d15a      	bne.n	800035a <keypad_GetKey+0x112>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT, keypad_Row[j] ) == 0); // wait for  single press
 80002a4:	bf00      	nop
 80002a6:	4a38      	ldr	r2, [pc, #224]	; (8000388 <keypad_GetKey+0x140>)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	4619      	mov	r1, r3
 80002b2:	4833      	ldr	r0, [pc, #204]	; (8000380 <keypad_GetKey+0x138>)
 80002b4:	f000 fee7 	bl	8001086 <MCAL_GPIO_ReadPin>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f3      	beq.n	80002a6 <keypad_GetKey+0x5e>


				switch (i)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b02      	cmp	r3, #2
 80002c2:	d031      	beq.n	8000328 <keypad_GetKey+0xe0>
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	dc47      	bgt.n	800035a <keypad_GetKey+0x112>
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d003      	beq.n	80002d8 <keypad_GetKey+0x90>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d014      	beq.n	8000300 <keypad_GetKey+0xb8>
 80002d6:	e040      	b.n	800035a <keypad_GetKey+0x112>
				{
				case 0:
					if(j == 0) return '*';
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d101      	bne.n	80002e2 <keypad_GetKey+0x9a>
 80002de:	232a      	movs	r3, #42	; 0x2a
 80002e0:	e049      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 1) return '7';
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d101      	bne.n	80002ec <keypad_GetKey+0xa4>
 80002e8:	2337      	movs	r3, #55	; 0x37
 80002ea:	e044      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 2) return '4';
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d101      	bne.n	80002f6 <keypad_GetKey+0xae>
 80002f2:	2334      	movs	r3, #52	; 0x34
 80002f4:	e03f      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 3) return '1';
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d129      	bne.n	8000350 <keypad_GetKey+0x108>
 80002fc:	2331      	movs	r3, #49	; 0x31
 80002fe:	e03a      	b.n	8000376 <keypad_GetKey+0x12e>
					break;
				case 1:
					if(j == 0) return '0';
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d101      	bne.n	800030a <keypad_GetKey+0xc2>
 8000306:	2330      	movs	r3, #48	; 0x30
 8000308:	e035      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 1) return '8';
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d101      	bne.n	8000314 <keypad_GetKey+0xcc>
 8000310:	2338      	movs	r3, #56	; 0x38
 8000312:	e030      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 2) return '5';
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d101      	bne.n	800031e <keypad_GetKey+0xd6>
 800031a:	2335      	movs	r3, #53	; 0x35
 800031c:	e02b      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 3) return '2';
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d117      	bne.n	8000354 <keypad_GetKey+0x10c>
 8000324:	2332      	movs	r3, #50	; 0x32
 8000326:	e026      	b.n	8000376 <keypad_GetKey+0x12e>
					break;
				case 2 :
					if(j == 0) return '#';
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d101      	bne.n	8000332 <keypad_GetKey+0xea>
 800032e:	2323      	movs	r3, #35	; 0x23
 8000330:	e021      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 1) return '9';
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d101      	bne.n	800033c <keypad_GetKey+0xf4>
 8000338:	2339      	movs	r3, #57	; 0x39
 800033a:	e01c      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 2) return '6';
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d101      	bne.n	8000346 <keypad_GetKey+0xfe>
 8000342:	2336      	movs	r3, #54	; 0x36
 8000344:	e017      	b.n	8000376 <keypad_GetKey+0x12e>
					else if(j == 3) return '3';
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d105      	bne.n	8000358 <keypad_GetKey+0x110>
 800034c:	2333      	movs	r3, #51	; 0x33
 800034e:	e012      	b.n	8000376 <keypad_GetKey+0x12e>
					break;
 8000350:	bf00      	nop
 8000352:	e002      	b.n	800035a <keypad_GetKey+0x112>
					break;
 8000354:	bf00      	nop
 8000356:	e000      	b.n	800035a <keypad_GetKey+0x112>
					break;
 8000358:	bf00      	nop
		for(j=0;j<4 ; j++)
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b03      	cmp	r3, #3
 8000364:	dd92      	ble.n	800028c <keypad_GetKey+0x44>
	for(i = 0; i < 3 ; i++)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b02      	cmp	r3, #2
 8000370:	f77f af70 	ble.w	8000254 <keypad_GetKey+0xc>
					}
				}
			}
		}
#endif
	return 'A'; // return A if no key is pressed
 8000374:	2341      	movs	r3, #65	; 0x41
}
 8000376:	4618      	mov	r0, r3
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010c00 	.word	0x40010c00
 8000384:	20000010 	.word	0x20000010
 8000388:	20000000 	.word	0x20000000

0800038c <delay_ms>:
#include "lcd_driver.h"



void delay_ms(uint32_t time)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0 ; i < time ; i++)
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	e00b      	b.n	80003b2 <delay_ms+0x26>
		for(j=0 ; j<255 ; j++);
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	e002      	b.n	80003a6 <delay_ms+0x1a>
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	2bfe      	cmp	r3, #254	; 0xfe
 80003aa:	d9f9      	bls.n	80003a0 <delay_ms+0x14>
	for(i=0 ; i < time ; i++)
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3301      	adds	r3, #1
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fa      	ldr	r2, [r7, #12]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d3ef      	bcc.n	800039a <delay_ms+0xe>
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
	...

080003c8 <LCD_Init>:

void LCD_Init()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;
	delay_ms(20);
 80003ce:	2014      	movs	r0, #20
 80003d0:	f7ff ffdc 	bl	800038c <delay_ms>

	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003d4:	2304      	movs	r3, #4
 80003d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80003d8:	2301      	movs	r3, #1
 80003da:	71fb      	strb	r3, [r7, #7]

	PinCfg.GPIO_PinNumber = EN_switch ;
 80003dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	483b      	ldr	r0, [pc, #236]	; (80004d4 <LCD_Init+0x10c>)
 80003e8:	f000 fdce 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_switch;
 80003ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003f0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	4837      	ldr	r0, [pc, #220]	; (80004d4 <LCD_Init+0x10c>)
 80003f8:	f000 fdc6 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_switch;
 80003fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000400:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	4833      	ldr	r0, [pc, #204]	; (80004d4 <LCD_Init+0x10c>)
 8000408:	f000 fdbe 	bl	8000f88 <MCAL_GPIO_Init>


	// data pins output
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800040c:	2304      	movs	r3, #4
 800040e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000410:	2301      	movs	r3, #1
 8000412:	71fb      	strb	r3, [r7, #7]



	PinCfg.GPIO_PinNumber = D4;
 8000414:	2320      	movs	r3, #32
 8000416:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	482e      	ldr	r0, [pc, #184]	; (80004d8 <LCD_Init+0x110>)
 800041e:	f000 fdb3 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D5;
 8000422:	2340      	movs	r3, #64	; 0x40
 8000424:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	482b      	ldr	r0, [pc, #172]	; (80004d8 <LCD_Init+0x110>)
 800042c:	f000 fdac 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D6;
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4827      	ldr	r0, [pc, #156]	; (80004d8 <LCD_Init+0x110>)
 800043a:	f000 fda5 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D7;
 800043e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000442:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4823      	ldr	r0, [pc, #140]	; (80004d8 <LCD_Init+0x110>)
 800044a:	f000 fd9d 	bl	8000f88 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	481f      	ldr	r0, [pc, #124]	; (80004d4 <LCD_Init+0x10c>)
 8000456:	f000 fe2d 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000460:	481c      	ldr	r0, [pc, #112]	; (80004d4 <LCD_Init+0x10c>)
 8000462:	f000 fe27 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046c:	4819      	ldr	r0, [pc, #100]	; (80004d4 <LCD_Init+0x10c>)
 800046e:	f000 fe21 	bl	80010b4 <MCAL_GPIO_WritePin>

	delay_ms(15);
 8000472:	200f      	movs	r0, #15
 8000474:	f7ff ff8a 	bl	800038c <delay_ms>
	LCD_Clear_Screen();
 8000478:	f000 f830 	bl	80004dc <LCD_Clear_Screen>

#ifdef EIGHT_BIT_MODE
	PinCfg.GPIO_PinNumber = D0;
 800047c:	2302      	movs	r3, #2
 800047e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <LCD_Init+0x110>)
 8000486:	f000 fd7f 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D1;
 800048a:	2304      	movs	r3, #4
 800048c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	4619      	mov	r1, r3
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <LCD_Init+0x110>)
 8000494:	f000 fd78 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D2;
 8000498:	2308      	movs	r3, #8
 800049a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4619      	mov	r1, r3
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <LCD_Init+0x110>)
 80004a2:	f000 fd71 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D3;
 80004a6:	2310      	movs	r3, #16
 80004a8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4619      	mov	r1, r3
 80004ae:	480a      	ldr	r0, [pc, #40]	; (80004d8 <LCD_Init+0x110>)
 80004b0:	f000 fd6a 	bl	8000f88 <MCAL_GPIO_Init>

	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 80004b4:	2038      	movs	r0, #56	; 0x38
 80004b6:	f000 f819 	bl	80004ec <LCD_Send_Command>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, D7, (LCD_FUNCTION_4BIT_2LINES&0x80));
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
 80004ba:	2006      	movs	r0, #6
 80004bc:	f000 f816 	bl	80004ec <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 80004c0:	2080      	movs	r0, #128	; 0x80
 80004c2:	f000 f813 	bl	80004ec <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_0N_CURSOR_BLINK);
 80004c6:	200f      	movs	r0, #15
 80004c8:	f000 f810 	bl	80004ec <LCD_Send_Command>

}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40010800 	.word	0x40010800

080004dc <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CLEAR);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f000 f803 	bl	80004ec <LCD_Send_Command>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <LCD_Send_Command>:

void LCD_Send_Command(uint8_t command)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE

	//	MCAL_GPIO_WritePort(LCD_DATA_PORT, command);
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D0 , (command&0x01));
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	2102      	movs	r1, #2
 8000502:	482c      	ldr	r0, [pc, #176]	; (80005b4 <LCD_Send_Command+0xc8>)
 8000504:	f000 fdd6 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D1 , (command&0x02));
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	f003 0302 	and.w	r3, r3, #2
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	2104      	movs	r1, #4
 8000514:	4827      	ldr	r0, [pc, #156]	; (80005b4 <LCD_Send_Command+0xc8>)
 8000516:	f000 fdcd 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D2 , (command&0x04));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	b2db      	uxtb	r3, r3
 8000522:	461a      	mov	r2, r3
 8000524:	2108      	movs	r1, #8
 8000526:	4823      	ldr	r0, [pc, #140]	; (80005b4 <LCD_Send_Command+0xc8>)
 8000528:	f000 fdc4 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D3 , (command&0x08));
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f003 0308 	and.w	r3, r3, #8
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	2110      	movs	r1, #16
 8000538:	481e      	ldr	r0, [pc, #120]	; (80005b4 <LCD_Send_Command+0xc8>)
 800053a:	f000 fdbb 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D4 , (command&0x10));
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f003 0310 	and.w	r3, r3, #16
 8000544:	b2db      	uxtb	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	2120      	movs	r1, #32
 800054a:	481a      	ldr	r0, [pc, #104]	; (80005b4 <LCD_Send_Command+0xc8>)
 800054c:	f000 fdb2 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D5 , (command&0x20));
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	2140      	movs	r1, #64	; 0x40
 800055c:	4815      	ldr	r0, [pc, #84]	; (80005b4 <LCD_Send_Command+0xc8>)
 800055e:	f000 fda9 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D6 , (command&0x40));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	4811      	ldr	r0, [pc, #68]	; (80005b4 <LCD_Send_Command+0xc8>)
 8000570:	f000 fda0 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D7 , (command&0x80));
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LCD_Send_Command+0xc8>)
 8000584:	f000 fd96 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <LCD_Send_Command+0xcc>)
 8000590:	f000 fd90 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <LCD_Send_Command+0xcc>)
 800059c:	f000 fd8a 	bl	80010b4 <MCAL_GPIO_WritePin>
	delay_ms(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f7ff fef3 	bl	800038c <delay_ms>
	LCD_Kick();
 80005a6:	f000 f8af 	bl	8000708 <LCD_Kick>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT ,RW_switch , GPIO_PIN_RESET);
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT ,RS_switch , GPIO_PIN_RESET);
	LCD_Kick();
#endif

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40010800 	.word	0x40010800
 80005b8:	40011000 	.word	0x40011000

080005bc <LCD_Send_Character>:
void LCD_Send_Character(uint8_t character)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE

	//	MCAL_GPIO_WritePort(LCD_DATA_PORT, character<<7 );
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D0 , (character&0x01));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	2102      	movs	r1, #2
 80005d2:	482c      	ldr	r0, [pc, #176]	; (8000684 <LCD_Send_Character+0xc8>)
 80005d4:	f000 fd6e 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D1 , (character&0x02));
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	2104      	movs	r1, #4
 80005e4:	4827      	ldr	r0, [pc, #156]	; (8000684 <LCD_Send_Character+0xc8>)
 80005e6:	f000 fd65 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D2 , (character&0x04));
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2108      	movs	r1, #8
 80005f6:	4823      	ldr	r0, [pc, #140]	; (8000684 <LCD_Send_Character+0xc8>)
 80005f8:	f000 fd5c 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D3 , (character&0x08));
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 0308 	and.w	r3, r3, #8
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	2110      	movs	r1, #16
 8000608:	481e      	ldr	r0, [pc, #120]	; (8000684 <LCD_Send_Character+0xc8>)
 800060a:	f000 fd53 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D4 , (character&0x10));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	2120      	movs	r1, #32
 800061a:	481a      	ldr	r0, [pc, #104]	; (8000684 <LCD_Send_Character+0xc8>)
 800061c:	f000 fd4a 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D5 , (character&0x20));
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	4815      	ldr	r0, [pc, #84]	; (8000684 <LCD_Send_Character+0xc8>)
 800062e:	f000 fd41 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D6 , (character&0x40));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <LCD_Send_Character+0xc8>)
 8000640:	f000 fd38 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D7 , (character&0x80));
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <LCD_Send_Character+0xc8>)
 8000654:	f000 fd2e 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <LCD_Send_Character+0xcc>)
 8000660:	f000 fd28 	bl	80010b4 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066a:	4807      	ldr	r0, [pc, #28]	; (8000688 <LCD_Send_Character+0xcc>)
 800066c:	f000 fd22 	bl	80010b4 <MCAL_GPIO_WritePin>

	delay_ms(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff fe8b 	bl	800038c <delay_ms>
	LCD_Kick();
 8000676:	f000 f847 	bl	8000708 <LCD_Kick>
//	LCD_CONTROL_PORT &= ~(1<<RW_switch);    //0: Write
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT ,RS_switch , GPIO_PIN_SET);
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT ,RW_switch , GPIO_PIN_RESET);
	LCD_Kick();
#endif
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40010800 	.word	0x40010800
 8000688:	40011000 	.word	0x40011000

0800068c <LCD_Send_String>:
void LCD_Send_String(char *string)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	int count =0;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]

	while(*string >0)
 8000698:	e02c      	b.n	80006f4 <LCD_Send_String+0x68>
	{


		LCD_Send_Character(*string++);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff8a 	bl	80005bc <LCD_Send_Character>
		if (count == 16)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b10      	cmp	r3, #16
 80006ac:	d104      	bne.n	80006b8 <LCD_Send_String+0x2c>
		{
			LCD_gotoXY(2,0);
 80006ae:	2100      	movs	r1, #0
 80006b0:	2002      	movs	r0, #2
 80006b2:	f000 f83f 	bl	8000734 <LCD_gotoXY>
 80006b6:	e01a      	b.n	80006ee <LCD_Send_String+0x62>
		}else if (count == 32)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b20      	cmp	r3, #32
 80006bc:	d104      	bne.n	80006c8 <LCD_Send_String+0x3c>
		{
			LCD_gotoXY(3,0);
 80006be:	2100      	movs	r1, #0
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f837 	bl	8000734 <LCD_gotoXY>
 80006c6:	e012      	b.n	80006ee <LCD_Send_String+0x62>
		}
		else if (count == 48)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b30      	cmp	r3, #48	; 0x30
 80006cc:	d104      	bne.n	80006d8 <LCD_Send_String+0x4c>
		{
			LCD_gotoXY(4,0);
 80006ce:	2100      	movs	r1, #0
 80006d0:	2004      	movs	r0, #4
 80006d2:	f000 f82f 	bl	8000734 <LCD_gotoXY>
 80006d6:	e00a      	b.n	80006ee <LCD_Send_String+0x62>
		}

		else if(count >= 64 )
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b3f      	cmp	r3, #63	; 0x3f
 80006dc:	dd07      	ble.n	80006ee <LCD_Send_String+0x62>
		{
			LCD_Clear_Screen();
 80006de:	f7ff fefd 	bl	80004dc <LCD_Clear_Screen>
			LCD_gotoXY(1,0);
 80006e2:	2100      	movs	r1, #0
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 f825 	bl	8000734 <LCD_gotoXY>
			count =0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
		}
		count++;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	3301      	adds	r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
	while(*string >0)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1ce      	bne.n	800069a <LCD_Send_String+0xe>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <LCD_Kick>:

void LCD_Kick(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <LCD_Kick+0x28>)
 8000714:	f000 fcce 	bl	80010b4 <MCAL_GPIO_WritePin>

	delay_ms(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f7ff fe37 	bl	800038c <delay_ms>

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <LCD_Kick+0x28>)
 8000726:	f000 fcc5 	bl	80010b4 <MCAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40011000 	.word	0x40011000

08000734 <LCD_gotoXY>:




void LCD_gotoXY(uint8_t line , uint8_t position)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
	if (line == 1) // line 1
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d109      	bne.n	800075e <LCD_gotoXY+0x2a>
	{
		if(  position >= 0 && position < 16)
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d82c      	bhi.n	80007aa <LCD_gotoXY+0x76>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW+position);
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	3b80      	subs	r3, #128	; 0x80
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fec8 	bl	80004ec <LCD_Send_Command>
	else if (line == 4) //  line 4
	{
		if(  position >= 0 && position < 16)
			LCD_Send_Command(LCD_BEGIN_AT_FOURTH_RAW+position);
	}
}
 800075c:	e025      	b.n	80007aa <LCD_gotoXY+0x76>
	else if (line == 2) //  line 2
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d109      	bne.n	8000778 <LCD_gotoXY+0x44>
		if(  position >= 0 && position < 16)
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2b0f      	cmp	r3, #15
 8000768:	d81f      	bhi.n	80007aa <LCD_gotoXY+0x76>
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW+position);
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	3b40      	subs	r3, #64	; 0x40
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff febb 	bl	80004ec <LCD_Send_Command>
}
 8000776:	e018      	b.n	80007aa <LCD_gotoXY+0x76>
	else if (line == 3) // line 3
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d109      	bne.n	8000792 <LCD_gotoXY+0x5e>
		if(  position >= 0 && position < 16)
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d812      	bhi.n	80007aa <LCD_gotoXY+0x76>
			LCD_Send_Command(LCD_BEGIN_AT_THIRD_RAW+position);
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	3b70      	subs	r3, #112	; 0x70
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff feae 	bl	80004ec <LCD_Send_Command>
}
 8000790:	e00b      	b.n	80007aa <LCD_gotoXY+0x76>
	else if (line == 4) //  line 4
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d108      	bne.n	80007aa <LCD_gotoXY+0x76>
		if(  position >= 0 && position < 16)
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	2b0f      	cmp	r3, #15
 800079c:	d805      	bhi.n	80007aa <LCD_gotoXY+0x76>
			LCD_Send_Command(LCD_BEGIN_AT_FOURTH_RAW+position);
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	3b30      	subs	r3, #48	; 0x30
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fea1 	bl	80004ec <LCD_Send_Command>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <HAL_SEVEN_SEG_init>:

#include "seven_segment.h"


void HAL_SEVEN_SEG_init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;


	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN1;
 80007ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007be:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007c0:	2304      	movs	r3, #4
 80007c2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80007c4:	2301      	movs	r3, #1
 80007c6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	481b      	ldr	r0, [pc, #108]	; (800083c <HAL_SEVEN_SEG_init+0x88>)
 80007ce:	f000 fbdb 	bl	8000f88 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN2;
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4817      	ldr	r0, [pc, #92]	; (800083c <HAL_SEVEN_SEG_init+0x88>)
 80007de:	f000 fbd3 	bl	8000f88 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN3;
 80007e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <HAL_SEVEN_SEG_init+0x88>)
 80007ee:	f000 fbcb 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN4;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <HAL_SEVEN_SEG_init+0x88>)
 80007fe:	f000 fbc3 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN5;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	4619      	mov	r1, r3
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <HAL_SEVEN_SEG_init+0x88>)
 800080e:	f000 fbbb 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN6;
 8000812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000816:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <HAL_SEVEN_SEG_init+0x88>)
 800081e:	f000 fbb3 	bl	8000f88 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN7;
 8000822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000826:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <HAL_SEVEN_SEG_init+0x88>)
 800082e:	f000 fbab 	bl	8000f88 <MCAL_GPIO_Init>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40010800 	.word	0x40010800

08000840 <HAL_SEVEN_SEG_Write>:


void HAL_SEVEN_SEG_Write(uint8_t number)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	{
		MCAL_GPIO_WritePort(SEVEN_SEG_PORT, seg_CAnodeVal[number]<<FIRST_PIN_number);
		//MCAL_GPIO_WritePin(GPIOx, PinNumber, value)
	}else if(SEVEN_SEG_TYPE == SEVEN_SEG_COMMON_CATHODE)
	{
		MCAL_GPIO_WritePort(SEVEN_SEG_PORT, seg_CCathodeVal[number]<<FIRST_PIN_number);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_SEVEN_SEG_Write+0x28>)
 800084e:	5cd3      	ldrb	r3, [r2, r3]
 8000850:	b29b      	uxth	r3, r3
 8000852:	025b      	lsls	r3, r3, #9
 8000854:	b29b      	uxth	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <HAL_SEVEN_SEG_Write+0x2c>)
 800085a:	f000 fc42 	bl	80010e2 <MCAL_GPIO_WritePort>
	}
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000001c 	.word	0x2000001c
 800086c:	40010800 	.word	0x40010800

08000870 <Enable_NVIC>:
 * ===========================================================================================================
 * Generic Function
 * ===========================================================================================================
 * */
void Enable_NVIC(uint16_t IRQ)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d854      	bhi.n	800092a <Enable_NVIC+0xba>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <Enable_NVIC+0x18>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	080008c9 	.word	0x080008c9
 800088c:	080008d7 	.word	0x080008d7
 8000890:	080008e5 	.word	0x080008e5
 8000894:	080008f3 	.word	0x080008f3
 8000898:	08000901 	.word	0x08000901
 800089c:	0800090f 	.word	0x0800090f
 80008a0:	0800090f 	.word	0x0800090f
 80008a4:	0800090f 	.word	0x0800090f
 80008a8:	0800090f 	.word	0x0800090f
 80008ac:	0800090f 	.word	0x0800090f
 80008b0:	0800091d 	.word	0x0800091d
 80008b4:	0800091d 	.word	0x0800091d
 80008b8:	0800091d 	.word	0x0800091d
 80008bc:	0800091d 	.word	0x0800091d
 80008c0:	0800091d 	.word	0x0800091d
 80008c4:	0800091d 	.word	0x0800091d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <Enable_NVIC+0xc4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <Enable_NVIC+0xc4>)
 80008ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d2:	6013      	str	r3, [r2, #0]
		break;
 80008d4:	e029      	b.n	800092a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <Enable_NVIC+0xc4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <Enable_NVIC+0xc4>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6013      	str	r3, [r2, #0]
		break;
 80008e2:	e022      	b.n	800092a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <Enable_NVIC+0xc4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <Enable_NVIC+0xc4>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
		break;
 80008f0:	e01b      	b.n	800092a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <Enable_NVIC+0xc4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <Enable_NVIC+0xc4>)
 80008f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fc:	6013      	str	r3, [r2, #0]
		break;
 80008fe:	e014      	b.n	800092a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <Enable_NVIC+0xc4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <Enable_NVIC+0xc4>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
		break;
 800090c:	e00d      	b.n	800092a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <Enable_NVIC+0xc4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <Enable_NVIC+0xc4>)
 8000914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000918:	6013      	str	r3, [r2, #0]
		break;
 800091a:	e006      	b.n	800092a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <Enable_NVIC+0xc8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <Enable_NVIC+0xc8>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6013      	str	r3, [r2, #0]
		break;
 8000928:	bf00      	nop
	}
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100
 8000938:	e000e104 	.word	0xe000e104

0800093c <Disable_NVIC>:



void Disable_NVIC(uint16_t IRQ)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d854      	bhi.n	80009f6 <Disable_NVIC+0xba>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <Disable_NVIC+0x18>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	08000995 	.word	0x08000995
 8000958:	080009a3 	.word	0x080009a3
 800095c:	080009b1 	.word	0x080009b1
 8000960:	080009bf 	.word	0x080009bf
 8000964:	080009cd 	.word	0x080009cd
 8000968:	080009db 	.word	0x080009db
 800096c:	080009db 	.word	0x080009db
 8000970:	080009db 	.word	0x080009db
 8000974:	080009db 	.word	0x080009db
 8000978:	080009db 	.word	0x080009db
 800097c:	080009e9 	.word	0x080009e9
 8000980:	080009e9 	.word	0x080009e9
 8000984:	080009e9 	.word	0x080009e9
 8000988:	080009e9 	.word	0x080009e9
 800098c:	080009e9 	.word	0x080009e9
 8000990:	080009e9 	.word	0x080009e9
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <Disable_NVIC+0xc4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <Disable_NVIC+0xc4>)
 800099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099e:	6013      	str	r3, [r2, #0]
		break;
 80009a0:	e029      	b.n	80009f6 <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <Disable_NVIC+0xc4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <Disable_NVIC+0xc4>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6013      	str	r3, [r2, #0]
		break;
 80009ae:	e022      	b.n	80009f6 <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <Disable_NVIC+0xc4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <Disable_NVIC+0xc4>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	6013      	str	r3, [r2, #0]
		break;
 80009bc:	e01b      	b.n	80009f6 <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <Disable_NVIC+0xc4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <Disable_NVIC+0xc4>)
 80009c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c8:	6013      	str	r3, [r2, #0]
		break;
 80009ca:	e014      	b.n	80009f6 <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <Disable_NVIC+0xc4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <Disable_NVIC+0xc4>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d6:	6013      	str	r3, [r2, #0]
		break;
 80009d8:	e00d      	b.n	80009f6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <Disable_NVIC+0xc4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <Disable_NVIC+0xc4>)
 80009e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e4:	6013      	str	r3, [r2, #0]
		break;
 80009e6:	e006      	b.n	80009f6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <Disable_NVIC+0xc8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <Disable_NVIC+0xc8>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f2:	6013      	str	r3, [r2, #0]
		break;
 80009f4:	bf00      	nop
	}
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e180 	.word	0xe000e180
 8000a04:	e000e184 	.word	0xe000e184

08000a08 <update_EXTI>:



void update_EXTI(EXTI_PinConfig_t *EXTI_config)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	// 1. Configure GPIO to be AF input => Floating input
	GPIO_PinConfig_t pincfg;
	//update the gpio pins to be input floating
	pincfg.GPIO_PinNumber = EXTI_config->EXTI_PINS.EXTI_GPIO_PIN;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	891b      	ldrh	r3, [r3, #8]
 8000a14:	813b      	strh	r3, [r7, #8]
	pincfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000a16:	2301      	movs	r3, #1
 8000a18:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_config->EXTI_PINS.EXTI_GPIO_Port, &pincfg);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f107 0208 	add.w	r2, r7, #8
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 faaf 	bl	8000f88 <MCAL_GPIO_Init>




	// 2.update AFIO to route between EXTI line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_config->EXTI_PINS.EXTI_Input_Line_Number /4;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_config->EXTI_PINS.EXTI_Input_Line_Number % 4) * 4;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	73bb      	strb	r3, [r7, #14]

	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_Position);
 8000a44:	4a5f      	ldr	r2, [pc, #380]	; (8000bc4 <update_EXTI+0x1bc>)
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	210f      	movs	r1, #15
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	495a      	ldr	r1, [pc, #360]	; (8000bc4 <update_EXTI+0x1bc>)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	4002      	ands	r2, r0
 8000a60:	3302      	adds	r3, #2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_config->EXTI_PINS.EXTI_GPIO_Port) & 0xF) << AFIO_EXTICR_Position);
 8000a66:	4a57      	ldr	r2, [pc, #348]	; (8000bc4 <update_EXTI+0x1bc>)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4954      	ldr	r1, [pc, #336]	; (8000bc8 <update_EXTI+0x1c0>)
 8000a76:	428b      	cmp	r3, r1
 8000a78:	d016      	beq.n	8000aa8 <update_EXTI+0xa0>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4953      	ldr	r1, [pc, #332]	; (8000bcc <update_EXTI+0x1c4>)
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d00f      	beq.n	8000aa4 <update_EXTI+0x9c>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	4951      	ldr	r1, [pc, #324]	; (8000bd0 <update_EXTI+0x1c8>)
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d008      	beq.n	8000aa0 <update_EXTI+0x98>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4950      	ldr	r1, [pc, #320]	; (8000bd4 <update_EXTI+0x1cc>)
 8000a94:	428b      	cmp	r3, r1
 8000a96:	d101      	bne.n	8000a9c <update_EXTI+0x94>
 8000a98:	2303      	movs	r3, #3
 8000a9a:	e006      	b.n	8000aaa <update_EXTI+0xa2>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e004      	b.n	8000aaa <update_EXTI+0xa2>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e002      	b.n	8000aaa <update_EXTI+0xa2>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <update_EXTI+0xa2>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	7bb9      	ldrb	r1, [r7, #14]
 8000aac:	408b      	lsls	r3, r1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	4944      	ldr	r1, [pc, #272]	; (8000bc4 <update_EXTI+0x1bc>)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4302      	orrs	r2, r0
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]



	// 3. update Rising edge or falling edge or both

	EXTI->RTSR &= ~(1 << EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000abc:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <update_EXTI+0x1d0>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	8812      	ldrh	r2, [r2, #0]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	408a      	lsls	r2, r1
 8000aca:	43d2      	mvns	r2, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a42      	ldr	r2, [pc, #264]	; (8000bd8 <update_EXTI+0x1d0>)
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000ad4:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <update_EXTI+0x1d0>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	8812      	ldrh	r2, [r2, #0]
 8000adc:	4611      	mov	r1, r2
 8000ade:	2201      	movs	r2, #1
 8000ae0:	408a      	lsls	r2, r1
 8000ae2:	43d2      	mvns	r2, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <update_EXTI+0x1d0>)
 8000ae8:	400b      	ands	r3, r1
 8000aea:	60d3      	str	r3, [r2, #12]

	if(EXTI_config->Trigger_Case == EXTI_Trigger_Rising)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7b1b      	ldrb	r3, [r3, #12]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <update_EXTI+0x1d0>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	8812      	ldrh	r2, [r2, #0]
 8000afc:	4611      	mov	r1, r2
 8000afe:	2201      	movs	r2, #1
 8000b00:	408a      	lsls	r2, r1
 8000b02:	4611      	mov	r1, r2
 8000b04:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b06:	430b      	orrs	r3, r1
 8000b08:	6093      	str	r3, [r2, #8]
 8000b0a:	e029      	b.n	8000b60 <update_EXTI+0x158>
	}else if(EXTI_config->Trigger_Case == EXTI_Trigger_Falling)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7b1b      	ldrb	r3, [r3, #12]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d10b      	bne.n	8000b2c <update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	8812      	ldrh	r2, [r2, #0]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	2201      	movs	r2, #1
 8000b20:	408a      	lsls	r2, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b26:	430b      	orrs	r3, r1
 8000b28:	60d3      	str	r3, [r2, #12]
 8000b2a:	e019      	b.n	8000b60 <update_EXTI+0x158>
	}else if(EXTI_config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7b1b      	ldrb	r3, [r3, #12]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d115      	bne.n	8000b60 <update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	8812      	ldrh	r2, [r2, #0]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	2201      	movs	r2, #1
 8000b40:	408a      	lsls	r2, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	4a24      	ldr	r2, [pc, #144]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b46:	430b      	orrs	r3, r1
 8000b48:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	8812      	ldrh	r2, [r2, #0]
 8000b52:	4611      	mov	r1, r2
 8000b54:	2201      	movs	r2, #1
 8000b56:	408a      	lsls	r2, r1
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	60d3      	str	r3, [r2, #12]




	// 4. update IRQ Handling callback
	GP_IRQ_CallBack[EXTI_config->EXTI_PINS.EXTI_Input_Line_Number] = EXTI_config->P_IRQ_CallBack;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	691b      	ldr	r3, [r3, #16]
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <update_EXTI+0x1d4>)
 8000b6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]




	// 5. Enable/Disable IRQ
	if(EXTI_config->IRQ_EN == EXTI_IRQ_Enable)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7b5b      	ldrb	r3, [r3, #13]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d110      	bne.n	8000b9a <update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	8812      	ldrh	r2, [r2, #0]
 8000b80:	4611      	mov	r1, r2
 8000b82:	2201      	movs	r2, #1
 8000b84:	408a      	lsls	r2, r1
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe6c 	bl	8000870 <Enable_NVIC>
	}
	// ===========================================================



}
 8000b98:	e010      	b.n	8000bbc <update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <update_EXTI+0x1d0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	8812      	ldrh	r2, [r2, #0]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	408a      	lsls	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	4611      	mov	r1, r2
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <update_EXTI+0x1d0>)
 8000bae:	400b      	ands	r3, r1
 8000bb0:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_config->EXTI_PINS.EXTI_Input_Line_Number);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fec0 	bl	800093c <Disable_NVIC>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40011000 	.word	0x40011000
 8000bd4:	40011400 	.word	0x40011400
 8000bd8:	40010400 	.word	0x40010400
 8000bdc:	20000054 	.word	0x20000054

08000be0 <MCAL_EXTI_GPIO_Init>:
 * 					 also mandatory to Enable RCC clock for AFIO and the corresponding GPIO
 * ===================================
 * */

void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_cfg)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	update_EXTI(EXTI_cfg);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff0d 	bl	8000a08 <update_EXTI>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <EXTI0_IRQHandler>:
 * ======================        ISR Function        =======================
 * =========================================================================
 * =========================================================================
 */
void EXTI0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <EXTI0_IRQHandler+0x1c>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <EXTI0_IRQHandler+0x1c>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[0]();
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <EXTI0_IRQHandler+0x20>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4798      	blx	r3

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40010400 	.word	0x40010400
 8000c18:	20000054 	.word	0x20000054

08000c1c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<1);
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <EXTI1_IRQHandler+0x1c>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <EXTI1_IRQHandler+0x1c>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[1]();
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <EXTI1_IRQHandler+0x20>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4798      	blx	r3
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010400 	.word	0x40010400
 8000c3c:	20000054 	.word	0x20000054

08000c40 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<2);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <EXTI2_IRQHandler+0x1c>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <EXTI2_IRQHandler+0x1c>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[2]();
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <EXTI2_IRQHandler+0x20>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	4798      	blx	r3

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010400 	.word	0x40010400
 8000c60:	20000054 	.word	0x20000054

08000c64 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<3);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <EXTI3_IRQHandler+0x1c>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <EXTI3_IRQHandler+0x1c>)
 8000c6e:	f043 0308 	orr.w	r3, r3, #8
 8000c72:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[3]();
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <EXTI3_IRQHandler+0x20>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4798      	blx	r3

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010400 	.word	0x40010400
 8000c84:	20000054 	.word	0x20000054

08000c88 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<4);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <EXTI4_IRQHandler+0x1c>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <EXTI4_IRQHandler+0x1c>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[4]();
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <EXTI4_IRQHandler+0x20>)
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	4798      	blx	r3

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010400 	.word	0x40010400
 8000ca8:	20000054 	.word	0x20000054

08000cac <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { EXTI->PR |= (1<<5) ;          GP_IRQ_CallBack[5](); }
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f003 0320 	and.w	r3, r3, #32
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d008      	beq.n	8000cce <EXTI9_5_IRQHandler+0x22>
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	6153      	str	r3, [r2, #20]
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <EXTI9_5_IRQHandler+0xa4>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) { EXTI->PR |= (1<<6) ;          GP_IRQ_CallBack[6](); }
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d008      	beq.n	8000cec <EXTI9_5_IRQHandler+0x40>
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	6153      	str	r3, [r2, #20]
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <EXTI9_5_IRQHandler+0xa4>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) { EXTI->PR |= (1<<7) ;          GP_IRQ_CallBack[7](); }
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d008      	beq.n	8000d0a <EXTI9_5_IRQHandler+0x5e>
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d02:	6153      	str	r3, [r2, #20]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <EXTI9_5_IRQHandler+0xa4>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { EXTI->PR |= (1<<8) ;          GP_IRQ_CallBack[8](); }
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d008      	beq.n	8000d28 <EXTI9_5_IRQHandler+0x7c>
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <EXTI9_5_IRQHandler+0xa4>)
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { EXTI->PR |= (1<<9) ;          GP_IRQ_CallBack[9](); }
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d008      	beq.n	8000d46 <EXTI9_5_IRQHandler+0x9a>
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <EXTI9_5_IRQHandler+0xa0>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3e:	6153      	str	r3, [r2, #20]
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <EXTI9_5_IRQHandler+0xa4>)
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	4798      	blx	r3
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400
 8000d50:	20000054 	.word	0x20000054

08000d54 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { EXTI->PR |= (1<<10) ;          GP_IRQ_CallBack[10](); }
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <EXTI15_10_IRQHandler+0x22>
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6153      	str	r3, [r2, #20]
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <EXTI15_10_IRQHandler+0xc0>)
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) { EXTI->PR |= (1<<11) ;          GP_IRQ_CallBack[11](); }
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <EXTI15_10_IRQHandler+0x40>
 8000d82:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	6153      	str	r3, [r2, #20]
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <EXTI15_10_IRQHandler+0xc0>)
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { EXTI->PR |= (1<<12) ;          GP_IRQ_CallBack[12](); }
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d008      	beq.n	8000db2 <EXTI15_10_IRQHandler+0x5e>
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000daa:	6153      	str	r3, [r2, #20]
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <EXTI15_10_IRQHandler+0xc0>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { EXTI->PR |= (1<<13) ;          GP_IRQ_CallBack[13](); }
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d008      	beq.n	8000dd0 <EXTI15_10_IRQHandler+0x7c>
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <EXTI15_10_IRQHandler+0xc0>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { EXTI->PR |= (1<<14) ;          GP_IRQ_CallBack[14](); }
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d008      	beq.n	8000dee <EXTI15_10_IRQHandler+0x9a>
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de6:	6153      	str	r3, [r2, #20]
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <EXTI15_10_IRQHandler+0xc0>)
 8000dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dec:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { EXTI->PR |= (1<<15) ;          GP_IRQ_CallBack[15](); }
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d008      	beq.n	8000e0c <EXTI15_10_IRQHandler+0xb8>
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <EXTI15_10_IRQHandler+0xbc>)
 8000e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e04:	6153      	str	r3, [r2, #20]
 8000e06:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <EXTI15_10_IRQHandler+0xc0>)
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	4798      	blx	r3

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40010400 	.word	0x40010400
 8000e14:	20000054 	.word	0x20000054

08000e18 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e28:	f000 80a5 	beq.w	8000f76 <Get_CRLH_Position+0x15e>
 8000e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e30:	f300 80a3 	bgt.w	8000f7a <Get_CRLH_Position+0x162>
 8000e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e38:	f000 809b 	beq.w	8000f72 <Get_CRLH_Position+0x15a>
 8000e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e40:	f300 809b 	bgt.w	8000f7a <Get_CRLH_Position+0x162>
 8000e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e48:	f000 8091 	beq.w	8000f6e <Get_CRLH_Position+0x156>
 8000e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e50:	f300 8093 	bgt.w	8000f7a <Get_CRLH_Position+0x162>
 8000e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e58:	f000 8087 	beq.w	8000f6a <Get_CRLH_Position+0x152>
 8000e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e60:	f300 808b 	bgt.w	8000f7a <Get_CRLH_Position+0x162>
 8000e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e68:	d07d      	beq.n	8000f66 <Get_CRLH_Position+0x14e>
 8000e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e6e:	f300 8084 	bgt.w	8000f7a <Get_CRLH_Position+0x162>
 8000e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e76:	d074      	beq.n	8000f62 <Get_CRLH_Position+0x14a>
 8000e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7c:	dc7d      	bgt.n	8000f7a <Get_CRLH_Position+0x162>
 8000e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e82:	d06c      	beq.n	8000f5e <Get_CRLH_Position+0x146>
 8000e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e88:	dc77      	bgt.n	8000f7a <Get_CRLH_Position+0x162>
 8000e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e8e:	d064      	beq.n	8000f5a <Get_CRLH_Position+0x142>
 8000e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e94:	dc71      	bgt.n	8000f7a <Get_CRLH_Position+0x162>
 8000e96:	2b80      	cmp	r3, #128	; 0x80
 8000e98:	d05d      	beq.n	8000f56 <Get_CRLH_Position+0x13e>
 8000e9a:	2b80      	cmp	r3, #128	; 0x80
 8000e9c:	dc6d      	bgt.n	8000f7a <Get_CRLH_Position+0x162>
 8000e9e:	2b20      	cmp	r3, #32
 8000ea0:	dc48      	bgt.n	8000f34 <Get_CRLH_Position+0x11c>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	dd69      	ble.n	8000f7a <Get_CRLH_Position+0x162>
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	2b1f      	cmp	r3, #31
 8000eaa:	d866      	bhi.n	8000f7a <Get_CRLH_Position+0x162>
 8000eac:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <Get_CRLH_Position+0x9c>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000f3b 	.word	0x08000f3b
 8000eb8:	08000f3f 	.word	0x08000f3f
 8000ebc:	08000f7b 	.word	0x08000f7b
 8000ec0:	08000f43 	.word	0x08000f43
 8000ec4:	08000f7b 	.word	0x08000f7b
 8000ec8:	08000f7b 	.word	0x08000f7b
 8000ecc:	08000f7b 	.word	0x08000f7b
 8000ed0:	08000f47 	.word	0x08000f47
 8000ed4:	08000f7b 	.word	0x08000f7b
 8000ed8:	08000f7b 	.word	0x08000f7b
 8000edc:	08000f7b 	.word	0x08000f7b
 8000ee0:	08000f7b 	.word	0x08000f7b
 8000ee4:	08000f7b 	.word	0x08000f7b
 8000ee8:	08000f7b 	.word	0x08000f7b
 8000eec:	08000f7b 	.word	0x08000f7b
 8000ef0:	08000f4b 	.word	0x08000f4b
 8000ef4:	08000f7b 	.word	0x08000f7b
 8000ef8:	08000f7b 	.word	0x08000f7b
 8000efc:	08000f7b 	.word	0x08000f7b
 8000f00:	08000f7b 	.word	0x08000f7b
 8000f04:	08000f7b 	.word	0x08000f7b
 8000f08:	08000f7b 	.word	0x08000f7b
 8000f0c:	08000f7b 	.word	0x08000f7b
 8000f10:	08000f7b 	.word	0x08000f7b
 8000f14:	08000f7b 	.word	0x08000f7b
 8000f18:	08000f7b 	.word	0x08000f7b
 8000f1c:	08000f7b 	.word	0x08000f7b
 8000f20:	08000f7b 	.word	0x08000f7b
 8000f24:	08000f7b 	.word	0x08000f7b
 8000f28:	08000f7b 	.word	0x08000f7b
 8000f2c:	08000f7b 	.word	0x08000f7b
 8000f30:	08000f4f 	.word	0x08000f4f
 8000f34:	2b40      	cmp	r3, #64	; 0x40
 8000f36:	d00c      	beq.n	8000f52 <Get_CRLH_Position+0x13a>
 8000f38:	e01f      	b.n	8000f7a <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e01e      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e01c      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000f42:	2308      	movs	r3, #8
 8000f44:	e01a      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 8000f46:	230c      	movs	r3, #12
 8000f48:	e018      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	e016      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 8000f4e:	2314      	movs	r3, #20
 8000f50:	e014      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 8000f52:	2318      	movs	r3, #24
 8000f54:	e012      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 8000f56:	231c      	movs	r3, #28
 8000f58:	e010      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e00e      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	e00c      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 8000f62:	2308      	movs	r3, #8
 8000f64:	e00a      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 8000f66:	230c      	movs	r3, #12
 8000f68:	e008      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	e006      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 8000f6e:	2314      	movs	r3, #20
 8000f70:	e004      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 8000f72:	2318      	movs	r3, #24
 8000f74:	e002      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 8000f76:	231c      	movs	r3, #28
 8000f78:	e000      	b.n	8000f7c <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MCAL_GPIO_Init>:
 * @Note			-STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 					 but LQFP48 package has only GPIO A,B,part of (C,D) exported as external PINS from the MCU
 * ===================================
 * */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	// port configuration register low (GPIOx_CRL) configure pin from 0 => 7
	// port configuration register high (GPIOx_CRH) configure pin from 8 => 15
	volatile uint32_t*  configRegister = NULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL  :  &GPIOx->CRH;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	2bff      	cmp	r3, #255	; 0xff
 8000fa0:	d801      	bhi.n	8000fa6 <MCAL_GPIO_Init+0x1e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	e001      	b.n	8000faa <MCAL_GPIO_Init+0x22>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff31 	bl	8000e18 <Get_CRLH_Position>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	230f      	movs	r3, #15
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	601a      	str	r2, [r3, #0]

	// if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	d00b      	beq.n	8000fea <MCAL_GPIO_Init+0x62>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	789b      	ldrb	r3, [r3, #2]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d007      	beq.n	8000fea <MCAL_GPIO_Init+0x62>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d003      	beq.n	8000fea <MCAL_GPIO_Init+0x62>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d10e      	bne.n	8001008 <MCAL_GPIO_Init+0x80>
	{
		//SET CNF0[1:0] MODE0[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_output_speed)) & 0x0F );
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	789b      	ldrb	r3, [r3, #2]
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	78db      	ldrb	r3, [r3, #3]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e02c      	b.n	8001062 <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else //  00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	789b      	ldrb	r3, [r3, #2]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d003      	beq.n	8001018 <MCAL_GPIO_Init+0x90>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	789b      	ldrb	r3, [r3, #2]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d107      	bne.n	8001028 <MCAL_GPIO_Init+0xa0>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2) | 0x0)& 0x0F);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e01c      	b.n	8001062 <MCAL_GPIO_Init+0xda>
		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF)) // Consider it as input floating
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	789b      	ldrb	r3, [r3, #2]
 800102c:	2b08      	cmp	r3, #8
 800102e:	d102      	bne.n	8001036 <MCAL_GPIO_Init+0xae>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((GPIO_MODE_INPUT_FLOATING) << 2)  | 0x0) & 0x0F);
 8001030:	2304      	movs	r3, #4
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e015      	b.n	8001062 <MCAL_GPIO_Init+0xda>
		}else // PU PD
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2) | 0x0)& 0x0F);
 8001036:	2308      	movs	r3, #8
 8001038:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU) // pull up
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d107      	bne.n	8001052 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1 => input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	8812      	ldrh	r2, [r2, #0]
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	e007      	b.n	8001062 <MCAL_GPIO_Init+0xda>
			}else // pull down
			{
				//Table 20. Port bit configuration table PxODR 0 => input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	8812      	ldrh	r2, [r2, #0]
 800105a:	43d2      	mvns	r2, r2
 800105c:	401a      	ands	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write on CRL OR CRH
	(*configRegister) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8001062:	7bfc      	ldrb	r4, [r7, #15]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fed5 	bl	8000e18 <Get_CRLH_Position>
 800106e:	4603      	mov	r3, r0
 8001070:	fa04 f203 	lsl.w	r2, r4, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	431a      	orrs	r2, r3
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	601a      	str	r2, [r3, #0]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bd90      	pop	{r4, r7, pc}

08001086 <MCAL_GPIO_ReadPin>:
 * @retval			-the input pin value (two values based on @ref GPIO_PIN_state
 * @Note			-none
 * ===================================
 * */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx , uint16_t PinNumber)
{
 8001086:	b480      	push	{r7}
 8001088:	b085      	sub	sp, #20
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	460b      	mov	r3, r1
 8001090:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_SET;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e001      	b.n	80010a8 <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitStatus = GPIO_PIN_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
	}
	return bitStatus;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <MCAL_GPIO_WritePin>:
 * @retval			-none
 * @Note			-none
 * ===================================
 * */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t value)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <MCAL_GPIO_WritePin+0x1e>
		// OR
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;

	}

}
 80010d0:	e002      	b.n	80010d8 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	615a      	str	r2, [r3, #20]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <MCAL_GPIO_WritePort>:
 * @retval			-none
 * @Note			-none
 * ===================================
 * */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx,uint16_t value)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60da      	str	r2, [r3, #12]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <I2C1_EV_IRQHandler>:
//I2C_EV_DATA_REQ,	// the APP layer should send the data (I2C_Slave_SendData) in this state
//I2C_EV_DATA_REV,	// the APP layer should receive data  (I2C_Slave_ReceiveData) in this state

// I2C1 Event Interrupt Handler
void I2C1_EV_IRQHandler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
//	Global_I2C_Config[0].P_Slave_Event_CallBack(state);
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <I2C1_ER_IRQHandler>:

// I2C1 Error Interrupt Handler
void I2C1_ER_IRQHandler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
	...

08001118 <MCAL_SPI_Init>:
 * @Note			- support for SPI full Duplex master/slave only & NSS HW/SW
 * 					- in case of master you have to configure pin and drive it
 * ===================================
 * */
void MCAL_SPI_Init(SPI_TypeDef * SPIx , SPI_Config_t * SPI_config )
{
 8001118:	b4b0      	push	{r4, r5, r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	/* ------------- safety for register ------------- */
	uint16_t tempRegister_CR1 = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	81fb      	strh	r3, [r7, #14]
	uint16_t tempRegister_CR2 = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	81bb      	strh	r3, [r7, #12]


	if(SPIx == SPI1)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a45      	ldr	r2, [pc, #276]	; (8001244 <MCAL_SPI_Init+0x12c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d113      	bne.n	800115a <MCAL_SPI_Init+0x42>
	{
		Global_SPI_Config1 = *SPI_config;
 8001132:	4a45      	ldr	r2, [pc, #276]	; (8001248 <MCAL_SPI_Init+0x130>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4614      	mov	r4, r2
 8001138:	461d      	mov	r5, r3
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001142:	e884 0003 	stmia.w	r4, {r0, r1}

		Global_SPI_Config[SPI1_Index] = &Global_SPI_Config1;
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <MCAL_SPI_Init+0x134>)
 8001148:	4a3f      	ldr	r2, [pc, #252]	; (8001248 <MCAL_SPI_Init+0x130>)
 800114a:	601a      	str	r2, [r3, #0]
		RCC_SPI1_CLK_EN();
 800114c:	4b40      	ldr	r3, [pc, #256]	; (8001250 <MCAL_SPI_Init+0x138>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <MCAL_SPI_Init+0x138>)
 8001152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	e016      	b.n	8001188 <MCAL_SPI_Init+0x70>
	}else if(SPIx == SPI2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <MCAL_SPI_Init+0x13c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d112      	bne.n	8001188 <MCAL_SPI_Init+0x70>
	{
		Global_SPI_Config2 = *SPI_config;
 8001162:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <MCAL_SPI_Init+0x140>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4614      	mov	r4, r2
 8001168:	461d      	mov	r5, r3
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001172:	e884 0003 	stmia.w	r4, {r0, r1}
		Global_SPI_Config[SPI2_Index] = &Global_SPI_Config2;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <MCAL_SPI_Init+0x134>)
 8001178:	4a37      	ldr	r2, [pc, #220]	; (8001258 <MCAL_SPI_Init+0x140>)
 800117a:	605a      	str	r2, [r3, #4]
		RCC_SPI2_CLK_EN();
 800117c:	4b34      	ldr	r3, [pc, #208]	; (8001250 <MCAL_SPI_Init+0x138>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	4a33      	ldr	r2, [pc, #204]	; (8001250 <MCAL_SPI_Init+0x138>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	61d3      	str	r3, [r2, #28]
	}

	/* ------------- enable SPI CR1.SPE BIT6 W1 to enable ------------- */
	tempRegister_CR1 = (0x1U<<6);
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	81fb      	strh	r3, [r7, #14]


	/* --------------------- master | slave --------------------------- */
	tempRegister_CR1 |= SPI_config->Device_Mode;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	4313      	orrs	r3, r2
 8001194:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_Communication_Mode -------------------- */
	tempRegister_CR1 |= SPI_config->Communication_Mode;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	885a      	ldrh	r2, [r3, #2]
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	4313      	orrs	r3, r2
 800119e:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_Frame_Format ------------------------- */
	tempRegister_CR1 |= SPI_config->Frame_Format;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	889a      	ldrh	r2, [r3, #4]
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_DataSize ----------------------------- */
	tempRegister_CR1 |= SPI_config->DataSize;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	88da      	ldrh	r2, [r3, #6]
 80011ae:	89fb      	ldrh	r3, [r7, #14]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_CLKPolarity ------------------------- */
	tempRegister_CR1 |= SPI_config->CLKPolarity;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	891a      	ldrh	r2, [r3, #8]
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	81fb      	strh	r3, [r7, #14]


	/* -------------------- SPI_CLKPhase ---------------------------- */
	tempRegister_CR1 |= SPI_config->CLKPhase;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	895a      	ldrh	r2, [r3, #10]
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	81fb      	strh	r3, [r7, #14]


	/* --------------------- SPI_NSS ------------------------------- */
	if(SPI_config->NSS == SPI_NSS_HW_Master_SS_Output_Enable)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	899b      	ldrh	r3, [r3, #12]
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d105      	bne.n	80011dc <MCAL_SPI_Init+0xc4>
	{
		tempRegister_CR2 |= SPI_config->NSS;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	899a      	ldrh	r2, [r3, #12]
 80011d4:	89bb      	ldrh	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	81bb      	strh	r3, [r7, #12]
 80011da:	e004      	b.n	80011e6 <MCAL_SPI_Init+0xce>
	}else if(SPI_config->NSS == SPI_NSS_HW_Master_SS_Output_Disable)
	{
		tempRegister_CR2 &= SPI_config->NSS;
	}else
	{
		tempRegister_CR1 |= SPI_config->NSS;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	899a      	ldrh	r2, [r3, #12]
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	81fb      	strh	r3, [r7, #14]
	}


	/* --------------------- SPI_SPI_BaudRate --------------------- */
	tempRegister_CR1 |= SPI_config->SPI_BaudRate;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	89da      	ldrh	r2, [r3, #14]
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	81fb      	strh	r3, [r7, #14]


	/* --------------------- SPI_IRQ_Enable ----------------------- */
	if(SPI_config->IRQ_Enable != SPI_IRQ_Enable_NONE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	8a1b      	ldrh	r3, [r3, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d019      	beq.n	800122c <MCAL_SPI_Init+0x114>
	{
		tempRegister_CR2 |= SPI_config->IRQ_Enable;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	8a1a      	ldrh	r2, [r3, #16]
 80011fc:	89bb      	ldrh	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MCAL_SPI_Init+0x12c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d106      	bne.n	8001218 <MCAL_SPI_Init+0x100>
		{
			NVIC_IRQ35_SPI1_Enable;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MCAL_SPI_Init+0x144>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MCAL_SPI_Init+0x144>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e009      	b.n	800122c <MCAL_SPI_Init+0x114>
		}else if(SPIx == SPI2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <MCAL_SPI_Init+0x13c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d105      	bne.n	800122c <MCAL_SPI_Init+0x114>
		{
			NVIC_IRQ36_SPI2_Enable;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MCAL_SPI_Init+0x144>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <MCAL_SPI_Init+0x144>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
		}
	}



	SPIx->SPI_CR1 = tempRegister_CR1;
 800122c:	89fa      	ldrh	r2, [r7, #14]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
	SPIx->SPI_CR2 = tempRegister_CR2;
 8001232:	89ba      	ldrh	r2, [r7, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	605a      	str	r2, [r3, #4]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bcb0      	pop	{r4, r5, r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40013000 	.word	0x40013000
 8001248:	20000098 	.word	0x20000098
 800124c:	20000090 	.word	0x20000090
 8001250:	40021000 	.word	0x40021000
 8001254:	40003800 	.word	0x40003800
 8001258:	200000b0 	.word	0x200000b0
 800125c:	e000e104 	.word	0xe000e104

08001260 <MCAL_SPI_GPIO_Set_Pins>:
 * @Note			- support for SPI full Duplex master/slave only & NSS HW/SW
 * 					- in case of master you have to configure pin and drive it
 * ===================================
 * */
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef * SPIx )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg ;
	if(SPIx == SPI1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a73      	ldr	r2, [pc, #460]	; (8001438 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d169      	bne.n	8001344 <MCAL_SPI_GPIO_Set_Pins+0xe4>
		 * PA6  ====> SPI1_MISO
		 * PA7  ====> SPI1_MOSI
		 */
		// 9.1.11 GPIO configurations for device peripherals
		// Table 25. SPI
		if(Global_SPI_Config[SPI1_Index]->Device_Mode == Device_Mode_Master)
 8001270:	4b72      	ldr	r3, [pc, #456]	; (800143c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d134      	bne.n	80012e4 <MCAL_SPI_GPIO_Set_Pins+0x84>
		{
			// PA4  ====> SPI1_NSS
			switch(Global_SPI_Config[SPI1_Index]->NSS)
 800127a:	4b70      	ldr	r3, [pc, #448]	; (800143c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	899b      	ldrh	r3, [r3, #12]
 8001280:	2b04      	cmp	r3, #4
 8001282:	d10c      	bne.n	800129e <MCAL_SPI_GPIO_Set_Pins+0x3e>
				pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
				MCAL_GPIO_Init(GPIOA, &pinCfg);
				break;
			case SPI_NSS_HW_Master_SS_Output_Enable:
				//Hardware master/ NSS output enabled Alternate function push-pull
				pinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8001284:	2310      	movs	r3, #16
 8001286:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 8001288:	2306      	movs	r3, #6
 800128a:	73bb      	strb	r3, [r7, #14]
				pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	486a      	ldr	r0, [pc, #424]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8001298:	f7ff fe76 	bl	8000f88 <MCAL_GPIO_Init>
				break;
 800129c:	bf00      	nop
			}


			// PA5  ====> SPI1_SCK
			// Master Alternate function push-pull
			pinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800129e:	2320      	movs	r3, #32
 80012a0:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 80012a2:	2306      	movs	r3, #6
 80012a4:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4863      	ldr	r0, [pc, #396]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80012b2:	f7ff fe69 	bl	8000f88 <MCAL_GPIO_Init>


			//PA6  ====> SPI1_MISO
			// Full duplex / master Input floating / Input pull-up
			pinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80012b6:	2340      	movs	r3, #64	; 0x40
 80012b8:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	485e      	ldr	r0, [pc, #376]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80012c6:	f7ff fe5f 	bl	8000f88 <MCAL_GPIO_Init>


			// PA7  ====> SPI1_MOSI
			// Full duplex / master Alternate function push-pull
			pinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 80012ce:	2306      	movs	r3, #6
 80012d0:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	4858      	ldr	r0, [pc, #352]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80012de:	f7ff fe53 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}

}
 80012e2:	e0a4      	b.n	800142e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_HW_Slave)
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	899b      	ldrh	r3, [r3, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d109      	bne.n	8001302 <MCAL_SPI_GPIO_Set_Pins+0xa2>
				pinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80012ee:	2310      	movs	r3, #16
 80012f0:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 80012f2:	2301      	movs	r3, #1
 80012f4:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &pinCfg);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4619      	mov	r1, r3
 80012fc:	4850      	ldr	r0, [pc, #320]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80012fe:	f7ff fe43 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8001302:	2320      	movs	r3, #32
 8001304:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 8001306:	2301      	movs	r3, #1
 8001308:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	484b      	ldr	r0, [pc, #300]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8001312:	f7ff fe39 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 800131a:	2306      	movs	r3, #6
 800131c:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4619      	mov	r1, r3
 8001328:	4845      	ldr	r0, [pc, #276]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800132a:	f7ff fe2d 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 8001332:	2301      	movs	r3, #1
 8001334:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pinCfg);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4840      	ldr	r0, [pc, #256]	; (8001440 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 800133e:	f7ff fe23 	bl	8000f88 <MCAL_GPIO_Init>
}
 8001342:	e074      	b.n	800142e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
	}else if(SPIx == SPI2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <MCAL_SPI_GPIO_Set_Pins+0x1e4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d170      	bne.n	800142e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode == Device_Mode_Master)
 800134c:	4b3b      	ldr	r3, [pc, #236]	; (800143c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	2b04      	cmp	r3, #4
 8001354:	d138      	bne.n	80013c8 <MCAL_SPI_GPIO_Set_Pins+0x168>
			switch(Global_SPI_Config[SPI2_Index]->NSS)
 8001356:	4b39      	ldr	r3, [pc, #228]	; (800143c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	899b      	ldrh	r3, [r3, #12]
 800135c:	2b04      	cmp	r3, #4
 800135e:	d10d      	bne.n	800137c <MCAL_SPI_GPIO_Set_Pins+0x11c>
				pinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 8001366:	2306      	movs	r3, #6
 8001368:	73bb      	strb	r3, [r7, #14]
				pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &pinCfg);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4834      	ldr	r0, [pc, #208]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001376:	f7ff fe07 	bl	8000f88 <MCAL_GPIO_Init>
				break;
 800137a:	bf00      	nop
			pinCfg.GPIO_PinNumber = GPIO_PIN_13;
 800137c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001380:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 8001382:	2306      	movs	r3, #6
 8001384:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinCfg);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	482d      	ldr	r0, [pc, #180]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001392:	f7ff fdf9 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8001396:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139a:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 800139c:	2301      	movs	r3, #1
 800139e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pinCfg);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4619      	mov	r1, r3
 80013a6:	4828      	ldr	r0, [pc, #160]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80013a8:	f7ff fdee 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_15;
 80013ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b0:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 80013b2:	2306      	movs	r3, #6
 80013b4:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80013b6:	2301      	movs	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinCfg);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80013c2:	f7ff fde1 	bl	8000f88 <MCAL_GPIO_Init>
}
 80013c6:	e032      	b.n	800142e <MCAL_SPI_GPIO_Set_Pins+0x1ce>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_HW_Slave)
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	899b      	ldrh	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10a      	bne.n	80013e8 <MCAL_SPI_GPIO_Set_Pins+0x188>
				pinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	81bb      	strh	r3, [r7, #12]
				pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 80013d8:	2301      	movs	r3, #1
 80013da:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &pinCfg);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	4819      	ldr	r0, [pc, #100]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80013e4:	f7ff fdd0 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80013e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ec:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pinCfg);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4619      	mov	r1, r3
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 80013fa:	f7ff fdc5 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_14;
 80013fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001402:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_OUTPUT_AF_PP;
 8001404:	2306      	movs	r3, #6
 8001406:	73bb      	strb	r3, [r7, #14]
			pinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pinCfg);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 8001414:	f7ff fdb8 	bl	8000f88 <MCAL_GPIO_Init>
			pinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8001418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800141c:	81bb      	strh	r3, [r7, #12]
			pinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLOATING;
 800141e:	2301      	movs	r3, #1
 8001420:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pinCfg);
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4619      	mov	r1, r3
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <MCAL_SPI_GPIO_Set_Pins+0x1e8>)
 800142a:	f7ff fdad 	bl	8000f88 <MCAL_GPIO_Init>
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40013000 	.word	0x40013000
 800143c:	20000090 	.word	0x20000090
 8001440:	40010800 	.word	0x40010800
 8001444:	40003800 	.word	0x40003800
 8001448:	40010c00 	.word	0x40010c00

0800144c <MCAL_SPI_TX_RX>:
 * @retval			- none
 * @Note			- none
 * ===================================
 * */
void MCAL_SPI_TX_RX(SPI_TypeDef * SPIx , uint16_t *pTxBuffer ,  enum PollingMechanism PollingEN)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	71fb      	strb	r3, [r7, #7]
	/* ---------------- transmit ---------------- */
	if(PollingEN == PollingEnable)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <MCAL_SPI_TX_RX+0x22>
		while(!(SPIx->SPI_SR & SPI_SR_TXE));
 8001460:	bf00      	nop
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f9      	beq.n	8001462 <MCAL_SPI_TX_RX+0x16>

	SPIx->SPI_DR = *pTxBuffer;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	60da      	str	r2, [r3, #12]


	/* ---------------- receive ---------------- */
	if(PollingEN == PollingEnable)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <MCAL_SPI_TX_RX+0x40>
		while(!(SPIx->SPI_SR & SPI_SR_RXNE));
 800147e:	bf00      	nop
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f9      	beq.n	8001480 <MCAL_SPI_TX_RX+0x34>

	*pTxBuffer = SPIx->SPI_DR;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	b29a      	uxth	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	801a      	strh	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SPI1_IRQHandler>:
 * ===========================================================================================================
 *											ISR
 * ===========================================================================================================
 * */
void SPI1_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_src;
	IRQ_src.TXE   = ( ( (SPI1->SPI_SR) & (1<<1) ) >> 1);
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <SPI1_IRQHandler+0x54>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	085b      	lsrs	r3, r3, #1
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	793b      	ldrb	r3, [r7, #4]
 80014b4:	f362 0300 	bfi	r3, r2, #0, #1
 80014b8:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE  = ( ( (SPI1->SPI_SR) & (1<<0) ) >> 0);
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <SPI1_IRQHandler+0x54>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	793b      	ldrb	r3, [r7, #4]
 80014c6:	f362 0341 	bfi	r3, r2, #1, #1
 80014ca:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI  = ( ( (SPI1->SPI_SR) & (1<<4) ) >> 4);
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <SPI1_IRQHandler+0x54>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	793b      	ldrb	r3, [r7, #4]
 80014da:	f362 0382 	bfi	r3, r2, #2, #1
 80014de:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(IRQ_src);
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SPI1_IRQHandler+0x58>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	7938      	ldrb	r0, [r7, #4]
 80014e8:	4798      	blx	r3
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	20000090 	.word	0x20000090

080014fc <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_src;
	IRQ_src.TXE   = ( ( (SPI2->SPI_SR) & (1<<1) ) >> 1);
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <SPI2_IRQHandler+0x54>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	f362 0300 	bfi	r3, r2, #0, #1
 8001514:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE  = ( ( (SPI2->SPI_SR) & (1<<0) ) >> 0);
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <SPI2_IRQHandler+0x54>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	793b      	ldrb	r3, [r7, #4]
 8001522:	f362 0341 	bfi	r3, r2, #1, #1
 8001526:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI  = ( ( (SPI2->SPI_SR) & (1<<4) ) >> 4);
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <SPI2_IRQHandler+0x54>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	793b      	ldrb	r3, [r7, #4]
 8001536:	f362 0382 	bfi	r3, r2, #2, #1
 800153a:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(IRQ_src);
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SPI2_IRQHandler+0x58>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	7938      	ldrb	r0, [r7, #4]
 8001544:	4798      	blx	r3
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40003800 	.word	0x40003800
 8001554:	20000090 	.word	0x20000090

08001558 <USART1_IRQHandler>:
 * ===========================================================================================================
 * */


void USART1_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <USART1_IRQHandler+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	4798      	blx	r3
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200000c8 	.word	0x200000c8

0800156c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <USART2_IRQHandler+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	4798      	blx	r3
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200000c8 	.word	0x200000c8

08001580 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <USART3_IRQHandler+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	4798      	blx	r3
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200000c8 	.word	0x200000c8

08001594 <Clock_Init>:
 void ECU1_start_Verifying_Entered_Car();
 void ECU2_start_Verifying_Exit_Car(void);


void Clock_Init(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <Clock_Init+0x3c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <Clock_Init+0x3c>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <Clock_Init+0x3c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <Clock_Init+0x3c>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <Clock_Init+0x3c>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <Clock_Init+0x3c>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <Clock_Init+0x3c>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <Clock_Init+0x3c>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6193      	str	r3, [r2, #24]

}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000

080015d4 <main>:



int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	Clock_Init();
 80015d8:	f7ff ffdc 	bl	8001594 <Clock_Init>
	keypad_Init();
 80015dc:	f7fe fdd2 	bl	8000184 <keypad_Init>
	LCD_Init();
 80015e0:	f7fe fef2 	bl	80003c8 <LCD_Init>
	HAL_SEVEN_SEG_init();
 80015e4:	f7ff f8e6 	bl	80007b4 <HAL_SEVEN_SEG_init>
	ECUs_EXTI_init();
 80015e8:	f000 f818 	bl	800161c <ECUs_EXTI_init>
	ECU3_SPI_Init();
 80015ec:	f000 f84c 	bl	8001688 <ECU3_SPI_Init>
	HAL_SEVEN_SEG_Write(available_SlotsNumber);
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <main+0x3c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff f923 	bl	8000840 <HAL_SEVEN_SEG_Write>
	while(1)
	{
		if(!AdminPassword_flag)
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <main+0x40>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <main+0x34>
			Check_Admin_Password(&AdminPassword_flag);
 8001602:	4804      	ldr	r0, [pc, #16]	; (8001614 <main+0x40>)
 8001604:	f000 f9cc 	bl	80019a0 <Check_Admin_Password>
		admin_Tasks(IDs);
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <main+0x44>)
 800160a:	f000 fa4b 	bl	8001aa4 <admin_Tasks>
		if(!AdminPassword_flag)
 800160e:	e7f4      	b.n	80015fa <main+0x26>
 8001610:	20000026 	.word	0x20000026
 8001614:	200000cc 	.word	0x200000cc
 8001618:	20000028 	.word	0x20000028

0800161c <ECUs_EXTI_init>:




void ECUs_EXTI_init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08c      	sub	sp, #48	; 0x30
 8001620:	af00      	add	r7, sp, #0
	EXTI_PinConfig_t EXTI_cfg;


	// init ECU1 => PB10 => ECU1_PORT => ECU1_EXTI_PIN
	// EXTI10PB10 | EXTI15_10_IRQHandler
	EXTI_cfg.EXTI_PINS = EXTI10PB10;
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <ECUs_EXTI_init+0x5c>)
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	ca07      	ldmia	r2, {r0, r1, r2}
 800162a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger_Case = EXTI_Trigger_Rising;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	EXTI_cfg.P_IRQ_CallBack = ECU1_start_Verifying_Entered_Car;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <ECUs_EXTI_init+0x60>)
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
	EXTI_cfg.IRQ_EN = EXTI_IRQ_Enable;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	MCAL_EXTI_GPIO_Init(&EXTI_cfg);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff facc 	bl	8000be0 <MCAL_EXTI_GPIO_Init>


	// init ECU2 => PB9 => ECU2_PORT => ECU2_EXTI_PIN
	// EXTI9PB9 | EXTI9_5_IRQHandler
	EXTI_cfg.EXTI_PINS = EXTI9PB9;
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <ECUs_EXTI_init+0x64>)
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001650:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger_Case = EXTI_Trigger_Rising;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	EXTI_cfg.P_IRQ_CallBack = ECU2_start_Verifying_Exit_Car;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <ECUs_EXTI_init+0x68>)
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
	EXTI_cfg.IRQ_EN = EXTI_IRQ_Enable;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	MCAL_EXTI_GPIO_Init(&EXTI_cfg);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fab9 	bl	8000be0 <MCAL_EXTI_GPIO_Init>
}
 800166e:	bf00      	nop
 8001670:	3730      	adds	r7, #48	; 0x30
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	08001e6c 	.word	0x08001e6c
 800167c:	08001725 	.word	0x08001725
 8001680:	08001e78 	.word	0x08001e78
 8001684:	08001839 	.word	0x08001839

08001688 <ECU3_SPI_Init>:
void ECU3_SPI_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
	 * PB14  ====> SPI2_MISO
	 * PB15  ====> SPI2_MOSI
	 */
	SPI_Config_t ECU3_SPI_cfg;

	ECU3_SPI_cfg.CLKPhase = SPI_CLKPhase_2ndEdge_First_Data_Capture_Edge;
 800168e:	2301      	movs	r3, #1
 8001690:	827b      	strh	r3, [r7, #18]
	ECU3_SPI_cfg.CLKPolarity = SPI_CLKPolarity_1_when_idle;
 8001692:	2302      	movs	r3, #2
 8001694:	823b      	strh	r3, [r7, #16]
	ECU3_SPI_cfg.Communication_Mode = SPI_Direction_2LINE;
 8001696:	2300      	movs	r3, #0
 8001698:	817b      	strh	r3, [r7, #10]
	ECU3_SPI_cfg.DataSize = SPI_DataSize_8BIT;
 800169a:	2300      	movs	r3, #0
 800169c:	81fb      	strh	r3, [r7, #14]

	ECU3_SPI_cfg.Frame_Format = SPI_Frame_Format_MSB_Transmitted_First;
 800169e:	2300      	movs	r3, #0
 80016a0:	81bb      	strh	r3, [r7, #12]
	// assume by default pclk2 = 8MHz
	ECU3_SPI_cfg.SPI_BaudRate = SPI_BaudRatePrescaler_8;
 80016a2:	2310      	movs	r3, #16
 80016a4:	82fb      	strh	r3, [r7, #22]


#ifdef MCU_Act_As_Master
	ECU3_SPI_cfg.Device_Mode = Device_Mode_Master;
 80016a6:	2304      	movs	r3, #4
 80016a8:	813b      	strh	r3, [r7, #8]
	ECU3_SPI_cfg.NSS = SPI_NSS_SW_NSSInternalSoft_Set;
 80016aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ae:	82bb      	strh	r3, [r7, #20]
	ECU3_SPI_cfg.IRQ_Enable = SPI_IRQ_Enable_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	833b      	strh	r3, [r7, #24]
	ECU3_SPI_cfg.P_IRQ_CallBack = 0 ;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]

	//Config SS on PB12 for ECU1
	GPIO_PinConfig_t ECU1_SS_pinCFG;
	ECU1_SS_pinCFG.GPIO_PinNumber = ECU1_SS_PIN;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	80bb      	strh	r3, [r7, #4]
	ECU1_SS_pinCFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80016be:	2304      	movs	r3, #4
 80016c0:	71bb      	strb	r3, [r7, #6]
	ECU1_SS_pinCFG.GPIO_output_speed = GPIO_SPEED_10M;
 80016c2:	2301      	movs	r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(ECU1_PORT, &ECU1_SS_pinCFG);
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <ECU3_SPI_Init+0x94>)
 80016cc:	f7ff fc5c 	bl	8000f88 <MCAL_GPIO_Init>

	//Config SS on PB11 for ECU2
	GPIO_PinConfig_t ECU2_SS_pinCFG;
	ECU2_SS_pinCFG.GPIO_PinNumber = ECU2_SS_PIN;
 80016d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d4:	803b      	strh	r3, [r7, #0]
	ECU2_SS_pinCFG.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80016d6:	2304      	movs	r3, #4
 80016d8:	70bb      	strb	r3, [r7, #2]
	ECU2_SS_pinCFG.GPIO_output_speed = GPIO_SPEED_10M;
 80016da:	2301      	movs	r3, #1
 80016dc:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(ECU2_PORT, &ECU2_SS_pinCFG);
 80016de:	463b      	mov	r3, r7
 80016e0:	4619      	mov	r1, r3
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <ECU3_SPI_Init+0x94>)
 80016e4:	f7ff fc50 	bl	8000f88 <MCAL_GPIO_Init>
	ECU3_SPI_cfg.Communication_Mode = SPI_NSS_HW_Slave;
	ECU3_SPI_cfg.IRQ_Enable = SPI_IRQ_Enable_RXNEIE;
	ECU3_SPI_cfg.P_IRQ_CallBack = SPI_IRQ_CALLBACK;
#endif

	MCAL_SPI_Init(SPI2, &ECU3_SPI_cfg);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <ECU3_SPI_Init+0x98>)
 80016f0:	f7ff fd12 	bl	8001118 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI2);
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <ECU3_SPI_Init+0x98>)
 80016f6:	f7ff fdb3 	bl	8001260 <MCAL_SPI_GPIO_Set_Pins>

	// force slave select (high) idle mode
	MCAL_GPIO_WritePin(ECU1_PORT, ECU1_SS_PIN, 1);
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <ECU3_SPI_Init+0x94>)
 8001702:	f7ff fcd7 	bl	80010b4 <MCAL_GPIO_WritePin>

	// force slave select (high) idle mode
	MCAL_GPIO_WritePin(ECU2_PORT, ECU2_SS_PIN, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <ECU3_SPI_Init+0x94>)
 800170e:	f7ff fcd1 	bl	80010b4 <MCAL_GPIO_WritePin>
}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40010c00 	.word	0x40010c00
 8001720:	40003800 	.word	0x40003800

08001724 <ECU1_start_Verifying_Entered_Car>:



void ECU1_start_Verifying_Entered_Car()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	int counter = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]

	MCAL_GPIO_WritePin(ECU1_PORT, ECU1_SS_PIN, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001734:	4839      	ldr	r0, [pc, #228]	; (800181c <ECU1_start_Verifying_Entered_Car+0xf8>)
 8001736:	f7ff fcbd 	bl	80010b4 <MCAL_GPIO_WritePin>

	do
	{
		MCAL_SPI_TX_RX(SPI2,&ch, PollingEnable);
 800173a:	2200      	movs	r2, #0
 800173c:	4938      	ldr	r1, [pc, #224]	; (8001820 <ECU1_start_Verifying_Entered_Car+0xfc>)
 800173e:	4839      	ldr	r0, [pc, #228]	; (8001824 <ECU1_start_Verifying_Entered_Car+0x100>)
 8001740:	f7ff fe84 	bl	800144c <MCAL_SPI_TX_RX>
		receivedID[counter] = ch;
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <ECU1_start_Verifying_Entered_Car+0xfc>)
 8001746:	7819      	ldrb	r1, [r3, #0]
 8001748:	4a37      	ldr	r2, [pc, #220]	; (8001828 <ECU1_start_Verifying_Entered_Car+0x104>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	460a      	mov	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
		counter++;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3301      	adds	r3, #1
 8001756:	607b      	str	r3, [r7, #4]
	}while(counter != 4);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d1ed      	bne.n	800173a <ECU1_start_Verifying_Entered_Car+0x16>

	MCAL_GPIO_WritePin(ECU1_PORT, ECU1_SS_PIN, 1);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001764:	482d      	ldr	r0, [pc, #180]	; (800181c <ECU1_start_Verifying_Entered_Car+0xf8>)
 8001766:	f7ff fca5 	bl	80010b4 <MCAL_GPIO_WritePin>


	for(int i=0;i<3;i++)
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	e013      	b.n	8001798 <ECU1_start_Verifying_Entered_Car+0x74>
	{
		if(!strcmp(receivedID , IDs+i))
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	4a2c      	ldr	r2, [pc, #176]	; (800182c <ECU1_start_Verifying_Entered_Car+0x108>)
 800177a:	4413      	add	r3, r2
 800177c:	4619      	mov	r1, r3
 800177e:	482a      	ldr	r0, [pc, #168]	; (8001828 <ECU1_start_Verifying_Entered_Car+0x104>)
 8001780:	f7fe fcf6 	bl	8000170 <strcmp>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <ECU1_start_Verifying_Entered_Car+0x6e>
		{
			flag2=1;
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <ECU1_start_Verifying_Entered_Car+0x10c>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
			break;
 8001790:	e005      	b.n	800179e <ECU1_start_Verifying_Entered_Car+0x7a>
	for(int i=0;i<3;i++)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b02      	cmp	r3, #2
 800179c:	dde8      	ble.n	8001770 <ECU1_start_Verifying_Entered_Car+0x4c>
		}
	}
	if(flag2)
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <ECU1_start_Verifying_Entered_Car+0x10c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01f      	beq.n	80017e6 <ECU1_start_Verifying_Entered_Car+0xc2>
	{
		ch = '1';
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <ECU1_start_Verifying_Entered_Car+0xfc>)
 80017a8:	2231      	movs	r2, #49	; 0x31
 80017aa:	701a      	strb	r2, [r3, #0]
		MCAL_GPIO_WritePin(ECU1_PORT, ECU1_SS_PIN, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b2:	481a      	ldr	r0, [pc, #104]	; (800181c <ECU1_start_Verifying_Entered_Car+0xf8>)
 80017b4:	f7ff fc7e 	bl	80010b4 <MCAL_GPIO_WritePin>
		MCAL_SPI_TX_RX(SPI2,&ch, PollingEnable);
 80017b8:	2200      	movs	r2, #0
 80017ba:	4919      	ldr	r1, [pc, #100]	; (8001820 <ECU1_start_Verifying_Entered_Car+0xfc>)
 80017bc:	4819      	ldr	r0, [pc, #100]	; (8001824 <ECU1_start_Verifying_Entered_Car+0x100>)
 80017be:	f7ff fe45 	bl	800144c <MCAL_SPI_TX_RX>
		MCAL_GPIO_WritePin(ECU1_PORT, ECU1_SS_PIN, 1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c8:	4814      	ldr	r0, [pc, #80]	; (800181c <ECU1_start_Verifying_Entered_Car+0xf8>)
 80017ca:	f7ff fc73 	bl	80010b4 <MCAL_GPIO_WritePin>
		available_SlotsNumber--;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <ECU1_start_Verifying_Entered_Car+0x110>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <ECU1_start_Verifying_Entered_Car+0x110>)
 80017d8:	701a      	strb	r2, [r3, #0]
		HAL_SEVEN_SEG_Write(available_SlotsNumber);
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ECU1_start_Verifying_Entered_Car+0x110>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f82e 	bl	8000840 <HAL_SEVEN_SEG_Write>
 80017e4:	e013      	b.n	800180e <ECU1_start_Verifying_Entered_Car+0xea>
	}else
	{
		ch = '0';
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <ECU1_start_Verifying_Entered_Car+0xfc>)
 80017e8:	2230      	movs	r2, #48	; 0x30
 80017ea:	701a      	strb	r2, [r3, #0]
		MCAL_GPIO_WritePin(ECU1_PORT, ECU1_SS_PIN, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f2:	480a      	ldr	r0, [pc, #40]	; (800181c <ECU1_start_Verifying_Entered_Car+0xf8>)
 80017f4:	f7ff fc5e 	bl	80010b4 <MCAL_GPIO_WritePin>
		MCAL_SPI_TX_RX(SPI2,&ch, PollingEnable);
 80017f8:	2200      	movs	r2, #0
 80017fa:	4909      	ldr	r1, [pc, #36]	; (8001820 <ECU1_start_Verifying_Entered_Car+0xfc>)
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <ECU1_start_Verifying_Entered_Car+0x100>)
 80017fe:	f7ff fe25 	bl	800144c <MCAL_SPI_TX_RX>
		MCAL_GPIO_WritePin(ECU1_PORT, ECU1_SS_PIN, 1);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <ECU1_start_Verifying_Entered_Car+0xf8>)
 800180a:	f7ff fc53 	bl	80010b4 <MCAL_GPIO_WritePin>
	}
	flag2 = 0;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <ECU1_start_Verifying_Entered_Car+0x10c>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40010c00 	.word	0x40010c00
 8001820:	200000ce 	.word	0x200000ce
 8001824:	40003800 	.word	0x40003800
 8001828:	200000d0 	.word	0x200000d0
 800182c:	20000028 	.word	0x20000028
 8001830:	200000cd 	.word	0x200000cd
 8001834:	20000026 	.word	0x20000026

08001838 <ECU2_start_Verifying_Exit_Car>:
void ECU2_start_Verifying_Exit_Car(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	int counter = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]



	MCAL_GPIO_WritePin(ECU2_PORT, ECU2_SS_PIN, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001848:	4839      	ldr	r0, [pc, #228]	; (8001930 <ECU2_start_Verifying_Exit_Car+0xf8>)
 800184a:	f7ff fc33 	bl	80010b4 <MCAL_GPIO_WritePin>

	do
	{
		MCAL_SPI_TX_RX(SPI2,&ch, PollingEnable);
 800184e:	2200      	movs	r2, #0
 8001850:	4938      	ldr	r1, [pc, #224]	; (8001934 <ECU2_start_Verifying_Exit_Car+0xfc>)
 8001852:	4839      	ldr	r0, [pc, #228]	; (8001938 <ECU2_start_Verifying_Exit_Car+0x100>)
 8001854:	f7ff fdfa 	bl	800144c <MCAL_SPI_TX_RX>
		receivedID[counter] = ch;
 8001858:	4b36      	ldr	r3, [pc, #216]	; (8001934 <ECU2_start_Verifying_Exit_Car+0xfc>)
 800185a:	7819      	ldrb	r1, [r3, #0]
 800185c:	4a37      	ldr	r2, [pc, #220]	; (800193c <ECU2_start_Verifying_Exit_Car+0x104>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	460a      	mov	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
		counter++;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3301      	adds	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
	}while(counter != 4);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b04      	cmp	r3, #4
 8001870:	d1ed      	bne.n	800184e <ECU2_start_Verifying_Exit_Car+0x16>

	MCAL_GPIO_WritePin(ECU2_PORT, ECU2_SS_PIN, 1);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001878:	482d      	ldr	r0, [pc, #180]	; (8001930 <ECU2_start_Verifying_Exit_Car+0xf8>)
 800187a:	f7ff fc1b 	bl	80010b4 <MCAL_GPIO_WritePin>


	for(int i=0;i<3;i++)
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	e013      	b.n	80018ac <ECU2_start_Verifying_Exit_Car+0x74>
	{
		if(!strcmp(receivedID , IDs+i))
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <ECU2_start_Verifying_Exit_Car+0x108>)
 800188e:	4413      	add	r3, r2
 8001890:	4619      	mov	r1, r3
 8001892:	482a      	ldr	r0, [pc, #168]	; (800193c <ECU2_start_Verifying_Exit_Car+0x104>)
 8001894:	f7fe fc6c 	bl	8000170 <strcmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <ECU2_start_Verifying_Exit_Car+0x6e>
		{
			flag2=1;
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <ECU2_start_Verifying_Exit_Car+0x10c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
			break;
 80018a4:	e005      	b.n	80018b2 <ECU2_start_Verifying_Exit_Car+0x7a>
	for(int i=0;i<3;i++)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	dde8      	ble.n	8001884 <ECU2_start_Verifying_Exit_Car+0x4c>
		}
	}
	if(flag2)
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <ECU2_start_Verifying_Exit_Car+0x10c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01f      	beq.n	80018fa <ECU2_start_Verifying_Exit_Car+0xc2>
	{
		ch = '1';
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <ECU2_start_Verifying_Exit_Car+0xfc>)
 80018bc:	2231      	movs	r2, #49	; 0x31
 80018be:	701a      	strb	r2, [r3, #0]
		MCAL_GPIO_WritePin(ECU2_PORT, ECU2_SS_PIN, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c6:	481a      	ldr	r0, [pc, #104]	; (8001930 <ECU2_start_Verifying_Exit_Car+0xf8>)
 80018c8:	f7ff fbf4 	bl	80010b4 <MCAL_GPIO_WritePin>
		MCAL_SPI_TX_RX(SPI2,&ch, PollingEnable);
 80018cc:	2200      	movs	r2, #0
 80018ce:	4919      	ldr	r1, [pc, #100]	; (8001934 <ECU2_start_Verifying_Exit_Car+0xfc>)
 80018d0:	4819      	ldr	r0, [pc, #100]	; (8001938 <ECU2_start_Verifying_Exit_Car+0x100>)
 80018d2:	f7ff fdbb 	bl	800144c <MCAL_SPI_TX_RX>
		MCAL_GPIO_WritePin(ECU2_PORT, ECU2_SS_PIN, 1);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018dc:	4814      	ldr	r0, [pc, #80]	; (8001930 <ECU2_start_Verifying_Exit_Car+0xf8>)
 80018de:	f7ff fbe9 	bl	80010b4 <MCAL_GPIO_WritePin>
		available_SlotsNumber++;
 80018e2:	4b19      	ldr	r3, [pc, #100]	; (8001948 <ECU2_start_Verifying_Exit_Car+0x110>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <ECU2_start_Verifying_Exit_Car+0x110>)
 80018ec:	701a      	strb	r2, [r3, #0]
		HAL_SEVEN_SEG_Write(available_SlotsNumber);
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <ECU2_start_Verifying_Exit_Car+0x110>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe ffa4 	bl	8000840 <HAL_SEVEN_SEG_Write>
 80018f8:	e013      	b.n	8001922 <ECU2_start_Verifying_Exit_Car+0xea>
	}else
	{
		ch = '0';
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <ECU2_start_Verifying_Exit_Car+0xfc>)
 80018fc:	2230      	movs	r2, #48	; 0x30
 80018fe:	701a      	strb	r2, [r3, #0]
		MCAL_GPIO_WritePin(ECU2_PORT, ECU2_SS_PIN, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001906:	480a      	ldr	r0, [pc, #40]	; (8001930 <ECU2_start_Verifying_Exit_Car+0xf8>)
 8001908:	f7ff fbd4 	bl	80010b4 <MCAL_GPIO_WritePin>
		MCAL_SPI_TX_RX(SPI2,&ch, PollingEnable);
 800190c:	2200      	movs	r2, #0
 800190e:	4909      	ldr	r1, [pc, #36]	; (8001934 <ECU2_start_Verifying_Exit_Car+0xfc>)
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <ECU2_start_Verifying_Exit_Car+0x100>)
 8001912:	f7ff fd9b 	bl	800144c <MCAL_SPI_TX_RX>
		MCAL_GPIO_WritePin(ECU2_PORT, ECU2_SS_PIN, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <ECU2_start_Verifying_Exit_Car+0xf8>)
 800191e:	f7ff fbc9 	bl	80010b4 <MCAL_GPIO_WritePin>
	}
	flag2 = 0;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <ECU2_start_Verifying_Exit_Car+0x10c>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010c00 	.word	0x40010c00
 8001934:	200000ce 	.word	0x200000ce
 8001938:	40003800 	.word	0x40003800
 800193c:	200000d0 	.word	0x200000d0
 8001940:	20000028 	.word	0x20000028
 8001944:	200000cd 	.word	0x200000cd
 8001948:	20000026 	.word	0x20000026

0800194c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800194e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001950:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <LoopForever+0x6>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <LoopForever+0xe>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	; (8001998 <LoopForever+0x16>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800197a:	f000 fa47 	bl	8001e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800197e:	f7ff fe29 	bl	80015d4 <main>

08001982 <LoopForever>:

LoopForever:
  b LoopForever
 8001982:	e7fe      	b.n	8001982 <LoopForever>
  ldr   r0, =_estack
 8001984:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001990:	08001f8c 	.word	0x08001f8c
  ldr r2, =_sbss
 8001994:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001998:	200000d8 	.word	0x200000d8

0800199c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_2_IRQHandler>
	...

080019a0 <Check_Admin_Password>:

#include "Admin_Tasks.h"


void Check_Admin_Password(uint8_t *AdminPassword_flag)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	uint8_t password = 1234;
 80019a8:	23d2      	movs	r3, #210	; 0xd2
 80019aa:	73fb      	strb	r3, [r7, #15]
	uint8_t entered_Password = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	75fb      	strb	r3, [r7, #23]
	volatile uint8_t key_pressed;
	int countNumberEntered = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]

	LCD_Clear_Screen();
 80019b4:	f7fe fd92 	bl	80004dc <LCD_Clear_Screen>
	LCD_Send_String("   As an Admin     Please Enter      Password:");
 80019b8:	4834      	ldr	r0, [pc, #208]	; (8001a8c <Check_Admin_Password+0xec>)
 80019ba:	f7fe fe67 	bl	800068c <LCD_Send_String>
	LCD_gotoXY(4, 6);
 80019be:	2106      	movs	r1, #6
 80019c0:	2004      	movs	r0, #4
 80019c2:	f7fe feb7 	bl	8000734 <LCD_gotoXY>

	while(!(*AdminPassword_flag))
 80019c6:	e058      	b.n	8001a7a <Check_Admin_Password+0xda>
	{
		key_pressed = keypad_GetKey();
 80019c8:	f7fe fc3e 	bl	8000248 <keypad_GetKey>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73bb      	strb	r3, [r7, #14]
		if(key_pressed != 'A')
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b41      	cmp	r3, #65	; 0x41
 80019d6:	d050      	beq.n	8001a7a <Check_Admin_Password+0xda>
		{
			LCD_Send_Character('*');
 80019d8:	202a      	movs	r0, #42	; 0x2a
 80019da:	f7fe fdef 	bl	80005bc <LCD_Send_Character>
			entered_Password = entered_Password *10 + (int)(key_pressed - '0');
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	461a      	mov	r2, r3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	7bbb      	ldrb	r3, [r7, #14]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3b30      	subs	r3, #48	; 0x30
 80019f4:	75fb      	strb	r3, [r7, #23]
			countNumberEntered++;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3301      	adds	r3, #1
 80019fa:	613b      	str	r3, [r7, #16]

			if(countNumberEntered == 4 )
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d13b      	bne.n	8001a7a <Check_Admin_Password+0xda>
			{
				LCD_gotoXY(4, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2004      	movs	r0, #4
 8001a06:	f7fe fe95 	bl	8000734 <LCD_gotoXY>
				if(password == entered_Password)
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d11f      	bne.n	8001a52 <Check_Admin_Password+0xb2>
				{
					*AdminPassword_flag =  1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
					LCD_Clear_Screen();
 8001a18:	f7fe fd60 	bl	80004dc <LCD_Clear_Screen>
					LCD_gotoXY(1, 2);
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7fe fe88 	bl	8000734 <LCD_gotoXY>
					LCD_Send_String("== correct ==");
 8001a24:	481a      	ldr	r0, [pc, #104]	; (8001a90 <Check_Admin_Password+0xf0>)
 8001a26:	f7fe fe31 	bl	800068c <LCD_Send_String>
					LCD_gotoXY(2, 3);
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7fe fe81 	bl	8000734 <LCD_gotoXY>
					LCD_Send_String("welcome to");
 8001a32:	4818      	ldr	r0, [pc, #96]	; (8001a94 <Check_Admin_Password+0xf4>)
 8001a34:	f7fe fe2a 	bl	800068c <LCD_Send_String>
					LCD_gotoXY(3, 0);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f7fe fe7a 	bl	8000734 <LCD_gotoXY>
					LCD_Send_String("Bello Dashboard");
 8001a40:	4815      	ldr	r0, [pc, #84]	; (8001a98 <Check_Admin_Password+0xf8>)
 8001a42:	f7fe fe23 	bl	800068c <LCD_Send_String>
					delay_ms(100);
 8001a46:	2064      	movs	r0, #100	; 0x64
 8001a48:	f7fe fca0 	bl	800038c <delay_ms>
					LCD_Clear_Screen();
 8001a4c:	f7fe fd46 	bl	80004dc <LCD_Clear_Screen>
 8001a50:	e013      	b.n	8001a7a <Check_Admin_Password+0xda>


				}
				else
				{
					LCD_Clear_Screen();
 8001a52:	f7fe fd43 	bl	80004dc <LCD_Clear_Screen>
					LCD_Send_String(" Wrong password");
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <Check_Admin_Password+0xfc>)
 8001a58:	f7fe fe18 	bl	800068c <LCD_Send_String>
					LCD_gotoXY(2, 0);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f7fe fe68 	bl	8000734 <LCD_gotoXY>
					LCD_Send_String("please try again");
 8001a64:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <Check_Admin_Password+0x100>)
 8001a66:	f7fe fe11 	bl	800068c <LCD_Send_String>
					LCD_gotoXY(4, 6);
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	2004      	movs	r0, #4
 8001a6e:	f7fe fe61 	bl	8000734 <LCD_gotoXY>
					entered_Password =0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
					countNumberEntered =0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
	while(!(*AdminPassword_flag))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0a2      	beq.n	80019c8 <Check_Admin_Password+0x28>
			}
		}

	}

}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	08001e84 	.word	0x08001e84
 8001a90:	08001eb4 	.word	0x08001eb4
 8001a94:	08001ec4 	.word	0x08001ec4
 8001a98:	08001ed0 	.word	0x08001ed0
 8001a9c:	08001ee0 	.word	0x08001ee0
 8001aa0:	08001ef0 	.word	0x08001ef0

08001aa4 <admin_Tasks>:




void admin_Tasks(char IDs[3][5])
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

	volatile uint8_t key_pressed;


	LCD_Send_String("1: ADD ID");
 8001aac:	485c      	ldr	r0, [pc, #368]	; (8001c20 <admin_Tasks+0x17c>)
 8001aae:	f7fe fded 	bl	800068c <LCD_Send_String>
	LCD_gotoXY(2, 0);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f7fe fe3d 	bl	8000734 <LCD_gotoXY>
	LCD_Send_String("2: Delete ID");
 8001aba:	485a      	ldr	r0, [pc, #360]	; (8001c24 <admin_Tasks+0x180>)
 8001abc:	f7fe fde6 	bl	800068c <LCD_Send_String>
	LCD_gotoXY(3, 0);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	f7fe fe36 	bl	8000734 <LCD_gotoXY>
	LCD_Send_String("3: Delete ALL IDs");
 8001ac8:	4857      	ldr	r0, [pc, #348]	; (8001c28 <admin_Tasks+0x184>)
 8001aca:	f7fe fddf 	bl	800068c <LCD_Send_String>
	LCD_gotoXY(4, 0);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2004      	movs	r0, #4
 8001ad2:	f7fe fe2f 	bl	8000734 <LCD_gotoXY>
	LCD_Send_String("4: View All IDs");
 8001ad6:	4855      	ldr	r0, [pc, #340]	; (8001c2c <admin_Tasks+0x188>)
 8001ad8:	f7fe fdd8 	bl	800068c <LCD_Send_String>

	while(1)
	{
		key_pressed = keypad_GetKey();
 8001adc:	f7fe fbb4 	bl	8000248 <keypad_GetKey>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	73fb      	strb	r3, [r7, #15]
		if(key_pressed != 'A')
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
		{

		}
		switch(key_pressed)
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3b31      	subs	r3, #49	; 0x31
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	f200 8095 	bhi.w	8001c1c <admin_Tasks+0x178>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <admin_Tasks+0x54>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b3d 	.word	0x08001b3d
 8001afc:	08001b75 	.word	0x08001b75
 8001b00:	08001bad 	.word	0x08001bad
 8001b04:	08001be5 	.word	0x08001be5
 8001b08:	08001c1d 	.word	0x08001c1d
 8001b0c:	08001c1d 	.word	0x08001c1d
 8001b10:	08001c1d 	.word	0x08001c1d
 8001b14:	08001c1d 	.word	0x08001c1d
 8001b18:	08001c1d 	.word	0x08001c1d
 8001b1c:	08001c1d 	.word	0x08001c1d
 8001b20:	08001c1d 	.word	0x08001c1d
 8001b24:	08001c1d 	.word	0x08001c1d
 8001b28:	08001c1d 	.word	0x08001c1d
 8001b2c:	08001c1d 	.word	0x08001c1d
 8001b30:	08001c1d 	.word	0x08001c1d
 8001b34:	08001c1d 	.word	0x08001c1d
 8001b38:	08001c1d 	.word	0x08001c1d
		{
		case 'A':
			break;
		case '1':
		{
			Add_ID(IDs);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f877 	bl	8001c30 <Add_ID>
			LCD_Send_String("1: ADD ID");
 8001b42:	4837      	ldr	r0, [pc, #220]	; (8001c20 <admin_Tasks+0x17c>)
 8001b44:	f7fe fda2 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(2, 0);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2002      	movs	r0, #2
 8001b4c:	f7fe fdf2 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("2: Delete ID");
 8001b50:	4834      	ldr	r0, [pc, #208]	; (8001c24 <admin_Tasks+0x180>)
 8001b52:	f7fe fd9b 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(3, 0);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f7fe fdeb 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("3: Delete ALL IDs");
 8001b5e:	4832      	ldr	r0, [pc, #200]	; (8001c28 <admin_Tasks+0x184>)
 8001b60:	f7fe fd94 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(4, 0);
 8001b64:	2100      	movs	r1, #0
 8001b66:	2004      	movs	r0, #4
 8001b68:	f7fe fde4 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("4: View All IDs");
 8001b6c:	482f      	ldr	r0, [pc, #188]	; (8001c2c <admin_Tasks+0x188>)
 8001b6e:	f7fe fd8d 	bl	800068c <LCD_Send_String>
			break;
 8001b72:	e054      	b.n	8001c1e <admin_Tasks+0x17a>
		}
		case '2':
		{
			Delete_ID(IDs);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f8db 	bl	8001d30 <Delete_ID>
			LCD_Send_String("1: ADD ID");
 8001b7a:	4829      	ldr	r0, [pc, #164]	; (8001c20 <admin_Tasks+0x17c>)
 8001b7c:	f7fe fd86 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(2, 0);
 8001b80:	2100      	movs	r1, #0
 8001b82:	2002      	movs	r0, #2
 8001b84:	f7fe fdd6 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("2: Delete ID");
 8001b88:	4826      	ldr	r0, [pc, #152]	; (8001c24 <admin_Tasks+0x180>)
 8001b8a:	f7fe fd7f 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(3, 0);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2003      	movs	r0, #3
 8001b92:	f7fe fdcf 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("3: Delete ALL IDs");
 8001b96:	4824      	ldr	r0, [pc, #144]	; (8001c28 <admin_Tasks+0x184>)
 8001b98:	f7fe fd78 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(4, 0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2004      	movs	r0, #4
 8001ba0:	f7fe fdc8 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("4: View All IDs");
 8001ba4:	4821      	ldr	r0, [pc, #132]	; (8001c2c <admin_Tasks+0x188>)
 8001ba6:	f7fe fd71 	bl	800068c <LCD_Send_String>
			break;
 8001baa:	e038      	b.n	8001c1e <admin_Tasks+0x17a>
		}
		case '3':
		{
			Delete_IDs(IDs);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f8c8 	bl	8001d42 <Delete_IDs>
			LCD_Send_String("1: ADD ID");
 8001bb2:	481b      	ldr	r0, [pc, #108]	; (8001c20 <admin_Tasks+0x17c>)
 8001bb4:	f7fe fd6a 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(2, 0);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f7fe fdba 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("2: Delete ID");
 8001bc0:	4818      	ldr	r0, [pc, #96]	; (8001c24 <admin_Tasks+0x180>)
 8001bc2:	f7fe fd63 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(3, 0);
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f7fe fdb3 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("3: Delete ALL IDs");
 8001bce:	4816      	ldr	r0, [pc, #88]	; (8001c28 <admin_Tasks+0x184>)
 8001bd0:	f7fe fd5c 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(4, 0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2004      	movs	r0, #4
 8001bd8:	f7fe fdac 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("4: View All IDs");
 8001bdc:	4813      	ldr	r0, [pc, #76]	; (8001c2c <admin_Tasks+0x188>)
 8001bde:	f7fe fd55 	bl	800068c <LCD_Send_String>
			break;
 8001be2:	e01c      	b.n	8001c1e <admin_Tasks+0x17a>
		}
		case '4':
		{
			View_IDs(IDs);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8b5 	bl	8001d54 <View_IDs>
			LCD_Send_String("1: ADD ID");
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <admin_Tasks+0x17c>)
 8001bec:	f7fe fd4e 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(2, 0);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f7fe fd9e 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("2: Delete ID");
 8001bf8:	480a      	ldr	r0, [pc, #40]	; (8001c24 <admin_Tasks+0x180>)
 8001bfa:	f7fe fd47 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(3, 0);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2003      	movs	r0, #3
 8001c02:	f7fe fd97 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("3: Delete ALL IDs");
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <admin_Tasks+0x184>)
 8001c08:	f7fe fd40 	bl	800068c <LCD_Send_String>
			LCD_gotoXY(4, 0);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2004      	movs	r0, #4
 8001c10:	f7fe fd90 	bl	8000734 <LCD_gotoXY>
			LCD_Send_String("4: View All IDs");
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <admin_Tasks+0x188>)
 8001c16:	f7fe fd39 	bl	800068c <LCD_Send_String>
			break;
 8001c1a:	e000      	b.n	8001c1e <admin_Tasks+0x17a>
		}
		default:
			break;
 8001c1c:	bf00      	nop
		key_pressed = keypad_GetKey();
 8001c1e:	e75d      	b.n	8001adc <admin_Tasks+0x38>
 8001c20:	08001f04 	.word	0x08001f04
 8001c24:	08001f10 	.word	0x08001f10
 8001c28:	08001f20 	.word	0x08001f20
 8001c2c:	08001f34 	.word	0x08001f34

08001c30 <Add_ID>:

}


void Add_ID(char IDs[3][5])
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	char NewPassword[5] = {0};
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	753b      	strb	r3, [r7, #20]
	uint8_t flag =0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	77fb      	strb	r3, [r7, #31]
	uint8_t flag2 =1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	75fb      	strb	r3, [r7, #23]
	static uint8_t number_Of_IDS = 0;
	volatile uint8_t key_pressed;
	int countNumberEntered = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]

	LCD_Clear_Screen();
 8001c4c:	f7fe fc46 	bl	80004dc <LCD_Clear_Screen>
	LCD_Send_String("Enter New ID:");
 8001c50:	4833      	ldr	r0, [pc, #204]	; (8001d20 <Add_ID+0xf0>)
 8001c52:	f7fe fd1b 	bl	800068c <LCD_Send_String>
	LCD_gotoXY(2, 0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7fe fd6b 	bl	8000734 <LCD_gotoXY>

	while(!flag)
 8001c5e:	e057      	b.n	8001d10 <Add_ID+0xe0>
	{
		key_pressed = keypad_GetKey();
 8001c60:	f7fe faf2 	bl	8000248 <keypad_GetKey>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
		if(key_pressed != 'A')
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b41      	cmp	r3, #65	; 0x41
 8001c6e:	d04f      	beq.n	8001d10 <Add_ID+0xe0>
		{
			LCD_Send_Character(key_pressed);
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fca1 	bl	80005bc <LCD_Send_Character>
			strncat(NewPassword , &key_pressed ,1);
 8001c7a:	f107 010f 	add.w	r1, r7, #15
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2201      	movs	r2, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f89b 	bl	8001dc0 <strncat>
			countNumberEntered++;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]

			if(countNumberEntered == 4 )
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d13c      	bne.n	8001d10 <Add_ID+0xe0>
			{

				LCD_gotoXY(4, 0);
 8001c96:	2100      	movs	r1, #0
 8001c98:	2004      	movs	r0, #4
 8001c9a:	f7fe fd4b 	bl	8000734 <LCD_gotoXY>
				if(flag2)
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02c      	beq.n	8001cfe <Add_ID+0xce>
				{
					flag =  1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	77fb      	strb	r3, [r7, #31]
				    strncpy(IDs[number_Of_IDS], NewPassword, sizeof(IDs[number_Of_IDS]) - 1);
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <Add_ID+0xf4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f107 0110 	add.w	r1, r7, #16
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f891 	bl	8001de6 <strncpy>
				    IDs[number_Of_IDS][sizeof(IDs[number_Of_IDS]) - 1] = '\0';
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <Add_ID+0xf4>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	711a      	strb	r2, [r3, #4]
					number_Of_IDS++;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <Add_ID+0xf4>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <Add_ID+0xf4>)
 8001ce2:	701a      	strb	r2, [r3, #0]
					LCD_gotoXY(3, 0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	f7fe fd24 	bl	8000734 <LCD_gotoXY>
					LCD_Send_String("== Success ==");
 8001cec:	480e      	ldr	r0, [pc, #56]	; (8001d28 <Add_ID+0xf8>)
 8001cee:	f7fe fccd 	bl	800068c <LCD_Send_String>
					delay_ms(100);
 8001cf2:	2064      	movs	r0, #100	; 0x64
 8001cf4:	f7fe fb4a 	bl	800038c <delay_ms>
					LCD_Clear_Screen();
 8001cf8:	f7fe fbf0 	bl	80004dc <LCD_Clear_Screen>
 8001cfc:	e008      	b.n	8001d10 <Add_ID+0xe0>
				}
				else
				{
					LCD_gotoXY(3, 0);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2003      	movs	r0, #3
 8001d02:	f7fe fd17 	bl	8000734 <LCD_gotoXY>
					LCD_Send_String("password exist");
 8001d06:	4809      	ldr	r0, [pc, #36]	; (8001d2c <Add_ID+0xfc>)
 8001d08:	f7fe fcc0 	bl	800068c <LCD_Send_String>
					//NewPassword = 0;
					countNumberEntered =0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
	while(!flag)
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0a4      	beq.n	8001c60 <Add_ID+0x30>
				}
			}
		}
	}
}
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	08001f44 	.word	0x08001f44
 8001d24:	200000d5 	.word	0x200000d5
 8001d28:	08001f54 	.word	0x08001f54
 8001d2c:	08001f64 	.word	0x08001f64

08001d30 <Delete_ID>:
void Delete_ID(char IDs[3][5])
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <Delete_IDs>:
void Delete_IDs(char IDs[3][5])
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]

}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <View_IDs>:
void View_IDs(char IDs[3][5])
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	char key_pressed = '0';
 8001d5c:	2330      	movs	r3, #48	; 0x30
 8001d5e:	73fb      	strb	r3, [r7, #15]
	LCD_Clear_Screen();
 8001d60:	f7fe fbbc 	bl	80004dc <LCD_Clear_Screen>
	for(int i=0;i<3;i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	e013      	b.n	8001d92 <View_IDs+0x3e>
	{
		LCD_Send_String(IDs[i]);
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fc88 	bl	800068c <LCD_Send_String>
		LCD_gotoXY(i+2, 0);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3302      	adds	r3, #2
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fcd4 	bl	8000734 <LCD_gotoXY>
	for(int i=0;i<3;i++)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	dde8      	ble.n	8001d6a <View_IDs+0x16>
	}
	LCD_Send_String("press 1 to back");
 8001d98:	4808      	ldr	r0, [pc, #32]	; (8001dbc <View_IDs+0x68>)
 8001d9a:	f7fe fc77 	bl	800068c <LCD_Send_String>
	while(key_pressed != '1')
 8001d9e:	e003      	b.n	8001da8 <View_IDs+0x54>
		{
			key_pressed = keypad_GetKey();
 8001da0:	f7fe fa52 	bl	8000248 <keypad_GetKey>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
	while(key_pressed != '1')
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b31      	cmp	r3, #49	; 0x31
 8001dac:	d1f8      	bne.n	8001da0 <View_IDs+0x4c>
		}
	LCD_Clear_Screen();
 8001dae:	f7fe fb95 	bl	80004dc <LCD_Clear_Screen>
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	08001f74 	.word	0x08001f74

08001dc0 <strncat>:
 8001dc0:	b530      	push	{r4, r5, lr}
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	7825      	ldrb	r5, [r4, #0]
 8001dc6:	4623      	mov	r3, r4
 8001dc8:	3401      	adds	r4, #1
 8001dca:	2d00      	cmp	r5, #0
 8001dcc:	d1fa      	bne.n	8001dc4 <strncat+0x4>
 8001dce:	3a01      	subs	r2, #1
 8001dd0:	d304      	bcc.n	8001ddc <strncat+0x1c>
 8001dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dd6:	f803 4b01 	strb.w	r4, [r3], #1
 8001dda:	b904      	cbnz	r4, 8001dde <strncat+0x1e>
 8001ddc:	bd30      	pop	{r4, r5, pc}
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d1f5      	bne.n	8001dce <strncat+0xe>
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e7f3      	b.n	8001dce <strncat+0xe>

08001de6 <strncpy>:
 8001de6:	4603      	mov	r3, r0
 8001de8:	b510      	push	{r4, lr}
 8001dea:	3901      	subs	r1, #1
 8001dec:	b132      	cbz	r2, 8001dfc <strncpy+0x16>
 8001dee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001df2:	3a01      	subs	r2, #1
 8001df4:	f803 4b01 	strb.w	r4, [r3], #1
 8001df8:	2c00      	cmp	r4, #0
 8001dfa:	d1f7      	bne.n	8001dec <strncpy+0x6>
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	441a      	add	r2, r3
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d100      	bne.n	8001e06 <strncpy+0x20>
 8001e04:	bd10      	pop	{r4, pc}
 8001e06:	f803 1b01 	strb.w	r1, [r3], #1
 8001e0a:	e7f9      	b.n	8001e00 <strncpy+0x1a>

08001e0c <__libc_init_array>:
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	2600      	movs	r6, #0
 8001e10:	4d0c      	ldr	r5, [pc, #48]	; (8001e44 <__libc_init_array+0x38>)
 8001e12:	4c0d      	ldr	r4, [pc, #52]	; (8001e48 <__libc_init_array+0x3c>)
 8001e14:	1b64      	subs	r4, r4, r5
 8001e16:	10a4      	asrs	r4, r4, #2
 8001e18:	42a6      	cmp	r6, r4
 8001e1a:	d109      	bne.n	8001e30 <__libc_init_array+0x24>
 8001e1c:	f000 f81a 	bl	8001e54 <_init>
 8001e20:	2600      	movs	r6, #0
 8001e22:	4d0a      	ldr	r5, [pc, #40]	; (8001e4c <__libc_init_array+0x40>)
 8001e24:	4c0a      	ldr	r4, [pc, #40]	; (8001e50 <__libc_init_array+0x44>)
 8001e26:	1b64      	subs	r4, r4, r5
 8001e28:	10a4      	asrs	r4, r4, #2
 8001e2a:	42a6      	cmp	r6, r4
 8001e2c:	d105      	bne.n	8001e3a <__libc_init_array+0x2e>
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e34:	4798      	blx	r3
 8001e36:	3601      	adds	r6, #1
 8001e38:	e7ee      	b.n	8001e18 <__libc_init_array+0xc>
 8001e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e3e:	4798      	blx	r3
 8001e40:	3601      	adds	r6, #1
 8001e42:	e7f2      	b.n	8001e2a <__libc_init_array+0x1e>
 8001e44:	08001f84 	.word	0x08001f84
 8001e48:	08001f84 	.word	0x08001f84
 8001e4c:	08001f84 	.word	0x08001f84
 8001e50:	08001f88 	.word	0x08001f88

08001e54 <_init>:
 8001e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e56:	bf00      	nop
 8001e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e5a:	bc08      	pop	{r3}
 8001e5c:	469e      	mov	lr, r3
 8001e5e:	4770      	bx	lr

08001e60 <_fini>:
 8001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e62:	bf00      	nop
 8001e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e66:	bc08      	pop	{r3}
 8001e68:	469e      	mov	lr, r3
 8001e6a:	4770      	bx	lr
