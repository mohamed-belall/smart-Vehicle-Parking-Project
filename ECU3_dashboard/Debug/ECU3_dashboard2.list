
ECU3_dashboard2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000117c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080012ac  080012ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c4  080012c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080012c4  080012c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c4  080012c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080012d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080012d8  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000031bc  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f57  00000000  00000000  00023234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000015f7  00000000  00000000  0002418b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000368  00000000  00000000  00025788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000002c0  00000000  00000000  00025af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001711  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005048  00000000  00000000  000274c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000cce8  00000000  00000000  0002c509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b28  00000000  00000000  000391f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001294 	.word	0x08001294

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08001294 	.word	0x08001294

08000170 <keypad_Init>:
int keypad_Row[]	={R0,R1,R2,R3};
int keypad_Column[] ={C0,C1,C2};
#endif

void keypad_Init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R0;
 8000176:	2302      	movs	r3, #2
 8000178:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 800017e:	2301      	movs	r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	482a      	ldr	r0, [pc, #168]	; (8000230 <keypad_Init+0xc0>)
 8000188:	f000 fbb6 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 800018c:	2304      	movs	r3, #4
 800018e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	4826      	ldr	r0, [pc, #152]	; (8000230 <keypad_Init+0xc0>)
 8000196:	f000 fbaf 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 800019a:	2308      	movs	r3, #8
 800019c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	4619      	mov	r1, r3
 80001a2:	4823      	ldr	r0, [pc, #140]	; (8000230 <keypad_Init+0xc0>)
 80001a4:	f000 fba8 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 80001a8:	2310      	movs	r3, #16
 80001aa:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	481f      	ldr	r0, [pc, #124]	; (8000230 <keypad_Init+0xc0>)
 80001b2:	f000 fba1 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 80001b6:	2320      	movs	r3, #32
 80001b8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	481c      	ldr	r0, [pc, #112]	; (8000230 <keypad_Init+0xc0>)
 80001c0:	f000 fb9a 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 80001c4:	2340      	movs	r3, #64	; 0x40
 80001c6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	4619      	mov	r1, r3
 80001cc:	4818      	ldr	r0, [pc, #96]	; (8000230 <keypad_Init+0xc0>)
 80001ce:	f000 fb93 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 80001d2:	2380      	movs	r3, #128	; 0x80
 80001d4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4619      	mov	r1, r3
 80001da:	4815      	ldr	r0, [pc, #84]	; (8000230 <keypad_Init+0xc0>)
 80001dc:	f000 fb8c 	bl	80008f8 <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = C3;
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
#endif


	MCAL_GPIO_WritePin(KEYPAD_PORT, R0, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2102      	movs	r1, #2
 80001e4:	4812      	ldr	r0, [pc, #72]	; (8000230 <keypad_Init+0xc0>)
 80001e6:	f000 fc06 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R1, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2104      	movs	r1, #4
 80001ee:	4810      	ldr	r0, [pc, #64]	; (8000230 <keypad_Init+0xc0>)
 80001f0:	f000 fc01 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R2, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2108      	movs	r1, #8
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <keypad_Init+0xc0>)
 80001fa:	f000 fbfc 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, R3, GPIO_PIN_SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	2110      	movs	r1, #16
 8000202:	480b      	ldr	r0, [pc, #44]	; (8000230 <keypad_Init+0xc0>)
 8000204:	f000 fbf7 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C0, GPIO_PIN_SET);
 8000208:	2201      	movs	r2, #1
 800020a:	2120      	movs	r1, #32
 800020c:	4808      	ldr	r0, [pc, #32]	; (8000230 <keypad_Init+0xc0>)
 800020e:	f000 fbf2 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C1, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2140      	movs	r1, #64	; 0x40
 8000216:	4806      	ldr	r0, [pc, #24]	; (8000230 <keypad_Init+0xc0>)
 8000218:	f000 fbed 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT, C2, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2180      	movs	r1, #128	; 0x80
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <keypad_Init+0xc0>)
 8000222:	f000 fbe8 	bl	80009f6 <MCAL_GPIO_WritePin>
#ifdef calculator_keypad
	MCAL_GPIO_WritePin(KEYPAD_PORT, C3, GPIO_PIN_SET);
#endif

}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010800 	.word	0x40010800

08000234 <delay_ms>:
#include "lcd_driver.h"



void delay_ms(uint32_t time)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0 ; i < time ; i++)
 800023c:	2300      	movs	r3, #0
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	e00b      	b.n	800025a <delay_ms+0x26>
		for(j=0 ; j<255 ; j++);
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
 8000246:	e002      	b.n	800024e <delay_ms+0x1a>
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	3301      	adds	r3, #1
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	2bfe      	cmp	r3, #254	; 0xfe
 8000252:	d9f9      	bls.n	8000248 <delay_ms+0x14>
	for(i=0 ; i < time ; i++)
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	3301      	adds	r3, #1
 8000258:	60fb      	str	r3, [r7, #12]
 800025a:	68fa      	ldr	r2, [r7, #12]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d3ef      	bcc.n	8000242 <delay_ms+0xe>
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
	...

08000270 <LCD_Init>:

void LCD_Init()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;
	delay_ms(20);
 8000276:	2014      	movs	r0, #20
 8000278:	f7ff ffdc 	bl	8000234 <delay_ms>

	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800027c:	2304      	movs	r3, #4
 800027e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 8000280:	2301      	movs	r3, #1
 8000282:	71fb      	strb	r3, [r7, #7]

	PinCfg.GPIO_PinNumber = EN_switch ;
 8000284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000288:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4619      	mov	r1, r3
 800028e:	483f      	ldr	r0, [pc, #252]	; (800038c <LCD_Init+0x11c>)
 8000290:	f000 fb32 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_switch;
 8000294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000298:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	483b      	ldr	r0, [pc, #236]	; (800038c <LCD_Init+0x11c>)
 80002a0:	f000 fb2a 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RS_switch;
 80002a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002a8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_CONTROL_PORT, &PinCfg);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	4837      	ldr	r0, [pc, #220]	; (800038c <LCD_Init+0x11c>)
 80002b0:	f000 fb22 	bl	80008f8 <MCAL_GPIO_Init>


	// data pins output
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002b4:	2304      	movs	r3, #4
 80002b6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80002b8:	2301      	movs	r3, #1
 80002ba:	71fb      	strb	r3, [r7, #7]



	PinCfg.GPIO_PinNumber = D4;
 80002bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002c0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4619      	mov	r1, r3
 80002c6:	4832      	ldr	r0, [pc, #200]	; (8000390 <LCD_Init+0x120>)
 80002c8:	f000 fb16 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D5;
 80002cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	482e      	ldr	r0, [pc, #184]	; (8000390 <LCD_Init+0x120>)
 80002d8:	f000 fb0e 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D6;
 80002dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002e0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	482a      	ldr	r0, [pc, #168]	; (8000390 <LCD_Init+0x120>)
 80002e8:	f000 fb06 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D7;
 80002ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002f0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4826      	ldr	r0, [pc, #152]	; (8000390 <LCD_Init+0x120>)
 80002f8:	f000 fafe 	bl	80008f8 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000302:	4822      	ldr	r0, [pc, #136]	; (800038c <LCD_Init+0x11c>)
 8000304:	f000 fb77 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030e:	481f      	ldr	r0, [pc, #124]	; (800038c <LCD_Init+0x11c>)
 8000310:	f000 fb71 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800031a:	481c      	ldr	r0, [pc, #112]	; (800038c <LCD_Init+0x11c>)
 800031c:	f000 fb6b 	bl	80009f6 <MCAL_GPIO_WritePin>

	delay_ms(15);
 8000320:	200f      	movs	r0, #15
 8000322:	f7ff ff87 	bl	8000234 <delay_ms>
	LCD_Clear_Screen();
 8000326:	f000 f835 	bl	8000394 <LCD_Clear_Screen>

#ifdef EIGHT_BIT_MODE
	PinCfg.GPIO_PinNumber = D0;
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4816      	ldr	r0, [pc, #88]	; (8000390 <LCD_Init+0x120>)
 8000336:	f000 fadf 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D1;
 800033a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800033e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	4812      	ldr	r0, [pc, #72]	; (8000390 <LCD_Init+0x120>)
 8000346:	f000 fad7 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D2;
 800034a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4619      	mov	r1, r3
 8000354:	480e      	ldr	r0, [pc, #56]	; (8000390 <LCD_Init+0x120>)
 8000356:	f000 facf 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = D3;
 800035a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800035e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_DATA_PORT, &PinCfg);
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	4619      	mov	r1, r3
 8000364:	480a      	ldr	r0, [pc, #40]	; (8000390 <LCD_Init+0x120>)
 8000366:	f000 fac7 	bl	80008f8 <MCAL_GPIO_Init>

	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 800036a:	2038      	movs	r0, #56	; 0x38
 800036c:	f000 f81a 	bl	80003a4 <LCD_Send_Command>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, D7, (LCD_FUNCTION_4BIT_2LINES&0x80));
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_Send_Command(LCD_ENTRY_MODE);
 8000370:	2006      	movs	r0, #6
 8000372:	f000 f817 	bl	80003a4 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 8000376:	2080      	movs	r0, #128	; 0x80
 8000378:	f000 f814 	bl	80003a4 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_0N_CURSOR_BLINK);
 800037c:	200f      	movs	r0, #15
 800037e:	f000 f811 	bl	80003a4 <LCD_Send_Command>

}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40011000 	.word	0x40011000
 8000390:	40010c00 	.word	0x40010c00

08000394 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_CLEAR);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 f803 	bl	80003a4 <LCD_Send_Command>
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <LCD_Send_Command>:

void LCD_Send_Command(uint8_t command)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE

	//	MCAL_GPIO_WritePort(LCD_DATA_PORT, command);
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D0 , (command&0x01));
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003bc:	482e      	ldr	r0, [pc, #184]	; (8000478 <LCD_Send_Command+0xd4>)
 80003be:	f000 fb1a 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D1 , (command&0x02));
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	461a      	mov	r2, r3
 80003cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d0:	4829      	ldr	r0, [pc, #164]	; (8000478 <LCD_Send_Command+0xd4>)
 80003d2:	f000 fb10 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D2 , (command&0x04));
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e4:	4824      	ldr	r0, [pc, #144]	; (8000478 <LCD_Send_Command+0xd4>)
 80003e6:	f000 fb06 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D3 , (command&0x08));
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f8:	481f      	ldr	r0, [pc, #124]	; (8000478 <LCD_Send_Command+0xd4>)
 80003fa:	f000 fafc 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D4 , (command&0x10));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	b2db      	uxtb	r3, r3
 8000406:	461a      	mov	r2, r3
 8000408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040c:	481a      	ldr	r0, [pc, #104]	; (8000478 <LCD_Send_Command+0xd4>)
 800040e:	f000 faf2 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D5 , (command&0x20));
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	b2db      	uxtb	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000420:	4815      	ldr	r0, [pc, #84]	; (8000478 <LCD_Send_Command+0xd4>)
 8000422:	f000 fae8 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D6 , (command&0x40));
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800042c:	b2db      	uxtb	r3, r3
 800042e:	461a      	mov	r2, r3
 8000430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000434:	4810      	ldr	r0, [pc, #64]	; (8000478 <LCD_Send_Command+0xd4>)
 8000436:	f000 fade 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT , D7 , (command&0x80));
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000440:	b2db      	uxtb	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <LCD_Send_Command+0xd4>)
 800044a:	f000 fad4 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RW_switch, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000454:	4809      	ldr	r0, [pc, #36]	; (800047c <LCD_Send_Command+0xd8>)
 8000456:	f000 face 	bl	80009f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, RS_switch, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000460:	4806      	ldr	r0, [pc, #24]	; (800047c <LCD_Send_Command+0xd8>)
 8000462:	f000 fac8 	bl	80009f6 <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff fee4 	bl	8000234 <delay_ms>
	LCD_Kick();
 800046c:	f000 f808 	bl	8000480 <LCD_Kick>
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT ,RW_switch , GPIO_PIN_RESET);
	MCAL_GPIO_WritePin(LCD_CONTROL_PORT ,RS_switch , GPIO_PIN_RESET);
	LCD_Kick();
#endif

}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010c00 	.word	0x40010c00
 800047c:	40011000 	.word	0x40011000

08000480 <LCD_Kick>:
		count++;
	}
}

void LCD_Kick(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048a:	4807      	ldr	r0, [pc, #28]	; (80004a8 <LCD_Kick+0x28>)
 800048c:	f000 fab3 	bl	80009f6 <MCAL_GPIO_WritePin>

	delay_ms(10);
 8000490:	200a      	movs	r0, #10
 8000492:	f7ff fecf 	bl	8000234 <delay_ms>

	MCAL_GPIO_WritePin(LCD_CONTROL_PORT, EN_switch, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <LCD_Kick+0x28>)
 800049e:	f000 faaa 	bl	80009f6 <MCAL_GPIO_WritePin>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40011000 	.word	0x40011000

080004ac <HAL_SEVEN_SEG_init>:

#include "seven_segment.h"


void HAL_SEVEN_SEG_init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;


	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN1;
 80004b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004b8:	2304      	movs	r3, #4
 80004ba:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_output_speed = GPIO_SPEED_10M;
 80004bc:	2301      	movs	r3, #1
 80004be:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	481b      	ldr	r0, [pc, #108]	; (8000534 <HAL_SEVEN_SEG_init+0x88>)
 80004c6:	f000 fa17 	bl	80008f8 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN2;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	4619      	mov	r1, r3
 80004d4:	4817      	ldr	r0, [pc, #92]	; (8000534 <HAL_SEVEN_SEG_init+0x88>)
 80004d6:	f000 fa0f 	bl	80008f8 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN3;
 80004da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004de:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	4619      	mov	r1, r3
 80004e4:	4813      	ldr	r0, [pc, #76]	; (8000534 <HAL_SEVEN_SEG_init+0x88>)
 80004e6:	f000 fa07 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN4;
 80004ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ee:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	480f      	ldr	r0, [pc, #60]	; (8000534 <HAL_SEVEN_SEG_init+0x88>)
 80004f6:	f000 f9ff 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN5;
 80004fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004fe:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4619      	mov	r1, r3
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <HAL_SEVEN_SEG_init+0x88>)
 8000506:	f000 f9f7 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN6;
 800050a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800050e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <HAL_SEVEN_SEG_init+0x88>)
 8000516:	f000 f9ef 	bl	80008f8 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = SEVEN_SEG_PIN7;
 800051a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(SEVEN_SEG_PORT, &PinCfg);
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	4619      	mov	r1, r3
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <HAL_SEVEN_SEG_init+0x88>)
 8000526:	f000 f9e7 	bl	80008f8 <MCAL_GPIO_Init>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010800 	.word	0x40010800

08000538 <HAL_SEVEN_SEG_Write>:


void HAL_SEVEN_SEG_Write(uint8_t number)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	{
		MCAL_GPIO_WritePort(SEVEN_SEG_PORT, seg_CAnodeVal[number]<<FIRST_PIN_number);
		//MCAL_GPIO_WritePin(GPIOx, PinNumber, value)
	}else if(SEVEN_SEG_TYPE == SEVEN_SEG_COMMON_CATHODE)
	{
		MCAL_GPIO_WritePort(SEVEN_SEG_PORT, seg_CCathodeVal[number]<<FIRST_PIN_number);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <HAL_SEVEN_SEG_Write+0x28>)
 8000546:	5cd3      	ldrb	r3, [r2, r3]
 8000548:	b29b      	uxth	r3, r3
 800054a:	025b      	lsls	r3, r3, #9
 800054c:	b29b      	uxth	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <HAL_SEVEN_SEG_Write+0x2c>)
 8000552:	f000 fa67 	bl	8000a24 <MCAL_GPIO_WritePort>
	}
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000
 8000564:	40010800 	.word	0x40010800

08000568 <EXTI0_IRQHandler>:
 * ======================        ISR Function        =======================
 * =========================================================================
 * =========================================================================
 */
void EXTI0_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <EXTI0_IRQHandler+0x1c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <EXTI0_IRQHandler+0x1c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[0]();
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI0_IRQHandler+0x20>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4798      	blx	r3

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010400 	.word	0x40010400
 8000588:	20000028 	.word	0x20000028

0800058c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<1);
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI1_IRQHandler+0x1c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <EXTI1_IRQHandler+0x1c>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[1]();
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI1_IRQHandler+0x20>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4798      	blx	r3
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	20000028 	.word	0x20000028

080005b0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<2);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <EXTI2_IRQHandler+0x1c>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <EXTI2_IRQHandler+0x1c>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[2]();
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <EXTI2_IRQHandler+0x20>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	4798      	blx	r3

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010400 	.word	0x40010400
 80005d0:	20000028 	.word	0x20000028

080005d4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<3);
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <EXTI3_IRQHandler+0x1c>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <EXTI3_IRQHandler+0x1c>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[3]();
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <EXTI3_IRQHandler+0x20>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	4798      	blx	r3

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000028 	.word	0x20000028

080005f8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	//clear by writing "1" into the bit Pending register (EXTI_PR)
	EXTI->PR |= (1<<4);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <EXTI4_IRQHandler+0x1c>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <EXTI4_IRQHandler+0x1c>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALLback
	GP_IRQ_CallBack[4]();
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <EXTI4_IRQHandler+0x20>)
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4798      	blx	r3

}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010400 	.word	0x40010400
 8000618:	20000028 	.word	0x20000028

0800061c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { EXTI->PR |= (1<<5) ;          GP_IRQ_CallBack[5](); }
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	2b00      	cmp	r3, #0
 800062a:	d008      	beq.n	800063e <EXTI9_5_IRQHandler+0x22>
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	4a22      	ldr	r2, [pc, #136]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 8000632:	f043 0320 	orr.w	r3, r3, #32
 8000636:	6153      	str	r3, [r2, #20]
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <EXTI9_5_IRQHandler+0xa4>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) { EXTI->PR |= (1<<6) ;          GP_IRQ_CallBack[6](); }
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000646:	2b00      	cmp	r3, #0
 8000648:	d008      	beq.n	800065c <EXTI9_5_IRQHandler+0x40>
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 8000650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <EXTI9_5_IRQHandler+0xa4>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) { EXTI->PR |= (1<<7) ;          GP_IRQ_CallBack[7](); }
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000664:	2b00      	cmp	r3, #0
 8000666:	d008      	beq.n	800067a <EXTI9_5_IRQHandler+0x5e>
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800066e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000672:	6153      	str	r3, [r2, #20]
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <EXTI9_5_IRQHandler+0xa4>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) { EXTI->PR |= (1<<8) ;          GP_IRQ_CallBack[8](); }
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <EXTI9_5_IRQHandler+0x7c>
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800068c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <EXTI9_5_IRQHandler+0xa4>)
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) { EXTI->PR |= (1<<9) ;          GP_IRQ_CallBack[9](); }
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <EXTI9_5_IRQHandler+0x9a>
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <EXTI9_5_IRQHandler+0xa0>)
 80006aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ae:	6153      	str	r3, [r2, #20]
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <EXTI9_5_IRQHandler+0xa4>)
 80006b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b4:	4798      	blx	r3
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010400 	.word	0x40010400
 80006c0:	20000028 	.word	0x20000028

080006c4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { EXTI->PR |= (1<<10) ;          GP_IRQ_CallBack[10](); }
 80006c8:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <EXTI15_10_IRQHandler+0x22>
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a29      	ldr	r2, [pc, #164]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 80006da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006de:	6153      	str	r3, [r2, #20]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <EXTI15_10_IRQHandler+0xc0>)
 80006e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e4:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) { EXTI->PR |= (1<<11) ;          GP_IRQ_CallBack[11](); }
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <EXTI15_10_IRQHandler+0x40>
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a22      	ldr	r2, [pc, #136]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 80006f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <EXTI15_10_IRQHandler+0xc0>)
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) { EXTI->PR |= (1<<12) ;          GP_IRQ_CallBack[12](); }
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <EXTI15_10_IRQHandler+0x5e>
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071a:	6153      	str	r3, [r2, #20]
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <EXTI15_10_IRQHandler+0xc0>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) { EXTI->PR |= (1<<13) ;          GP_IRQ_CallBack[13](); }
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <EXTI15_10_IRQHandler+0x7c>
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000734:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <EXTI15_10_IRQHandler+0xc0>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) { EXTI->PR |= (1<<14) ;          GP_IRQ_CallBack[14](); }
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <EXTI15_10_IRQHandler+0x9a>
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6153      	str	r3, [r2, #20]
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <EXTI15_10_IRQHandler+0xc0>)
 800075a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075c:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) { EXTI->PR |= (1<<15) ;          GP_IRQ_CallBack[15](); }
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d008      	beq.n	800077c <EXTI15_10_IRQHandler+0xb8>
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <EXTI15_10_IRQHandler+0xbc>)
 8000770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b03      	ldr	r3, [pc, #12]	; (8000784 <EXTI15_10_IRQHandler+0xc0>)
 8000778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800077a:	4798      	blx	r3

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010400 	.word	0x40010400
 8000784:	20000028 	.word	0x20000028

08000788 <Get_CRLH_Position>:
 */

#include "STM32F103C6_GPIO_Drivers.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000798:	f000 80a5 	beq.w	80008e6 <Get_CRLH_Position+0x15e>
 800079c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007a0:	f300 80a3 	bgt.w	80008ea <Get_CRLH_Position+0x162>
 80007a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007a8:	f000 809b 	beq.w	80008e2 <Get_CRLH_Position+0x15a>
 80007ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007b0:	f300 809b 	bgt.w	80008ea <Get_CRLH_Position+0x162>
 80007b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b8:	f000 8091 	beq.w	80008de <Get_CRLH_Position+0x156>
 80007bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c0:	f300 8093 	bgt.w	80008ea <Get_CRLH_Position+0x162>
 80007c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007c8:	f000 8087 	beq.w	80008da <Get_CRLH_Position+0x152>
 80007cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007d0:	f300 808b 	bgt.w	80008ea <Get_CRLH_Position+0x162>
 80007d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007d8:	d07d      	beq.n	80008d6 <Get_CRLH_Position+0x14e>
 80007da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007de:	f300 8084 	bgt.w	80008ea <Get_CRLH_Position+0x162>
 80007e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007e6:	d074      	beq.n	80008d2 <Get_CRLH_Position+0x14a>
 80007e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007ec:	dc7d      	bgt.n	80008ea <Get_CRLH_Position+0x162>
 80007ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007f2:	d06c      	beq.n	80008ce <Get_CRLH_Position+0x146>
 80007f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007f8:	dc77      	bgt.n	80008ea <Get_CRLH_Position+0x162>
 80007fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007fe:	d064      	beq.n	80008ca <Get_CRLH_Position+0x142>
 8000800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000804:	dc71      	bgt.n	80008ea <Get_CRLH_Position+0x162>
 8000806:	2b80      	cmp	r3, #128	; 0x80
 8000808:	d05d      	beq.n	80008c6 <Get_CRLH_Position+0x13e>
 800080a:	2b80      	cmp	r3, #128	; 0x80
 800080c:	dc6d      	bgt.n	80008ea <Get_CRLH_Position+0x162>
 800080e:	2b20      	cmp	r3, #32
 8000810:	dc48      	bgt.n	80008a4 <Get_CRLH_Position+0x11c>
 8000812:	2b00      	cmp	r3, #0
 8000814:	dd69      	ble.n	80008ea <Get_CRLH_Position+0x162>
 8000816:	3b01      	subs	r3, #1
 8000818:	2b1f      	cmp	r3, #31
 800081a:	d866      	bhi.n	80008ea <Get_CRLH_Position+0x162>
 800081c:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <Get_CRLH_Position+0x9c>)
 800081e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000822:	bf00      	nop
 8000824:	080008ab 	.word	0x080008ab
 8000828:	080008af 	.word	0x080008af
 800082c:	080008eb 	.word	0x080008eb
 8000830:	080008b3 	.word	0x080008b3
 8000834:	080008eb 	.word	0x080008eb
 8000838:	080008eb 	.word	0x080008eb
 800083c:	080008eb 	.word	0x080008eb
 8000840:	080008b7 	.word	0x080008b7
 8000844:	080008eb 	.word	0x080008eb
 8000848:	080008eb 	.word	0x080008eb
 800084c:	080008eb 	.word	0x080008eb
 8000850:	080008eb 	.word	0x080008eb
 8000854:	080008eb 	.word	0x080008eb
 8000858:	080008eb 	.word	0x080008eb
 800085c:	080008eb 	.word	0x080008eb
 8000860:	080008bb 	.word	0x080008bb
 8000864:	080008eb 	.word	0x080008eb
 8000868:	080008eb 	.word	0x080008eb
 800086c:	080008eb 	.word	0x080008eb
 8000870:	080008eb 	.word	0x080008eb
 8000874:	080008eb 	.word	0x080008eb
 8000878:	080008eb 	.word	0x080008eb
 800087c:	080008eb 	.word	0x080008eb
 8000880:	080008eb 	.word	0x080008eb
 8000884:	080008eb 	.word	0x080008eb
 8000888:	080008eb 	.word	0x080008eb
 800088c:	080008eb 	.word	0x080008eb
 8000890:	080008eb 	.word	0x080008eb
 8000894:	080008eb 	.word	0x080008eb
 8000898:	080008eb 	.word	0x080008eb
 800089c:	080008eb 	.word	0x080008eb
 80008a0:	080008bf 	.word	0x080008bf
 80008a4:	2b40      	cmp	r3, #64	; 0x40
 80008a6:	d00c      	beq.n	80008c2 <Get_CRLH_Position+0x13a>
 80008a8:	e01f      	b.n	80008ea <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e01e      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e01c      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 80008b2:	2308      	movs	r3, #8
 80008b4:	e01a      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 80008b6:	230c      	movs	r3, #12
 80008b8:	e018      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 80008ba:	2310      	movs	r3, #16
 80008bc:	e016      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80008be:	2314      	movs	r3, #20
 80008c0:	e014      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80008c2:	2318      	movs	r3, #24
 80008c4:	e012      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80008c6:	231c      	movs	r3, #28
 80008c8:	e010      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e00e      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	e00c      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80008d2:	2308      	movs	r3, #8
 80008d4:	e00a      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80008d6:	230c      	movs	r3, #12
 80008d8:	e008      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80008da:	2310      	movs	r3, #16
 80008dc:	e006      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80008de:	2314      	movs	r3, #20
 80008e0:	e004      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80008e2:	2318      	movs	r3, #24
 80008e4:	e002      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80008e6:	231c      	movs	r3, #28
 80008e8:	e000      	b.n	80008ec <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <MCAL_GPIO_Init>:
 * @Note			-STM32F103C6 MCU has GPIO A,B,C,D,E modules
 * 					 but LQFP48 package has only GPIO A,B,part of (C,D) exported as external PINS from the MCU
 * ===================================
 * */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
	// port configuration register low (GPIOx_CRL) configure pin from 0 => 7
	// port configuration register high (GPIOx_CRH) configure pin from 8 => 15
	volatile uint32_t*  configRegister = NULL;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config =0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]

	configRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL  :  &GPIOx->CRH;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	2bff      	cmp	r3, #255	; 0xff
 8000910:	d801      	bhi.n	8000916 <MCAL_GPIO_Init+0x1e>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	e001      	b.n	800091a <MCAL_GPIO_Init+0x22>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3304      	adds	r3, #4
 800091a:	60bb      	str	r3, [r7, #8]

	//clear CNF0[1:0] MODE0[1:0]
	(*configRegister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff31 	bl	8000788 <Get_CRLH_Position>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	230f      	movs	r3, #15
 800092c:	4093      	lsls	r3, r2
 800092e:	43da      	mvns	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	401a      	ands	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	601a      	str	r2, [r3, #0]

	// if pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) )
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	789b      	ldrb	r3, [r3, #2]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d00b      	beq.n	800095a <MCAL_GPIO_Init+0x62>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	2b05      	cmp	r3, #5
 8000948:	d007      	beq.n	800095a <MCAL_GPIO_Init+0x62>
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d003      	beq.n	800095a <MCAL_GPIO_Init+0x62>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	789b      	ldrb	r3, [r3, #2]
 8000956:	2b07      	cmp	r3, #7
 8000958:	d10e      	bne.n	8000978 <MCAL_GPIO_Init+0x80>
	{
		//SET CNF0[1:0] MODE0[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_output_speed)) & 0x0F );
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	789b      	ldrb	r3, [r3, #2]
 800095e:	3b04      	subs	r3, #4
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	b25a      	sxtb	r2, r3
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	78db      	ldrb	r3, [r3, #3]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b25b      	sxtb	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e02c      	b.n	80009d2 <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else //  00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d003      	beq.n	8000988 <MCAL_GPIO_Init+0x90>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d107      	bne.n	8000998 <MCAL_GPIO_Init+0xa0>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2) | 0x0)& 0x0F);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	789b      	ldrb	r3, [r3, #2]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f003 030f 	and.w	r3, r3, #15
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e01c      	b.n	80009d2 <MCAL_GPIO_Init+0xda>
		}else if((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF)) // Consider it as input floating
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	2b08      	cmp	r3, #8
 800099e:	d102      	bne.n	80009a6 <MCAL_GPIO_Init+0xae>
		{
			//SET CNF0[1:0] MODE0[1:0] = 00
			PIN_Config =( (((GPIO_MODE_INPUT_FLOATING) << 2)  | 0x0) & 0x0F);
 80009a0:	2304      	movs	r3, #4
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e015      	b.n	80009d2 <MCAL_GPIO_Init+0xda>
		}else // PU PD
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2) | 0x0)& 0x0F);
 80009a6:	2308      	movs	r3, #8
 80009a8:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU) // pull up
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	789b      	ldrb	r3, [r3, #2]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d107      	bne.n	80009c2 <MCAL_GPIO_Init+0xca>
			{
				//Table 20. Port bit configuration table PxODR 1 => input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	8812      	ldrh	r2, [r2, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	e007      	b.n	80009d2 <MCAL_GPIO_Init+0xda>
			}else // pull down
			{
				//Table 20. Port bit configuration table PxODR 0 => input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	8812      	ldrh	r2, [r2, #0]
 80009ca:	43d2      	mvns	r2, r2
 80009cc:	401a      	ands	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write on CRL OR CRH
	(*configRegister) |= (PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80009d2:	7bfc      	ldrb	r4, [r7, #15]
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fed5 	bl	8000788 <Get_CRLH_Position>
 80009de:	4603      	mov	r3, r0
 80009e0:	fa04 f203 	lsl.w	r2, r4, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	431a      	orrs	r2, r3
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}

080009f6 <MCAL_GPIO_WritePin>:
 * @retval			-none
 * @Note			-none
 * ===================================
 * */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t value)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
 8000a02:	4613      	mov	r3, r2
 8000a04:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET)
 8000a06:	787b      	ldrb	r3, [r7, #1]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <MCAL_GPIO_WritePin+0x1e>
		// OR
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000a0c:	887a      	ldrh	r2, [r7, #2]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	611a      	str	r2, [r3, #16]
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber;

	}

}
 8000a12:	e002      	b.n	8000a1a <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000a14:	887a      	ldrh	r2, [r7, #2]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	615a      	str	r2, [r3, #20]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <MCAL_GPIO_WritePort>:
 * @retval			-none
 * @Note			-none
 * ===================================
 * */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx,uint16_t value)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)value;
 8000a30:	887a      	ldrh	r2, [r7, #2]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60da      	str	r2, [r3, #12]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <MCAL_I2C_INIT>:
 * @retval			- none
 * @Note			-
 * ===================================
 * */
void MCAL_I2C_INIT(I2C_TypeDef* I2Cx ,I2C_InitCFG_t* I2C_INITstruct )
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	uint16_t tempREG =0 , FreqRange =0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	82fb      	strh	r3, [r7, #22]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 8000a52:	4b7f      	ldr	r3, [pc, #508]	; (8000c50 <MCAL_I2C_INIT+0x210>)
 8000a54:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	81fb      	strh	r3, [r7, #14]


	// enable clock
	if(I2Cx == I2C1)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a7d      	ldr	r2, [pc, #500]	; (8000c54 <MCAL_I2C_INIT+0x214>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d110      	bne.n	8000a84 <MCAL_I2C_INIT+0x44>
	{
		Global_I2C_Config[I2C1_Index] = *I2C_INITstruct;
 8000a62:	4a7d      	ldr	r2, [pc, #500]	; (8000c58 <MCAL_I2C_INIT+0x218>)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	4614      	mov	r4, r2
 8000a68:	461d      	mov	r5, r3
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C1_CLK_EN();
 8000a76:	4b79      	ldr	r3, [pc, #484]	; (8000c5c <MCAL_I2C_INIT+0x21c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a78      	ldr	r2, [pc, #480]	; (8000c5c <MCAL_I2C_INIT+0x21c>)
 8000a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	e014      	b.n	8000aae <MCAL_I2C_INIT+0x6e>

	}else if(I2Cx == I2C2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a76      	ldr	r2, [pc, #472]	; (8000c60 <MCAL_I2C_INIT+0x220>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d110      	bne.n	8000aae <MCAL_I2C_INIT+0x6e>
	{
		Global_I2C_Config[I2C2_Index] = *I2C_INITstruct;
 8000a8c:	4b72      	ldr	r3, [pc, #456]	; (8000c58 <MCAL_I2C_INIT+0x218>)
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	f103 0420 	add.w	r4, r3, #32
 8000a94:	4615      	mov	r5, r2
 8000a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C2_CLK_EN();
 8000aa2:	4b6e      	ldr	r3, [pc, #440]	; (8000c5c <MCAL_I2C_INIT+0x21c>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a6d      	ldr	r2, [pc, #436]	; (8000c5c <MCAL_I2C_INIT+0x21c>)
 8000aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aac:	61d3      	str	r3, [r2, #28]
	}
	if(I2C_INITstruct->I2C_Mode == I2C_Mode_I2C)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8084 	bne.w	8000bc0 <MCAL_I2C_INIT+0x180>
	{
		/*1. INIT Timing*/
		// Get I2C_CR2 value
		tempREG = I2Cx->I2C_CR2;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	82fb      	strh	r3, [r7, #22]
		// clear Bits 5:0 FREQ[5:0]: Peripheral clock frequency
		tempREG &= ~(I2C_CR2_FREQ_Msk);
 8000abe:	8afb      	ldrh	r3, [r7, #22]
 8000ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ac4:	82fb      	strh	r3, [r7, #22]
		// get PCLK value from RCC Driver
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 8000ac6:	f000 faa3 	bl	8001010 <MCAL_RCC_GetPCLK1Freq>
 8000aca:	6138      	str	r0, [r7, #16]
		// write this value on tmpreg
		FreqRange = (uint16_t)(pclk1/1000000);
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4a65      	ldr	r2, [pc, #404]	; (8000c64 <MCAL_I2C_INIT+0x224>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	0c9b      	lsrs	r3, r3, #18
 8000ad6:	82bb      	strh	r3, [r7, #20]

		tempREG |= FreqRange;
 8000ad8:	8afa      	ldrh	r2, [r7, #22]
 8000ada:	8abb      	ldrh	r3, [r7, #20]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	82fb      	strh	r3, [r7, #22]
		// write to I2C_CR2
		I2Cx->I2C_CR2 = tempREG;
 8000ae0:	8afa      	ldrh	r2, [r7, #22]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	605a      	str	r2, [r3, #4]


		//• Configure the clock control registers
		// disable selected I2C clock to configure timing
		I2Cx->I2C_CR1 &= ~(I2C_CR1_PE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f023 0201 	bic.w	r2, r3, #1
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
		tempREG =0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	82fb      	strh	r3, [r7, #22]

		// configure speed in standard mode
		if(I2C_INITstruct->I2C_ClockSpeed == I2C_SCLK_SM_50K || I2C_INITstruct->I2C_ClockSpeed == I2C_SCLK_SM_100K)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d004      	beq.n	8000b0c <MCAL_I2C_INIT+0xcc>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a58      	ldr	r2, [pc, #352]	; (8000c68 <MCAL_I2C_INIT+0x228>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d112      	bne.n	8000b32 <MCAL_I2C_INIT+0xf2>
			 * Ti2c/2 = CRR * Tpclk
			 * CRR = Ti2c/ (2 * Tpclk)
			 * CRR = Fpclk/ (2 * Fi2c)
			 * */
			// result = pclk1 / (I2C_INITstruct->I2C_ClockSpeed * 2); same as EQ in next line
			result = (uint16_t)( pclk1 / (I2C_INITstruct->I2C_ClockSpeed << 1) );
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	81fb      	strh	r3, [r7, #14]

			tempREG |= result;
 8000b1a:	8afa      	ldrh	r2, [r7, #22]
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	82fb      	strh	r3, [r7, #22]

			// write I2Cx->I2C_CCR
			I2Cx->I2C_CCR = tempREG;
 8000b22:	8afa      	ldrh	r2, [r7, #22]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	61da      	str	r2, [r3, #28]
			/* --------------- I2C_TRISE configuration ---------------*/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.
			//			(1000 ns / 125 ns = 8 + 1)
			I2Cx->I2C_TRISE = FreqRange + 1;
 8000b28:	8abb      	ldrh	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	621a      	str	r2, [r3, #32]
		{
			// fast mode not supported yet
		}

		/* --------------- I2C_CR1 configuration ---------------*/
		tempREG = I2Cx->I2C_CR1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	82fb      	strh	r3, [r7, #22]

		tempREG |= I2C_INITstruct->I2C_ACK_Controller;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	8afb      	ldrh	r3, [r7, #22]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	82fb      	strh	r3, [r7, #22]
		tempREG |= I2C_INITstruct->I2C_General_Call_Address_Detection;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	8afb      	ldrh	r3, [r7, #22]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	82fb      	strh	r3, [r7, #22]
		tempREG |= I2C_INITstruct->I2C_Mode;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	8afb      	ldrh	r3, [r7, #22]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	82fb      	strh	r3, [r7, #22]
		tempREG |= I2C_INITstruct->I2C_STRETCH_Mode;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	8afb      	ldrh	r3, [r7, #22]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	82fb      	strh	r3, [r7, #22]

		// write on I2Cx->I2C_CR1
		I2Cx->I2C_CR1 = tempREG ;
 8000b68:	8afa      	ldrh	r2, [r7, #22]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]

		/* --------------- I2C_OAR1 & I2C_OAR2 configuration ---------------*/
		tempREG =0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	82fb      	strh	r3, [r7, #22]
		if(I2C_INITstruct->Slave_I2C_Address.Enable_Dual_address ==1)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	899b      	ldrh	r3, [r3, #12]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d10f      	bne.n	8000b9a <MCAL_I2C_INIT+0x15a>
		{
			//Enable Dual Address
			tempREG |= I2C_OAR2_ENDUAL_Msk;
 8000b7a:	8afb      	ldrh	r3, [r7, #22]
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	82fb      	strh	r3, [r7, #22]
			/*Set Secondary Address*/
			tempREG |= (I2C_INITstruct->Slave_I2C_Address.Secondary_Slave_address << I2C_OAR2_ADD2_Pos);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	8a1b      	ldrh	r3, [r3, #16]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	b21a      	sxth	r2, r3
 8000b8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	82fb      	strh	r3, [r7, #22]
			I2Cx->I2C_OAR2 = tempREG;
 8000b94:	8afa      	ldrh	r2, [r7, #22]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60da      	str	r2, [r3, #12]
		}
		tempREG = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	82fb      	strh	r3, [r7, #22]

		tempREG |= (I2C_INITstruct->Slave_I2C_Address.Primary_Slave_address << 1);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	89db      	ldrh	r3, [r3, #14]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	b21a      	sxth	r2, r3
 8000ba6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	82fb      	strh	r3, [r7, #22]
		tempREG |= (I2C_INITstruct->Slave_I2C_Address.I2C_Slave_Address_Mode);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	8a5a      	ldrh	r2, [r3, #18]
 8000bb4:	8afb      	ldrh	r3, [r7, #22]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	82fb      	strh	r3, [r7, #22]
		I2Cx->I2C_OAR1 = tempREG;
 8000bba:	8afa      	ldrh	r2, [r7, #22]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
	{
		// SMBUS not supported yet
	}

	// INTERRUPT MODE (salve mode ) // check callback != NULL
	if(I2C_INITstruct->P_Slave_Event_CallBack != NULL)  // that enable salve IRQ State Mode
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d038      	beq.n	8000c3a <MCAL_I2C_INIT+0x1fa>
	{
		// enable IRQ
		I2Cx->I2C_CR2 |= (I2C_CR2_ITEVTEN);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITERREN);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	605a      	str	r2, [r3, #4]
		I2Cx->I2C_CR2 |= (I2C_CR2_ITBUFEN);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <MCAL_I2C_INIT+0x214>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d10c      	bne.n	8000c0e <MCAL_I2C_INIT+0x1ce>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MCAL_I2C_INIT+0x22c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <MCAL_I2C_INIT+0x22c>)
 8000bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bfe:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MCAL_I2C_INIT+0x230>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <MCAL_I2C_INIT+0x230>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e00f      	b.n	8000c2e <MCAL_I2C_INIT+0x1ee>
		}else if(I2Cx == I2C2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <MCAL_I2C_INIT+0x220>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10b      	bne.n	8000c2e <MCAL_I2C_INIT+0x1ee>
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MCAL_I2C_INIT+0x230>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MCAL_I2C_INIT+0x230>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MCAL_I2C_INIT+0x230>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MCAL_I2C_INIT+0x230>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6013      	str	r3, [r2, #0]
		}
		I2Cx->I2C_SR1 =0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
		I2Cx->I2C_SR2 =0;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]

	}

	// enable selected I2C peripheral
	I2Cx->I2C_CR1 |= I2C_CR1_PE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f043 0201 	orr.w	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]


}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	007a1200 	.word	0x007a1200
 8000c54:	40005400 	.word	0x40005400
 8000c58:	20000064 	.word	0x20000064
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40005800 	.word	0x40005800
 8000c64:	431bde83 	.word	0x431bde83
 8000c68:	000186a0 	.word	0x000186a0
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000e104 	.word	0xe000e104

08000c74 <MCAL_I2C_GPIO_Set_PIN>:
	}

}

void MCAL_I2C_GPIO_Set_PIN(I2C_TypeDef* I2Cx  )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	//	9.1.11 GPIO configurations for device peripherals
	//		Table 27. I2C
	//		I2C pinout 			Configuration 			GPIO configuration
	//		I2Cx_SCL 			I2C clock				Alternate function open drain
	//		I2Cx_SDA 			I2C Data I/O 			Alternate function open drain
	if(I2Cx == I2C1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <MCAL_I2C_GPIO_Set_PIN+0x88>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d118      	bne.n	8000cb6 <MCAL_I2C_GPIO_Set_PIN+0x42>
	{
		// PB6 : I2C1_SCL
		// PB7 : I2C1_SDA
		GPIO_PinConfig_t I2C_PINCFG;
		// PB6 : I2C1_SCL
		I2C_PINCFG.GPIO_PinNumber = GPIO_PIN_6;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	81bb      	strh	r3, [r7, #12]
		I2C_PINCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	73bb      	strb	r3, [r7, #14]
		I2C_PINCFG.GPIO_output_speed = GPIO_SPEED_10M;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_PINCFG);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	481a      	ldr	r0, [pc, #104]	; (8000d00 <MCAL_I2C_GPIO_Set_PIN+0x8c>)
 8000c98:	f7ff fe2e 	bl	80008f8 <MCAL_GPIO_Init>

		// PB7 : I2C1_SDA
		I2C_PINCFG.GPIO_PinNumber = GPIO_PIN_7;
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	81bb      	strh	r3, [r7, #12]
		I2C_PINCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	73bb      	strb	r3, [r7, #14]
		I2C_PINCFG.GPIO_output_speed = GPIO_SPEED_10M;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &I2C_PINCFG);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <MCAL_I2C_GPIO_Set_PIN+0x8c>)
 8000cb0:	f7ff fe22 	bl	80008f8 <MCAL_GPIO_Init>
		I2C_PINCFG.GPIO_output_speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &I2C_PINCFG);

	}

}
 8000cb4:	e01d      	b.n	8000cf2 <MCAL_I2C_GPIO_Set_PIN+0x7e>
	}else if(I2Cx == I2C2)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MCAL_I2C_GPIO_Set_PIN+0x90>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d119      	bne.n	8000cf2 <MCAL_I2C_GPIO_Set_PIN+0x7e>
		I2C_PINCFG.GPIO_PinNumber = GPIO_PIN_10;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	813b      	strh	r3, [r7, #8]
		I2C_PINCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	72bb      	strb	r3, [r7, #10]
		I2C_PINCFG.GPIO_output_speed = GPIO_SPEED_10M;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOB, &I2C_PINCFG);
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MCAL_I2C_GPIO_Set_PIN+0x8c>)
 8000cd4:	f7ff fe10 	bl	80008f8 <MCAL_GPIO_Init>
		I2C_PINCFG.GPIO_PinNumber = GPIO_PIN_11;
 8000cd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cdc:	813b      	strh	r3, [r7, #8]
		I2C_PINCFG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	72bb      	strb	r3, [r7, #10]
		I2C_PINCFG.GPIO_output_speed = GPIO_SPEED_10M;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOB, &I2C_PINCFG);
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MCAL_I2C_GPIO_Set_PIN+0x8c>)
 8000cee:	f7ff fe03 	bl	80008f8 <MCAL_GPIO_Init>
}
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	40010c00 	.word	0x40010c00
 8000d04:	40005800 	.word	0x40005800

08000d08 <MCAL_I2C_Master_TX>:



void MCAL_I2C_Master_TX(I2C_TypeDef * I2Cx , uint16_t DeviceAddress, uint8_t* dataOut , uint32_t dataLen, Stop_Condition Stop , Repeated_Start start)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	460b      	mov	r3, r1
 8000d16:	817b      	strh	r3, [r7, #10]
	int i=0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
	 * time_interrupt(){flag =1)
	 * so any code exist in while (check flag || any polling condition)
	 * */

	// 1. Set the start bit in I2C_CR1 register to generate start condition
	I2C_GenerateStart(I2Cx , ENABLE , start);
 8000d1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d20:	461a      	mov	r2, r3
 8000d22:	2101      	movs	r1, #1
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	f000 f84b 	bl	8000dc0 <I2C_GenerateStart>

	// 2. wait for EV5
	// EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(! I2C_GetFlagStatus(I2Cx , EV5));
 8000d2a:	bf00      	nop
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f000 f8a8 	bl	8000e84 <I2C_GetFlagStatus>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f8      	beq.n	8000d2c <MCAL_I2C_Master_TX+0x24>

	// 3. send Address
	I2C_SenAddress(I2Cx ,DeviceAddress , I2C_Direction_Transmitter);
 8000d3a:	897b      	ldrh	r3, [r7, #10]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f000 f864 	bl	8000e0e <I2C_SenAddress>

	// 4. WAIT for EV6
	// EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while(! I2C_GetFlagStatus(I2Cx , EV6));
 8000d46:	bf00      	nop
 8000d48:	2102      	movs	r1, #2
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f89a 	bl	8000e84 <I2C_GetFlagStatus>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0f8      	beq.n	8000d48 <MCAL_I2C_Master_TX+0x40>

	// 5. /* TRA , BUSY , MSL , TXE flag */
	while(! I2C_GetFlagStatus(I2Cx , MASTER_BYTE_TRANSMITTING));
 8000d56:	bf00      	nop
 8000d58:	4918      	ldr	r1, [pc, #96]	; (8000dbc <MCAL_I2C_Master_TX+0xb4>)
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f000 f892 	bl	8000e84 <I2C_GetFlagStatus>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f8      	beq.n	8000d58 <MCAL_I2C_Master_TX+0x50>

	// 6. send data
	for(i=0;i< dataLen ; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e011      	b.n	8000d90 <MCAL_I2C_Master_TX+0x88>
	{
		// write in the DR register data to be transmitted
		I2Cx->I2C_DR = dataOut[i];
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	611a      	str	r2, [r3, #16]

		// 7. wait EV8
		// EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while(!I2C_GetFlagStatus(I2Cx , EV8));
 8000d7a:	bf00      	nop
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f000 f880 	bl	8000e84 <I2C_GetFlagStatus>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f8      	beq.n	8000d7c <MCAL_I2C_Master_TX+0x74>
	for(i=0;i< dataLen ; i++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8e9      	bhi.n	8000d6c <MCAL_I2C_Master_TX+0x64>
	// 8. wait EV8_2
	// EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	// while(!I2C_GetFlagStatus(I2Cx , EV8_2));

	// 9. stop condition
	if(Stop == With_STOP)
 8000d98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d104      	bne.n	8000daa <MCAL_I2C_Master_TX+0xa2>
	{
		I2C_GenerateStop(I2Cx , ENABLE);
 8000da0:	2101      	movs	r1, #1
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f000 f852 	bl	8000e4c <I2C_GenerateStop>
	{
		I2C_GenerateStop(I2Cx , DISABLE);
	}


}
 8000da8:	e003      	b.n	8000db2 <MCAL_I2C_Master_TX+0xaa>
		I2C_GenerateStop(I2Cx , DISABLE);
 8000daa:	2100      	movs	r1, #0
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f84d 	bl	8000e4c <I2C_GenerateStop>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	00070080 	.word	0x00070080

08000dc0 <I2C_GenerateStart>:




void I2C_GenerateStart(I2C_TypeDef * I2Cx ,FunctionalState NewSatate , Repeated_Start start)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	70bb      	strb	r3, [r7, #2]
	if(start != repeated_Start)
 8000dd0:	78bb      	ldrb	r3, [r7, #2]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d007      	beq.n	8000de6 <I2C_GenerateStart+0x26>
	{
		// check if the BUS in idle
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000dd6:	bf00      	nop
 8000dd8:	2100      	movs	r1, #0
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f852 	bl	8000e84 <I2C_GetFlagStatus>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f8      	bne.n	8000dd8 <I2C_GenerateStart+0x18>
	//				0: No Start generation
	//				1: Repeated start generation
	//		In Slave mode:
	//				0: No Start generation
	//				1: Start generation when the bus is free
	if(NewSatate != DISABLE)
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <I2C_GenerateStart+0x3a>
	{
		// generate start condition
		I2Cx->I2C_CR1 |= (I2C_CR1_START);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	601a      	str	r2, [r3, #0]
	{
		// disable start condition generation
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START);
	}

}
 8000df8:	e005      	b.n	8000e06 <I2C_GenerateStart+0x46>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_START);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <I2C_SenAddress>:


// supported only 7bit address mode
void I2C_SenAddress(I2C_TypeDef * I2Cx ,uint16_t address , I2C_Direction Direction)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	707b      	strb	r3, [r7, #1]
	address = (address<<1);
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter )
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d004      	beq.n	8000e34 <I2C_SenAddress+0x26>
	{
		// set bit 0 for read
		address |= (1<<0);
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	807b      	strh	r3, [r7, #2]
 8000e32:	e003      	b.n	8000e3c <I2C_SenAddress+0x2e>
	}else
	{
		// reset bit 0 for write
		address &= ~(1<<0);
 8000e34:	887b      	ldrh	r3, [r7, #2]
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	807b      	strh	r3, [r7, #2]
	}
	I2Cx->I2C_DR = address;
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <I2C_GenerateStop>:

void I2C_GenerateStop (I2C_TypeDef * I2Cx , FunctionalState NewSatate)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	if(NewSatate != DISABLE)
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <I2C_GenerateStop+0x20>
	{
		// generate Stop condition
		I2Cx->I2C_CR1 |= I2C_CR1_STOP;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
	{
		// disable Stop condition generation
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);
	}

}
 8000e6a:	e005      	b.n	8000e78 <I2C_GenerateStop+0x2c>
		I2Cx->I2C_CR1 &= ~(I2C_CR1_STOP);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
	...

08000e84 <I2C_GetFlagStatus>:

Flag_Status I2C_GetFlagStatus(I2C_TypeDef * I2Cx ,State flag)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	//	volatile uint32_t dummyRead;

	uint32_t flag1 = 0 , flag2 = 0 , lastEvent =0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
	Flag_Status bitStatus = RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	75fb      	strb	r3, [r7, #23]


	switch(flag)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	d811      	bhi.n	8000ec8 <I2C_GetFlagStatus+0x44>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d86a      	bhi.n	8000f80 <I2C_GetFlagStatus+0xfc>
 8000eaa:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <I2C_GetFlagStatus+0x2c>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000ed3 	.word	0x08000ed3
 8000eb4:	08000eeb 	.word	0x08000eeb
 8000eb8:	08000f03 	.word	0x08000f03
 8000ebc:	08000f51 	.word	0x08000f51
 8000ec0:	08000f51 	.word	0x08000f51
 8000ec4:	08000f69 	.word	0x08000f69
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	4a30      	ldr	r2, [pc, #192]	; (8000f8c <I2C_GetFlagStatus+0x108>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d024      	beq.n	8000f1a <I2C_GetFlagStatus+0x96>
 8000ed0:	e056      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
		//		1: Communication ongoing on the bus
		//	– Set by hardware on detection of SDA or SCL low
		//	– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).
		if((I2Cx->I2C_SR2) & (I2C_SR2_BUSY))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <I2C_GetFlagStatus+0x60>
			bitStatus = SET;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	75fb      	strb	r3, [r7, #23]
		else
			bitStatus = RESET;
		break;
 8000ee2:	e04d      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
			bitStatus = RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
		break;
 8000ee8:	e04a      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
		//			0: No Start condition
		//			1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if( (I2Cx->I2C_SR1) & (I2C_SR1_SB) )
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <I2C_GetFlagStatus+0x78>
			bitStatus = SET;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	75fb      	strb	r3, [r7, #23]
		else
			bitStatus = RESET;
		break;
 8000efa:	e041      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
			bitStatus = RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	75fb      	strb	r3, [r7, #23]
		break;
 8000f00:	e03e      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
		//		This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
		//		when PE=0.
		//		Address matched (Slave)
		//				0: Address mismatched or not received.
		//				1: Received address matched.
		if( (I2Cx->I2C_SR1) & (I2C_SR1_ADDR) )
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <I2C_GetFlagStatus+0x90>
			bitStatus = SET;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
		else
			bitStatus = RESET;

		// to clear ADDR field : leared by reading SR1 register followed by reading SR2
		//dummyRead = I2Cx->I2C_SR2;
		break;
 8000f12:	e035      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
			bitStatus = RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	75fb      	strb	r3, [r7, #23]
		break;
 8000f18:	e032      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
	}

	case MASTER_BYTE_TRANSMITTING:
	{
		// red the I2Cx status register
		flag1 = I2Cx->I2C_SR1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->I2C_SR2;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	60fb      	str	r3, [r7, #12]
		flag2 = flag2 << 16;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	60fb      	str	r3, [r7, #12]
		lastEvent = (flag1 | flag2) & ((uint32_t) 0x00FFFFFF);
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f36:	60bb      	str	r3, [r7, #8]

		if((lastEvent & flag) == flag)
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d102      	bne.n	8000f4a <I2C_GetFlagStatus+0xc6>
			bitStatus = SET;
 8000f44:	2301      	movs	r3, #1
 8000f46:	75fb      	strb	r3, [r7, #23]
		else
			bitStatus = RESET;

		break;
 8000f48:	e01a      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
			bitStatus = RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
		break;
 8000f4e:	e017      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
		//		– Set when DR is empty in transmission. TxE is not set during address phase.
		//		– Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0.
		//		TxE is not set if either a NACK is received, or if next byte to be transmitted is PEC (PEC=1)
		//		Note: TxE is not cleared by writing the first data being transmitted, or by writing data when
		//		BTF is set, as in both cases the data register is still empty.
		if( (I2Cx->I2C_SR1) & (I2C_SR1_TXE) )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <I2C_GetFlagStatus+0xde>
			bitStatus = SET;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	75fb      	strb	r3, [r7, #23]
		else
			bitStatus = RESET;

		break;
 8000f60:	e00e      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
			bitStatus = RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]
		break;
 8000f66:	e00b      	b.n	8000f80 <I2C_GetFlagStatus+0xfc>
		//			1: Data register not empty
		//		– Set when data register is not empty in receiver mode. RxNE is not set during address phase.
		//		– Cleared by software reading or writing the DR register or by hardware when PE=0.
		//		RxNE is not set in case of ARLO event.
		//		Note: RxNE is not cleared by reading data when BTF is set, as the data register is still full.
		if( (I2Cx->I2C_SR1) & (I2C_SR1_RXNE) )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <I2C_GetFlagStatus+0xf6>
			bitStatus = SET;
 8000f74:	2301      	movs	r3, #1
 8000f76:	75fb      	strb	r3, [r7, #23]
		else
			bitStatus = RESET;

		break;
 8000f78:	e001      	b.n	8000f7e <I2C_GetFlagStatus+0xfa>
			bitStatus = RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
		break;
 8000f7e:	bf00      	nop
	}
	}
	return bitStatus;
 8000f80:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f82:	4618      	mov	r0, r3
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	00070080 	.word	0x00070080

08000f90 <I2C1_EV_IRQHandler>:
//I2C_EV_DATA_REQ,	// the APP layer should send the data (I2C_Slave_SendData) in this state
//I2C_EV_DATA_REV,	// the APP layer should receive data  (I2C_Slave_ReceiveData) in this state

// I2C1 Event Interrupt Handler
void I2C1_EV_IRQHandler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
//	Global_I2C_Config[0].P_Slave_Event_CallBack(state);
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <I2C1_ER_IRQHandler>:

// I2C1 Error Interrupt Handler
void I2C1_ER_IRQHandler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <MCAL_RCC_GetSYS_ClockFreq>:




uint32_t MCAL_RCC_GetSYS_ClockFreq(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable

	switch((RCC->CFGR >> 2) & 0b11)
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MCAL_RCC_GetSYS_ClockFreq+0x34>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d00a      	beq.n	8000fd0 <MCAL_RCC_GetSYS_ClockFreq+0x28>
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d80a      	bhi.n	8000fd4 <MCAL_RCC_GetSYS_ClockFreq+0x2c>
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <MCAL_RCC_GetSYS_ClockFreq+0x20>
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d002      	beq.n	8000fcc <MCAL_RCC_GetSYS_ClockFreq+0x24>
 8000fc6:	e005      	b.n	8000fd4 <MCAL_RCC_GetSYS_ClockFreq+0x2c>
	{

	case 0:
		return HSI_RC_Clock;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <MCAL_RCC_GetSYS_ClockFreq+0x38>)
 8000fca:	e003      	b.n	8000fd4 <MCAL_RCC_GetSYS_ClockFreq+0x2c>
		break;

	case 1:
		// TODO: need to calculate it //HSE user should specify it
		return HSE_Clock;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <MCAL_RCC_GetSYS_ClockFreq+0x3c>)
 8000fce:	e001      	b.n	8000fd4 <MCAL_RCC_GetSYS_ClockFreq+0x2c>
		break;

	case 2:
		// TODO: need to calculate it //PLLCLK & PLLMUL & PLL SOURCE MUX
		return 16000000;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <MCAL_RCC_GetSYS_ClockFreq+0x3c>)
 8000fd2:	e7ff      	b.n	8000fd4 <MCAL_RCC_GetSYS_ClockFreq+0x2c>
		break;
	}

}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	007a1200 	.word	0x007a1200
 8000fe4:	00f42400 	.word	0x00f42400

08000fe8 <MCAL_RCC_GetHCLKFreq>:


//Bits 7:4 HPRE[3:0]: AHB prescaler
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_ClockFreq() >> AHBPrescTable[((RCC->CFGR >> 4) & 0b1111)]); // the first shift is multiplication
 8000fec:	f7ff ffdc 	bl	8000fa8 <MCAL_RCC_GetSYS_ClockFreq>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	4903      	ldr	r1, [pc, #12]	; (800100c <MCAL_RCC_GetHCLKFreq+0x24>)
 8000ffe:	5ccb      	ldrb	r3, [r1, r3]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	080012b4 	.word	0x080012b4

08001010 <MCAL_RCC_GetPCLK1Freq>:


//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	/* ============== GET HCLK source and compute PCLK1 Frequency ============== */
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[((RCC->CFGR >> 8) & 0b111)]); // the first shift is multiplication
 8001014:	f7ff ffe8 	bl	8000fe8 <MCAL_RCC_GetHCLKFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000
 8001034:	080012ac 	.word	0x080012ac

08001038 <SPI1_IRQHandler>:
 * ===========================================================================================================
 *											ISR
 * ===========================================================================================================
 * */
void SPI1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_src;
	IRQ_src.TXE   = ( ( (SPI1->SPI_SR) & (1<<1) ) >> 1);
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <SPI1_IRQHandler+0x54>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	085b      	lsrs	r3, r3, #1
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	f362 0300 	bfi	r3, r2, #0, #1
 8001050:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE  = ( ( (SPI1->SPI_SR) & (1<<0) ) >> 0);
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <SPI1_IRQHandler+0x54>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	793b      	ldrb	r3, [r7, #4]
 800105e:	f362 0341 	bfi	r3, r2, #1, #1
 8001062:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI  = ( ( (SPI1->SPI_SR) & (1<<4) ) >> 4);
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <SPI1_IRQHandler+0x54>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	793b      	ldrb	r3, [r7, #4]
 8001072:	f362 0382 	bfi	r3, r2, #2, #1
 8001076:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(IRQ_src);
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SPI1_IRQHandler+0x58>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	7938      	ldrb	r0, [r7, #4]
 8001080:	4798      	blx	r3
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40013000 	.word	0x40013000
 8001090:	200000a4 	.word	0x200000a4

08001094 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_src;
	IRQ_src.TXE   = ( ( (SPI2->SPI_SR) & (1<<1) ) >> 1);
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SPI2_IRQHandler+0x54>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	085b      	lsrs	r3, r3, #1
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	793b      	ldrb	r3, [r7, #4]
 80010a8:	f362 0300 	bfi	r3, r2, #0, #1
 80010ac:	713b      	strb	r3, [r7, #4]
	IRQ_src.RXNE  = ( ( (SPI2->SPI_SR) & (1<<0) ) >> 0);
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <SPI2_IRQHandler+0x54>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	793b      	ldrb	r3, [r7, #4]
 80010ba:	f362 0341 	bfi	r3, r2, #1, #1
 80010be:	713b      	strb	r3, [r7, #4]
	IRQ_src.ERRI  = ( ( (SPI2->SPI_SR) & (1<<4) ) >> 4);
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <SPI2_IRQHandler+0x54>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	793b      	ldrb	r3, [r7, #4]
 80010ce:	f362 0382 	bfi	r3, r2, #2, #1
 80010d2:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(IRQ_src);
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SPI2_IRQHandler+0x58>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	7938      	ldrb	r0, [r7, #4]
 80010dc:	4798      	blx	r3
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40003800 	.word	0x40003800
 80010ec:	200000a4 	.word	0x200000a4

080010f0 <USART1_IRQHandler>:
 * ===========================================================================================================
 * */


void USART1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <USART1_IRQHandler+0x10>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	4798      	blx	r3
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000ac 	.word	0x200000ac

08001104 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <USART2_IRQHandler+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	4798      	blx	r3
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000ac 	.word	0x200000ac

08001118 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack ();
 800111c:	4b02      	ldr	r3, [pc, #8]	; (8001128 <USART3_IRQHandler+0x10>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	4798      	blx	r3
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000ac 	.word	0x200000ac

0800112c <Clock_Init>:
//}



void Clock_Init(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <Clock_Init+0x3c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <Clock_Init+0x3c>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <Clock_Init+0x3c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a09      	ldr	r2, [pc, #36]	; (8001168 <Clock_Init+0x3c>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <Clock_Init+0x3c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <Clock_Init+0x3c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <Clock_Init+0x3c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a03      	ldr	r2, [pc, #12]	; (8001168 <Clock_Init+0x3c>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6193      	str	r3, [r2, #24]

}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000

0800116c <main>:
//}
//


int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af02      	add	r7, sp, #8
	Clock_Init();
 8001172:	f7ff ffdb 	bl	800112c <Clock_Init>
	keypad_Init();
 8001176:	f7fe fffb 	bl	8000170 <keypad_Init>
	LCD_Init();
 800117a:	f7ff f879 	bl	8000270 <LCD_Init>
	HAL_SEVEN_SEG_init();
 800117e:	f7ff f995 	bl	80004ac <HAL_SEVEN_SEG_init>
	HAL_SEVEN_SEG_Write(SlotsNumber);
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <main+0x80>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9d6 	bl	8000538 <HAL_SEVEN_SEG_Write>


	/* ====================== I2C config ====================== */
	I2C_InitCFG_t I2C_Config;

	I2C_Config.I2C_ClockSpeed = I2C_SCLK_SM_50K;
 800118c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001190:	60fb      	str	r3, [r7, #12]
	I2C_Config.I2C_STRETCH_Mode = I2C_STRETCH_Mode_Disable;
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	613b      	str	r3, [r7, #16]
	I2C_Config.I2C_Mode = I2C_Mode_I2C;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
	I2C_Config.I2C_ACK_Controller = I2C_Acknowledge_Enable;
 800119a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119e:	623b      	str	r3, [r7, #32]
	I2C_Config.I2C_General_Call_Address_Detection = I2C_ENGC_Enable;
 80011a0:	2340      	movs	r3, #64	; 0x40
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_Config.Slave_I2C_Address.Primary_Slave_address = 0x30;
 80011a4:	2330      	movs	r3, #48	; 0x30
 80011a6:	837b      	strh	r3, [r7, #26]
	I2C_Config.Slave_I2C_Address.Secondary_Slave_address = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	83bb      	strh	r3, [r7, #28]
	I2C_Config.Slave_I2C_Address.Enable_Dual_address = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	833b      	strh	r3, [r7, #24]
	I2C_Config.Slave_I2C_Address.I2C_Slave_Address_Mode = I2C_Slave_Address_7Bit;
 80011b0:	2300      	movs	r3, #0
 80011b2:	83fb      	strh	r3, [r7, #30]

	MCAL_I2C_INIT(I2C1, &I2C_Config);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <main+0x84>)
 80011bc:	f7ff fc40 	bl	8000a40 <MCAL_I2C_INIT>
	MCAL_I2C_GPIO_Set_PIN(I2C1);
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <main+0x84>)
 80011c2:	f7ff fd57 	bl	8000c74 <MCAL_I2C_GPIO_Set_PIN>

	uint8_t receivedData[4] = {0};
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
	uint8_t responseData = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t expectedString[4] = {'T', 'E', 'S', 'T'};
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <main+0x88>)
 80011d2:	607b      	str	r3, [r7, #4]
	//	MCAL_I2C_Master_TX(I2C1, 0x1, 0x3, 1, With_STOP, Start);
//	MCAL_I2C_Master_RX(I2C1, 0x20, receivedData, 4, With_STOP, Start);
//
//	if (memcmp(receivedData, expectedString, 4) == 0)
//	{w
		MCAL_I2C_Master_TX(I2C1, 0x20, &receivedData, 4, With_STOP, Start);
 80011d4:	f107 0208 	add.w	r2, r7, #8
 80011d8:	2300      	movs	r3, #0
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2304      	movs	r3, #4
 80011e2:	2120      	movs	r1, #32
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <main+0x84>)
 80011e6:	f7ff fd8f 	bl	8000d08 <MCAL_I2C_Master_TX>
//	}

	while(1)
 80011ea:	e7fe      	b.n	80011ea <main+0x7e>
 80011ec:	2000000a 	.word	0x2000000a
 80011f0:	40005400 	.word	0x40005400
 80011f4:	54534554 	.word	0x54534554

080011f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001226:	f000 f811 	bl	800124c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff ff9f 	bl	800116c <main>

0800122e <LoopForever>:

LoopForever:
  b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800123c:	080012cc 	.word	0x080012cc
  ldr r2, =_sbss
 8001240:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001244:	200000b0 	.word	0x200000b0

08001248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC1_2_IRQHandler>
	...

0800124c <__libc_init_array>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	2600      	movs	r6, #0
 8001250:	4d0c      	ldr	r5, [pc, #48]	; (8001284 <__libc_init_array+0x38>)
 8001252:	4c0d      	ldr	r4, [pc, #52]	; (8001288 <__libc_init_array+0x3c>)
 8001254:	1b64      	subs	r4, r4, r5
 8001256:	10a4      	asrs	r4, r4, #2
 8001258:	42a6      	cmp	r6, r4
 800125a:	d109      	bne.n	8001270 <__libc_init_array+0x24>
 800125c:	f000 f81a 	bl	8001294 <_init>
 8001260:	2600      	movs	r6, #0
 8001262:	4d0a      	ldr	r5, [pc, #40]	; (800128c <__libc_init_array+0x40>)
 8001264:	4c0a      	ldr	r4, [pc, #40]	; (8001290 <__libc_init_array+0x44>)
 8001266:	1b64      	subs	r4, r4, r5
 8001268:	10a4      	asrs	r4, r4, #2
 800126a:	42a6      	cmp	r6, r4
 800126c:	d105      	bne.n	800127a <__libc_init_array+0x2e>
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	f855 3b04 	ldr.w	r3, [r5], #4
 8001274:	4798      	blx	r3
 8001276:	3601      	adds	r6, #1
 8001278:	e7ee      	b.n	8001258 <__libc_init_array+0xc>
 800127a:	f855 3b04 	ldr.w	r3, [r5], #4
 800127e:	4798      	blx	r3
 8001280:	3601      	adds	r6, #1
 8001282:	e7f2      	b.n	800126a <__libc_init_array+0x1e>
 8001284:	080012c4 	.word	0x080012c4
 8001288:	080012c4 	.word	0x080012c4
 800128c:	080012c4 	.word	0x080012c4
 8001290:	080012c8 	.word	0x080012c8

08001294 <_init>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr

080012a0 <_fini>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr
